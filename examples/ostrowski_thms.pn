#import("ostrowski_defs.pn")

#load("ostrowski/sturmian_word.txt", "pecan", $C(n))

bco_positive(x) := @simplify[exists z. bco_zero(z) & bco_lt(z, x)]

eventually_periodic(a, p) := @no_simplify[
    bco_valid(a,p) &
    bco_positive(p) &
    exists n. bco_valid(a, n) &
    forall i, ip.
        (bco_adder(a,i,p,ip) & @postprocess[bco_valid(a,n) & bco_leq(n,i)])
        =>
        @postprocess[$C[i] = $C[ip]]
    ]

// Theorem ("Sturmian words are not eventually periodic", {
//     forall a, p. bco_valid(a, p) => !eventually_periodic(a, p)
// }) .

// Theorem ("Sturmian words start with arbitrarily long squares", {
//     @no_simplify[
//         forall a. bco_standard(a) =>
//         forall n is ostrowski(a).
//         exists m is ostrowski(a). m > n &
//         forall j, jm. (bco_lt(j,m) & bco_adder(a,j,m,jm)) => $C[j] = $C[jm]
//     ]
// }) .

square(a, n) :=
    @no_simplify[
        exists i.
        bco_valid2(a, i, n) &
        forall bound.
        @postprocess[(@postprocess[bco_valid(a, bound) & bco_adder(a, i, n, bound)] =>
        @postprocess[forall j. @postprocess[@postprocess[bco_lt(j, bound) & bco_leq(i, j) & bco_valid(a, j)] =>
            @postprocess[forall jn. bco_adder(a, j, n, jn) => $C[j] = $C[jn]]]])]
    ]

antisquare(a, n) :=
    @no_simplify[
        exists i.
        bco_valid2(a, i, n) &
        forall bound.
        @postprocess[(@postprocess[bco_valid(a, bound) & bco_adder(a, i, n, bound)] =>
        @postprocess[forall j. @postprocess[@postprocess[bco_lt(j, bound) & bco_leq(i, j) & bco_valid(a, j)] =>
            @postprocess[forall jn. bco_adder(a, j, n, jn) => $C[j] != $C[jn]]]])]
    ]

//Theorem ("All Sturmian words contain finitely many antisquares", {
//    forall a. bco_standard(a) =>
//    exists m. bco_valid(a, m) &
//    forall n. antisquare(a, n) => bco_leq(n, m)
//}).

// Theorem ("All Sturmian words contain squares", {
//     @no_simplify[
//         forall a. bco_standard(a) => exists n. bco_positive(n) & bco_valid(a,n) & square(a,n)
//     ]
// }) .

cube(a, n) :=
    @no_simplify[
        exists i.
        forall bound, temp.
        @postprocess[bco_valid2(a, i, n) &
        (@postprocess[bco_adder(a,i,n,temp) & bco_adder(a, temp, temp, bound) & bco_valid2(a,bound,temp)] =>
        @postprocess[forall j. @postprocess[@postprocess[bco_lt(j, bound) & bco_leq(i, j) & bco_valid(a, j)] =>
            @postprocess[forall jn. bco_adder(a, j, n, jn) => $C[j] = $C[jn]]]])]
        // @postprocess[(@postprocess[bco_valid2(a, bound, temp) & bco_adder(a,i,n,temp) & bco_adder(a, temp, temp, bound)] =>
        // @postprocess[forall j. @postprocess[@postprocess[bco_lt(j, bound) & bco_leq(i, j) & bco_valid(a, j)] =>
        //     @postprocess[forall jn. bco_adder(a, j, n, jn) => $C[j] = $C[jn]]]])]
    ]

//Theorem ("All Sturmian words contain cubes", {
//    @no_simplify[
//        forall a. bco_standard(a) => exists n. bco_positive(n) & bco_valid(a,n) & cube(a,n)
//    ]
//}) .

//bco_one
bco_one(a,one) := forall zero. bco_zero(zero) => bco_succ(a,zero,one)

//Aj j<n => C2[i+j] = C2[i+i+n-1-(i+j)] 
//sum = i+i+n-1
//bound = i+n
//doesn't work
palindrome(a,n) := @no_simplify[
        exists i.
        forall sum, ii, iin.
         @postprocess[bco_valid2(a, i, n) & bco_adder(a, i, i, ii) & bco_adder(a, ii, n, iin) =>
         @postprocess[forall one.  @postprocess[bco_one(a,one) & bco_adder(a, sum, one, iin)]] => 
        @postprocess[forall bound.
         @postprocess[bco_valid(a,bound) & bco_adder(a, i, n, bound)] => 
        @postprocess[forall ij. bco_leq(i,ij) & bco_lt(ij, bound) & bco_valid(a, ij) => 
            @postprocess[forall other. bco_adder(a, ij, other, sum) & bco_valid(a,other) => @postprocess[$C[ij] = $C[other]]]]]]]
//#save_aut("palindrome.aut", palindrome)

Theorem ("All Sturmian words contain palindromes", {
    @no_simplify[
        forall a. bco_standard(a) => exists n. bco_positive(n) & bco_valid(a,n) & palindrome(a,n)
    ]
}) .

//special factors 
//special_factor(a,i,n) := @no_simplify[
//    bco_valid2(a,i,n) & (
//        forall i_. bco_valid(a,i_) & bco_lt(i_, i) =>
//        exists s. bco_valid(a,s) & bco_lt(s,n) => $C[i_s] != $C[is]
//    ) & (
//        exists j, k. (
//            forall t. bco_lt(t, n) => $C[jt] = $C[it]
//        ) & (
//            forall u. bco_lt(u, n) => $C[ku] = $C[iu]
//        ) & (
//            $C[jn] != $C[kn]
//        )
//    )
//]
//
//Theorem ("All Sturmian words contain palindromes", {
//    @no_simplify[
//        forall a. bco_standard(a) => exists n. bco_positive(n) & bco_valid(a,n) & palindrome(a,n)
//    ]
//}) .