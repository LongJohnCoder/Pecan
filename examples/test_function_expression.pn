one(x is nat) := x = 1
two(x is nat) := x = 2

test() := one() + one() = two()
#assert_prop(true, test)

// Also test the other, equivalent, syntax for this
test2() := one(_) + one(_) = two(_)
#assert_prop(true, test2)

double(x is nat, out is nat) := out = 2*x
my_even(x is nat) := exists y is nat. x = double(y)
my_odd(x is nat) := exists y is nat. x = double(y) + 1

x is nat
test3() := forall x. my_even(x) | my_odd(x)
#assert_prop(true, test3)

