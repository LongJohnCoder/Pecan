#import("integers.pn")

Restrict x,y,z are int.

test() := forall x. (if x is positive then negate(x) is negative) & (if x is negative then negate(x) is positive)
#assert_prop(true, test)

Execute abelianGroupCheck int_add int.

negatives_exist() := forall x. forall y. exists z. x - y = z
#assert_prop(true, negatives_exist)

negatives_dont_exist_for_nat() := forall n is nat. forall m is nat. exists p is nat. n - m = p
#assert_prop(false, negatives_dont_exist_for_nat)

abs(x is int, y is int) := (x >= 0 & y = x) | (x < 0 & y = -x)
abs_positive() := forall x. abs(x) >= 0
#assert_prop(true, abs_positive)

abs_bigger() := forall x. abs(x) >= x
#assert_prop(true, abs_bigger)

ints_dense() := forall x. forall y. x < y => exists z. x < z & z < y
#assert_prop(false, ints_dense)

