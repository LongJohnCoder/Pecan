#import("reals.pn")

x, y, z, w are real

integral_less_irrefl() := forall x. !integral_less(x, x)
#assert_prop(true, integral_less_irrefl)

integral_less_antisym() := forall x. forall y. if integral_less(x, y) & integral_less(y, x) then integral_equal(x, y)
#assert_prop(true, integral_less_antisym)

integral_less_trans() := forall x. forall y. forall z. if integral_less(x, y) & integral_less(y, z) then integral_less(x, z)
#assert_prop(true, integral_less_trans)

integral_less_total() := forall x. forall y. integral_less(x, y) | integral_equal(x, y) | integral_less(y, x)
#assert_prop(true, integral_less_total)

real_equal_refl() := forall x. real_equal(x, x)
#assert_prop(true, real_equal_refl)

real_equal_sym() := forall x. forall y. real_equal(x, y) <=> real_equal(y, x)
#assert_prop(true, real_equal_sym)

real_equal_trans() := forall x. forall y. forall z. (real_equal(x, y) & real_equal(y, z)) => real_equal(x, z)
#assert_prop(true, real_equal_trans)

real_less(a, b) := integral_less(a, b) | (integral_equal(a, b) &
                                            ((negative(a) & negative(b) & fractional_less(b, a)) |
                                             (positive(a) & positive(b) & fractional_less(a, b))))

real_less_irrefl() := forall x. !real_less(x, x)
#assert_prop(true, real_less_irrefl)

real_less_antisym() := forall x. forall y. if real_less(x, y) & real_less(y, x) then x = y
#assert_prop(true, real_less_antisym)

real_less_trans() := forall x. forall y. forall z. if real_less(x, y) & real_less(y, z) then real_less(x, z)
#assert_prop(true, real_less_trans)

real_less_total() := forall x. forall y. real_less(x, y) | x = y | real_less(y, x)
#assert_prop(true, real_less_total)

real_add_pos_closed() := forall x. x is positive => forall y. y is positive => exists z. real_add_pos(x, y, z)
#assert_prop(true, real_add_pos_closed)

real_add_pos_comm() := forall x. x is positive => forall y. y is positive => forall z. (real_add_pos(x, y, z) <=> real_add_pos(y, x, z))
#assert_prop(true, real_add_pos_comm)

real_add_pos_assoc() := forall x.
                        forall y.
                        forall z.
                        forall xy.
                        forall yz. (real_add_pos(x, y, xy) & real_add_pos(y, z, yz)) =>
                            forall w. real_add_pos(xy, z, w) <=> real_add_pos(x, yz, w)
// #assert_prop(true, real_add_pos_assoc)

can_sub_if_lt() := forall x. x is positive => forall y. (y is positive & real_less(y, x)) => exists w. real_add_pos(w, y, x)
#assert_prop(true, can_sub_if_lt)

real_add_dif_sign_closed() := forall x. forall y. (x is negative & x is real & y is positive) => exists z. real_add_dif_sign(x, y, z)
#assert_prop(true, real_add_dif_sign_closed)

real_add_closed() := forall x. forall y. (x is real & y is real) => exists z. real_add(x, y, z)
#assert_prop(true, real_add_closed)

real_add_comm() := forall x. forall y. x is real => x + y = y + x
#assert_prop(true, real_add_comm)

real_add_unique() := forall x. forall y. forall z. forall w. (x + y = z & x + y = w) => z = w
#assert_prop(true, real_add_unique)

real_add_assoc() := forall x.
                    forall y.
                    forall z.
                    forall xy is real.
                    forall yz is real.
                    (xy is real & real_add(x, y, xy) & real_add(y, z, yz) & x is real & z is real) =>
                    real_add(x, yz, xy + z)
#assert_prop(true, real_add_assoc)

reals_dense() := forall x. forall y. x < y => exists z. x < z & z < y
#assert_prop(true, reals_dense)

can_divide_by_2() := forall x. exists y. x=2*y
#assert_prop(true, can_divide_by_2)

can_divide_by_negative_10() := forall x. exists y. x=(-10)*y
#assert_prop(true, can_divide_by_negative_10)

can_divide_by_17() := forall x. exists y. x=17*y
#assert_prop(true, can_divide_by_17)

