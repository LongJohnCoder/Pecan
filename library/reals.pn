#import("integers.pn")

#load("real/msd_bin_less.txt", "walnut", msd_bin_less(a, b))
#load("real/real_equal.txt", "pecan", real_equal(a, b))

one_int(x) := "!x & X(x) & X(X(G(!x)))"
zeros(x) := "G(!x)"
#shuffle(one_int(x), zeros(x), real_one(x))

not_all_ones(x) := "G(F(!x))"

any2(a, b) := true

// Build the basic recognition, addition, and comparison operators for real numbers

// Real numbers aren't allowed to end in infinitely many ones---this preserves unique representations
#shuffle(finite_num(x), not_all_ones(x), real_temp(x))
real(x) := real_temp(x) & !negative_zero(x)

#shuffle(int_less(a, b), any2(a, b), integral_less(a, b))
#shuffle(default_equal(a, b), any2(a, b), integral_equal(a, b))
#shuffle(any2(a, b), msd_bin_less(a, b), fractional_less(a, b))

real_less(a, b) := integral_less(a, b) | (integral_equal(a, b) &
                                            ((negative(a) & negative(b) & fractional_less(b, a)) |
                                             (positive(a) & positive(b) & fractional_less(a, b))))

#load("real/real_add_same_sign.txt", "pecan", real_add_same_sign(a, b, c))

real_leq(a, b) := real_less(a, b) | a = b

real_add_dif_sign(a, b, c) := negative(a) & positive(b) & ((real_less(b, negate(a)) & negate(real_add_same_sign(_, b, negate(a)), c)) |
                                                          (real_leq(negate(a), b) & real_add_same_sign(c, negate(a), b)))

real_add(a, b, c) := (real_add_same_sign(a, b, c) | real_add_dif_sign(a, b, c) | real_add_dif_sign(b, a, c))

#type(real, {
    "adder": real_add(any, any, any),
    "less": real_less(any, any),
    "one": real_one(any)
})

