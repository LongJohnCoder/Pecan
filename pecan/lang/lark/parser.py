# The file was automatically generated by Lark v0.7.7
#
#
#   Lark Stand-alone Generator Tool
# ----------------------------------
# Generates a stand-alone LALR(1) parser with a standard lexer
#
# Git:    https://github.com/erezsh/lark
# Author: Erez Shinan (erezshin@gmail.com)
#
#
#    >>> LICENSE
#
#    This tool and its generated code use a separate license from Lark.
#
#    It is licensed under GPLv2 or above.
#
#    If you wish to purchase a commercial license for this tool and its
#    generated code, contact me via email.
#
#    If GPL is incompatible with your free or open-source project,
#    contact me and we'll work it out (for free).
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    See <http://www.gnu.org/licenses/>.
#
#

class LarkError(Exception):
    pass

class GrammarError(LarkError):
    pass

class ParseError(LarkError):
    pass

class LexError(LarkError):
    pass

class UnexpectedInput(LarkError):
    pos_in_stream = None

    def get_context(self, text, span=40):
        pos = self.pos_in_stream
        start = max(pos - span, 0)
        end = pos + span
        before = text[start:pos].rsplit('\n', 1)[-1]
        after = text[pos:end].split('\n', 1)[0]
        return before + after + '\n' + ' ' * len(before) + '^\n'

    def match_examples(self, parse_fn, examples):
        """ Given a parser instance and a dictionary mapping some label with
            some malformed syntax examples, it'll return the label for the
            example that bests matches the current error.
        """
        assert self.state is not None, "Not supported for this exception"

        candidate = None
        for label, example in examples.items():
            assert not isinstance(example, STRING_TYPE)

            for malformed in example:
                try:
                    parse_fn(malformed)
                except UnexpectedInput as ut:
                    if ut.state == self.state:
                        try:
                            if ut.token == self.token:  # Try exact match first
                                return label
                        except AttributeError:
                            pass
                        if not candidate:
                            candidate = label

        return candidate


class UnexpectedCharacters(LexError, UnexpectedInput):
    def __init__(self, seq, lex_pos, line, column, allowed=None, considered_tokens=None, state=None, token_history=None):
        message = "No terminal defined for '%s' at line %d col %d" % (seq[lex_pos], line, column)

        self.line = line
        self.column = column
        self.allowed = allowed
        self.considered_tokens = considered_tokens
        self.pos_in_stream = lex_pos
        self.state = state

        message += '\n\n' + self.get_context(seq)
        if allowed:
            message += '\nExpecting: %s\n' % allowed
        if token_history:
            message += '\nPrevious tokens: %s\n' % ', '.join(repr(t) for t in token_history)

        super(UnexpectedCharacters, self).__init__(message)



class UnexpectedToken(ParseError, UnexpectedInput):
    def __init__(self, token, expected, considered_rules=None, state=None):
        self.token = token
        self.expected = expected     # XXX str shouldn't necessary
        self.line = getattr(token, 'line', '?')
        self.column = getattr(token, 'column', '?')
        self.considered_rules = considered_rules
        self.state = state
        self.pos_in_stream = getattr(token, 'pos_in_stream', None)

        message = ("Unexpected token %r at line %s, column %s.\n"
                   "Expected one of: \n\t* %s\n"
                   % (token, self.line, self.column, '\n\t* '.join(self.expected)))

        super(UnexpectedToken, self).__init__(message)

class VisitError(LarkError):
    def __init__(self, tree, orig_exc):
        self.tree = tree
        self.orig_exc = orig_exc

        message = 'Error trying to process rule "%s":\n\n%s' % (tree.data, orig_exc)
        super(VisitError, self).__init__(message)

def classify(seq, key=None, value=None):
    d = {}
    for item in seq:
        k = key(item) if (key is not None) else item
        v = value(item) if (value is not None) else item
        if k in d:
            d[k].append(v)
        else:
            d[k] = [v]
    return d


def _deserialize(data, namespace, memo):
    if isinstance(data, dict):
        if '__type__' in data: # Object
            class_ = namespace[data['__type__']]
            return class_.deserialize(data, memo)
        elif '@' in data:
            return memo[data['@']]
        return {key:_deserialize(value, namespace, memo) for key, value in data.items()}
    elif isinstance(data, list):
        return [_deserialize(value, namespace, memo) for value in data]
    return data


class Serialize(object):
    def memo_serialize(self, types_to_memoize):
        memo = SerializeMemoizer(types_to_memoize)
        return self.serialize(memo), memo.serialize()

    def serialize(self, memo=None):
        if memo and memo.in_types(self):
            return {'@': memo.memoized.get(self)}

        fields = getattr(self, '__serialize_fields__')
        res = {f: _serialize(getattr(self, f), memo) for f in fields}
        res['__type__'] = type(self).__name__
        postprocess = getattr(self, '_serialize', None)
        if postprocess:
            postprocess(res, memo)
        return res

    @classmethod
    def deserialize(cls, data, memo):
        namespace = getattr(cls, '__serialize_namespace__', {})
        namespace = {c.__name__:c for c in namespace}

        fields = getattr(cls, '__serialize_fields__')

        if '@' in data:
            return memo[data['@']]

        inst = cls.__new__(cls)
        for f in fields:
            try:
                setattr(inst, f, _deserialize(data[f], namespace, memo))
            except KeyError as e:
                raise KeyError("Cannot find key for class", cls, e)
        postprocess = getattr(inst, '_deserialize', None)
        if postprocess:
            postprocess()
        return inst


class SerializeMemoizer(Serialize):
    __serialize_fields__ = 'memoized',

    def __init__(self, types_to_memoize):
        self.types_to_memoize = tuple(types_to_memoize)
        self.memoized = Enumerator()

    def in_types(self, value):
        return isinstance(value, self.types_to_memoize)

    def serialize(self):
        return _serialize(self.memoized.reversed(), None)

    @classmethod
    def deserialize(cls, data, namespace, memo):
        return _deserialize(data, namespace, memo)



try:
    STRING_TYPE = basestring
except NameError:   # Python 3
    STRING_TYPE = str


import types
from functools import wraps, partial
from contextlib import contextmanager

Str = type(u'')
try:
    classtype = types.ClassType # Python2
except AttributeError:
    classtype = type    # Python3

def smart_decorator(f, create_decorator):
    if isinstance(f, types.FunctionType):
        return wraps(f)(create_decorator(f, True))

    elif isinstance(f, (classtype, type, types.BuiltinFunctionType)):
        return wraps(f)(create_decorator(f, False))

    elif isinstance(f, types.MethodType):
        return wraps(f)(create_decorator(f.__func__, True))

    elif isinstance(f, partial):
        # wraps does not work for partials in 2.7: https://bugs.python.org/issue3445
        return wraps(f.func)(create_decorator(lambda *args, **kw: f(*args[1:], **kw), True))

    else:
        return create_decorator(f.__func__.__call__, True)

import sys, re
Py36 = (sys.version_info[:2] >= (3, 6))

import sre_parse
import sre_constants
def get_regexp_width(regexp):
    try:
        return [int(x) for x in sre_parse.parse(regexp).getwidth()]
    except sre_constants.error:
        raise ValueError(regexp)


class Meta:
    def __init__(self):
        self.empty = True

class Tree(object):
    def __init__(self, data, children, meta=None):
        self.data = data
        self.children = children
        self._meta = meta

    @property
    def meta(self):
        if self._meta is None:
            self._meta = Meta()
        return self._meta

    def __repr__(self):
        return 'Tree(%s, %s)' % (self.data, self.children)

    def _pretty_label(self):
        return self.data

    def _pretty(self, level, indent_str):
        if len(self.children) == 1 and not isinstance(self.children[0], Tree):
            return [ indent_str*level, self._pretty_label(), '\t', '%s' % (self.children[0],), '\n']

        l = [ indent_str*level, self._pretty_label(), '\n' ]
        for n in self.children:
            if isinstance(n, Tree):
                l += n._pretty(level+1, indent_str)
            else:
                l += [ indent_str*(level+1), '%s' % (n,), '\n' ]

        return l

    def pretty(self, indent_str='  '):
        return ''.join(self._pretty(0, indent_str))

    def __eq__(self, other):
        try:
            return self.data == other.data and self.children == other.children
        except AttributeError:
            return False

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self):
        return hash((self.data, tuple(self.children)))

    def iter_subtrees(self):
        # TODO: Re-write as a more efficient version

        visited = set()
        q = [self]

        l = []
        while q:
            subtree = q.pop()
            l.append( subtree )
            if id(subtree) in visited:
                continue    # already been here from another branch
            visited.add(id(subtree))
            q += [c for c in subtree.children if isinstance(c, Tree)]

        seen = set()
        for x in reversed(l):
            if id(x) not in seen:
                yield x
                seen.add(id(x))

    def find_pred(self, pred):
        "Find all nodes where pred(tree) == True"
        return filter(pred, self.iter_subtrees())

    def find_data(self, data):
        "Find all nodes where tree.data == data"
        return self.find_pred(lambda t: t.data == data)


from inspect import getmembers, getmro

class Discard(Exception):
    pass

# Transformers

class Transformer:
    """Visits the tree recursively, starting with the leaves and finally the root (bottom-up)

    Calls its methods (provided by user via inheritance) according to tree.data
    The returned value replaces the old one in the structure.

    Can be used to implement map or reduce.
    """

    __visit_tokens__ = False   # For backwards compatibility
    def __init__(self,  visit_tokens=False):
        self.__visit_tokens__ = visit_tokens

    def _call_userfunc(self, tree, new_children=None):
        # Assumes tree is already transformed
        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            try:
                if getattr(f, 'meta', False):
                    return f(children, tree.meta)
                elif getattr(f, 'inline', False):
                    return f(*children)
                elif getattr(f, 'whole_tree', False):
                    if new_children is not None:
                        tree.children = new_children
                    return f(tree)
                else:
                    return f(children)
            except (GrammarError, Discard):
                raise
            except Exception as e:
                raise VisitError(tree, e)

    def _call_userfunc_token(self, token):
        try:
            f = getattr(self, token.type)
        except AttributeError:
            return self.__default_token__(token)
        else:
            try:
                return f(token)
            except (GrammarError, Discard):
                raise
            except Exception as e:
                raise VisitError(token, e)


    def _transform_children(self, children):
        for c in children:
            try:
                if isinstance(c, Tree):
                    yield self._transform_tree(c)
                elif self.__visit_tokens__ and isinstance(c, Token):
                    yield self._call_userfunc_token(c)
                else:
                    yield c
            except Discard:
                pass

    def _transform_tree(self, tree):
        children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree, children)

    def transform(self, tree):
        return self._transform_tree(tree)

    def __mul__(self, other):
        return TransformerChain(self, other)

    def __default__(self, data, children, meta):
        "Default operation on tree (for override)"
        return Tree(data, children, meta)

    def __default_token__(self, token):
        "Default operation on token (for override)"
        return token


    @classmethod
    def _apply_decorator(cls, decorator, **kwargs):
        mro = getmro(cls)
        assert mro[0] is cls
        libmembers = {name for _cls in mro[1:] for name, _ in getmembers(_cls)}
        for name, value in getmembers(cls):

            # Make sure the function isn't inherited (unless it's overwritten)
            if name.startswith('_') or (name in libmembers and name not in cls.__dict__):
                continue
            if not callable(cls.__dict__[name]):
                continue

            # Skip if v_args already applied (at the function level)
            if hasattr(cls.__dict__[name], 'vargs_applied'):
                continue

            static = isinstance(cls.__dict__[name], (staticmethod, classmethod))
            setattr(cls, name, decorator(value, static=static, **kwargs))
        return cls


class InlineTransformer(Transformer):   # XXX Deprecated
    def _call_userfunc(self, tree, new_children=None):
        # Assumes tree is already transformed
        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            return f(*children)


class TransformerChain(object):
    def __init__(self, *transformers):
        self.transformers = transformers

    def transform(self, tree):
        for t in self.transformers:
            tree = t.transform(tree)
        return tree

    def __mul__(self, other):
        return TransformerChain(*self.transformers + (other,))


class Transformer_InPlace(Transformer):
    "Non-recursive. Changes the tree in-place instead of returning new instances"
    def _transform_tree(self, tree):           # Cancel recursion
        return self._call_userfunc(tree)

    def transform(self, tree):
        for subtree in tree.iter_subtrees():
            subtree.children = list(self._transform_children(subtree.children))

        return self._transform_tree(tree)


class Transformer_InPlaceRecursive(Transformer):
    "Recursive. Changes the tree in-place instead of returning new instances"
    def _transform_tree(self, tree):
        tree.children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree)



# Visitors

class VisitorBase:
    def _call_userfunc(self, tree):
        return getattr(self, tree.data, self.__default__)(tree)

    def __default__(self, tree):
        "Default operation on tree (for override)"
        return tree


class Visitor(VisitorBase):
    """Bottom-up visitor, non-recursive

    Visits the tree, starting with the leaves and finally the root (bottom-up)
    Calls its methods (provided by user via inheritance) according to tree.data
    """


    def visit(self, tree):
        for subtree in tree.iter_subtrees():
            self._call_userfunc(subtree)
        return tree

class Visitor_Recursive(VisitorBase):
    """Bottom-up visitor, recursive

    Visits the tree, starting with the leaves and finally the root (bottom-up)
    Calls its methods (provided by user via inheritance) according to tree.data
    """

    def visit(self, tree):
        for child in tree.children:
            if isinstance(child, Tree):
                self.visit(child)

        f = getattr(self, tree.data, self.__default__)
        f(tree)
        return tree



def visit_children_decor(func):
    "See Interpreter"
    @wraps(func)
    def inner(cls, tree):
        values = cls.visit_children(tree)
        return func(cls, values)
    return inner


class Interpreter:
    """Top-down visitor, recursive

    Visits the tree, starting with the root and finally the leaves (top-down)
    Calls its methods (provided by user via inheritance) according to tree.data

    Unlike Transformer and Visitor, the Interpreter doesn't automatically visit its sub-branches.
    The user has to explicitly call visit_children, or use the @visit_children_decor
    """
    def visit(self, tree):
        return getattr(self, tree.data)(tree)

    def visit_children(self, tree):
        return [self.visit(child) if isinstance(child, Tree) else child
                for child in tree.children]

    def __getattr__(self, name):
        return self.__default__

    def __default__(self, tree):
        return self.visit_children(tree)




# Decorators

def _apply_decorator(obj, decorator, **kwargs):
    try:
        _apply = obj._apply_decorator
    except AttributeError:
        return decorator(obj, **kwargs)
    else:
        return _apply(decorator, **kwargs)



def _inline_args__func(func):
    @wraps(func)
    def create_decorator(_f, with_self):
        if with_self:
            def f(self, children):
                return _f(self, *children)
        else:
            def f(self, children):
                return _f(*children)
        return f

    return smart_decorator(func, create_decorator)


def inline_args(obj):   # XXX Deprecated
    return _apply_decorator(obj, _inline_args__func)



def _visitor_args_func_dec(func, inline=False, meta=False, whole_tree=False, static=False):
    assert [whole_tree, meta, inline].count(True) <= 1
    def create_decorator(_f, with_self):
        if with_self:
            def f(self, *args, **kwargs):
                return _f(self, *args, **kwargs)
        else:
            def f(self, *args, **kwargs):
                return _f(*args, **kwargs)
        return f

    if static:
        f = wraps(func)(create_decorator(func, False))
    else:
        f = smart_decorator(func, create_decorator)
    f.vargs_applied = True
    f.inline = inline
    f.meta = meta
    f.whole_tree = whole_tree
    return f

def v_args(inline=False, meta=False, tree=False):
    "A convenience decorator factory, for modifying the behavior of user-supplied visitor methods"
    if [tree, meta, inline].count(True) > 1:
        raise ValueError("Visitor functions can either accept tree, or meta, or be inlined. These cannot be combined.")
    def _visitor_args_dec(obj):
        return _apply_decorator(obj, _visitor_args_func_dec, inline=inline, meta=meta, whole_tree=tree)
    return _visitor_args_dec



class Indenter:
    def __init__(self):
        self.paren_level = None
        self.indent_level = None
        assert self.tab_len > 0

    def handle_NL(self, token):
        if self.paren_level > 0:
            return

        yield token

        indent_str = token.rsplit('\n', 1)[1] # Tabs and spaces
        indent = indent_str.count(' ') + indent_str.count('\t') * self.tab_len

        if indent > self.indent_level[-1]:
            self.indent_level.append(indent)
            yield Token.new_borrow_pos(self.INDENT_type, indent_str, token)
        else:
            while indent < self.indent_level[-1]:
                self.indent_level.pop()
                yield Token.new_borrow_pos(self.DEDENT_type, indent_str, token)

            assert indent == self.indent_level[-1], '%s != %s' % (indent, self.indent_level[-1])

    def _process(self, stream):
        for token in stream:
            if token.type == self.NL_type:
                for t in self.handle_NL(token):
                    yield t
            else:
                yield token

            if token.type in self.OPEN_PAREN_types:
                self.paren_level += 1
            elif token.type in self.CLOSE_PAREN_types:
                self.paren_level -= 1
                assert self.paren_level >= 0

        while len(self.indent_level) > 1:
            self.indent_level.pop()
            yield Token(self.DEDENT_type, '')

        assert self.indent_level == [0], self.indent_level

    def process(self, stream):
        self.paren_level = 0
        self.indent_level = [0]
        return self._process(stream)

    # XXX Hack for ContextualLexer. Maybe there's a more elegant solution?
    @property
    def always_accept(self):
        return (self.NL_type,)



class Symbol(Serialize):
    is_term = NotImplemented

    def __init__(self, name):
        self.name = name

    def __eq__(self, other):
        assert isinstance(other, Symbol), other
        return self.is_term == other.is_term and self.name == other.name

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self):
        return hash(self.name)

    def __repr__(self):
        return '%s(%r)' % (type(self).__name__, self.name)

    fullrepr = property(__repr__)


class Terminal(Symbol):
    __serialize_fields__ = 'name', 'filter_out'

    is_term = True

    def __init__(self, name, filter_out=False):
        self.name = name
        self.filter_out = filter_out

    @property
    def fullrepr(self):
        return '%s(%r, %r)' % (type(self).__name__, self.name, self.filter_out)



class NonTerminal(Symbol):
    __serialize_fields__ = 'name',

    is_term = False



class RuleOptions(Serialize):
    __serialize_fields__ = 'keep_all_tokens', 'expand1', 'priority', 'empty_indices'

    def __init__(self, keep_all_tokens=False, expand1=False, priority=None, empty_indices=()):
        self.keep_all_tokens = keep_all_tokens
        self.expand1 = expand1
        self.priority = priority
        self.empty_indices = empty_indices

    def __repr__(self):
        return 'RuleOptions(%r, %r, %r)' % (
            self.keep_all_tokens,
            self.expand1,
            self.priority,
        )


class Rule(Serialize):
    """
        origin : a symbol
        expansion : a list of symbols
        order : index of this expansion amongst all rules of the same name
    """
    __slots__ = ('origin', 'expansion', 'alias', 'options', 'order', '_hash')

    __serialize_fields__ = 'origin', 'expansion', 'order', 'alias', 'options'
    __serialize_namespace__ = Terminal, NonTerminal, RuleOptions

    def __init__(self, origin, expansion, order=0, alias=None, options=None):
        self.origin = origin
        self.expansion = expansion
        self.alias = alias
        self.order = order
        self.options = options
        self._hash = hash((self.origin, tuple(self.expansion)))

    def _deserialize(self):
        self._hash = hash((self.origin, tuple(self.expansion)))

    def __str__(self):
        return '<%s : %s>' % (self.origin.name, ' '.join(x.name for x in self.expansion))

    def __repr__(self):
        return 'Rule(%r, %r, %r, %r)' % (self.origin, self.expansion, self.alias, self.options)

    def __hash__(self):
        return self._hash

    def __eq__(self, other):
        if not isinstance(other, Rule):
            return False
        return self.origin == other.origin and self.expansion == other.expansion





class Pattern(Serialize):

    def __init__(self, value, flags=()):
        self.value = value
        self.flags = frozenset(flags)

    def __repr__(self):
        return repr(self.to_regexp())

    # Pattern Hashing assumes all subclasses have a different priority!
    def __hash__(self):
        return hash((type(self), self.value, self.flags))
    def __eq__(self, other):
        return type(self) == type(other) and self.value == other.value and self.flags == other.flags

    def to_regexp(self):
        raise NotImplementedError()

    if Py36:
        # Python 3.6 changed syntax for flags in regular expression
        def _get_flags(self, value):
            for f in self.flags:
                value = ('(?%s:%s)' % (f, value))
            return value

    else:
        def _get_flags(self, value):
            for f in self.flags:
                value = ('(?%s)' % f) + value
            return value


class PatternStr(Pattern):
    __serialize_fields__ = 'value', 'flags'

    type = "str"

    def to_regexp(self):
        return self._get_flags(re.escape(self.value))

    @property
    def min_width(self):
        return len(self.value)
    max_width = min_width

class PatternRE(Pattern):
    __serialize_fields__ = 'value', 'flags', '_width'

    type = "re"

    def to_regexp(self):
        return self._get_flags(self.value)

    _width = None
    def _get_width(self):
        if self._width is None:
            self._width = get_regexp_width(self.to_regexp())
        return self._width

    @property
    def min_width(self):
        return self._get_width()[0]
    @property
    def max_width(self):
        return self._get_width()[1]


class TerminalDef(Serialize):
    __serialize_fields__ = 'name', 'pattern', 'priority'
    __serialize_namespace__ = PatternStr, PatternRE

    def __init__(self, name, pattern, priority=1):
        assert isinstance(pattern, Pattern), pattern
        self.name = name
        self.pattern = pattern
        self.priority = priority

    def __repr__(self):
        return '%s(%r, %r)' % (type(self).__name__, self.name, self.pattern)



class Token(Str):
    __slots__ = ('type', 'pos_in_stream', 'value', 'line', 'column', 'end_line', 'end_column')

    def __new__(cls, type_, value, pos_in_stream=None, line=None, column=None, end_line=None, end_column=None):
        try:
            self = super(Token, cls).__new__(cls, value)
        except UnicodeDecodeError:
            value = value.decode('latin1')
            self = super(Token, cls).__new__(cls, value)

        self.type = type_
        self.pos_in_stream = pos_in_stream
        self.value = value
        self.line = line
        self.column = column
        self.end_line = end_line
        self.end_column = end_column
        return self

    @classmethod
    def new_borrow_pos(cls, type_, value, borrow_t):
        return cls(type_, value, borrow_t.pos_in_stream, borrow_t.line, borrow_t.column, borrow_t.end_line, borrow_t.end_column)

    def __reduce__(self):
        return (self.__class__, (self.type, self.value, self.pos_in_stream, self.line, self.column, ))

    def __repr__(self):
        return 'Token(%s, %r)' % (self.type, self.value)

    def __deepcopy__(self, memo):
        return Token(self.type, self.value, self.pos_in_stream, self.line, self.column)

    def __eq__(self, other):
        if isinstance(other, Token) and self.type != other.type:
            return False

        return Str.__eq__(self, other)

    __hash__ = Str.__hash__


class LineCounter:
    def __init__(self):
        self.newline_char = '\n'
        self.char_pos = 0
        self.line = 1
        self.column = 1
        self.line_start_pos = 0

    def feed(self, token, test_newline=True):
        """Consume a token and calculate the new line & column.

        As an optional optimization, set test_newline=False is token doesn't contain a newline.
        """
        if test_newline:
            newlines = token.count(self.newline_char)
            if newlines:
                self.line += newlines
                self.line_start_pos = self.char_pos + token.rindex(self.newline_char) + 1

        self.char_pos += len(token)
        self.column = self.char_pos - self.line_start_pos + 1

class _Lex:
    "Built to serve both Lexer and ContextualLexer"
    def __init__(self, lexer, state=None):
        self.lexer = lexer
        self.state = state

    def lex(self, stream, newline_types, ignore_types):
        newline_types = frozenset(newline_types)
        ignore_types = frozenset(ignore_types)
        line_ctr = LineCounter()
        last_token = None

        while line_ctr.char_pos < len(stream):
            lexer = self.lexer
            res = lexer.match(stream, line_ctr.char_pos)
            if not res:
                allowed = {v for m, tfi in lexer.mres for v in tfi.values()} - ignore_types
                if not allowed:
                    allowed = {"<END-OF-FILE>"}
                raise UnexpectedCharacters(stream, line_ctr.char_pos, line_ctr.line, line_ctr.column, allowed=allowed, state=self.state, token_history=last_token and [last_token])

            value, type_ = res

            t = None
            if type_ not in ignore_types:
                t = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column)
                if t.type in lexer.callback:
                    t = lexer.callback[t.type](t)
                    if not isinstance(t, Token):
                        raise ValueError("Callbacks must return a token (returned %r)" % t)
                last_token = t
                yield t
            else:
                if type_ in lexer.callback:
                    t = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column)
                    lexer.callback[type_](t)

            line_ctr.feed(value, type_ in newline_types)
            if t:
                t.end_line = line_ctr.line
                t.end_column = line_ctr.column


class UnlessCallback:
    def __init__(self, mres):
        self.mres = mres

    def __call__(self, t):
        for mre, type_from_index in self.mres:
            m = mre.match(t.value)
            if m:
                t.type = type_from_index[m.lastindex]
                break
        return t

class CallChain:
    def __init__(self, callback1, callback2, cond):
        self.callback1 = callback1
        self.callback2 = callback2
        self.cond = cond

    def __call__(self, t):
        t2 = self.callback1(t)
        return self.callback2(t) if self.cond(t2) else t2





def _create_unless(terminals):
    tokens_by_type = classify(terminals, lambda t: type(t.pattern))
    assert len(tokens_by_type) <= 2, tokens_by_type.keys()
    embedded_strs = set()
    callback = {}
    for retok in tokens_by_type.get(PatternRE, []):
        unless = [] # {}
        for strtok in tokens_by_type.get(PatternStr, []):
            if strtok.priority > retok.priority:
                continue
            s = strtok.pattern.value
            m = re.match(retok.pattern.to_regexp(), s)
            if m and m.group(0) == s:
                unless.append(strtok)
                if strtok.pattern.flags <= retok.pattern.flags:
                    embedded_strs.add(strtok)
        if unless:
            callback[retok.name] = UnlessCallback(build_mres(unless, match_whole=True))

    terminals = [t for t in terminals if t not in embedded_strs]
    return terminals, callback


def _build_mres(terminals, max_size, match_whole):
    # Python sets an unreasonable group limit (currently 100) in its re module
    # Worse, the only way to know we reached it is by catching an AssertionError!
    # This function recursively tries less and less groups until it's successful.
    postfix = '$' if match_whole else ''
    mres = []
    while terminals:
        try:
            mre = re.compile(u'|'.join(u'(?P<%s>%s)'%(t.name, t.pattern.to_regexp()+postfix) for t in terminals[:max_size]))
        except AssertionError:  # Yes, this is what Python provides us.. :/
            return _build_mres(terminals, max_size//2, match_whole)

        # terms_from_name = {t.name: t for t in terminals[:max_size]}
        mres.append((mre, {i:n for n,i in mre.groupindex.items()} ))
        terminals = terminals[max_size:]
    return mres

def build_mres(terminals, match_whole=False):
    return _build_mres(terminals, len(terminals), match_whole)

def _regexp_has_newline(r):
    r"""Expressions that may indicate newlines in a regexp:
        - newlines (\n)
        - escaped newline (\\n)
        - anything but ([^...])
        - any-char (.) when the flag (?s) exists
        - spaces (\s)
    """
    return '\n' in r or '\\n' in r or '\\s' in r or '[^' in r or ('(?s' in r and '.' in r)

class Lexer(object):
    """Lexer interface

    Method Signatures:
        lex(self, stream) -> Iterator[Token]

        set_parser_state(self, state)   # Optional
    """
    set_parser_state = NotImplemented
    lex = NotImplemented


class TraditionalLexer(Lexer):

    def __init__(self, terminals, ignore=(), user_callbacks={}):
        assert all(isinstance(t, TerminalDef) for t in terminals), terminals

        terminals = list(terminals)

        # Sanitization
        for t in terminals:
            try:
                re.compile(t.pattern.to_regexp())
            except:
                raise LexError("Cannot compile token %s: %s" % (t.name, t.pattern))

            if t.pattern.min_width == 0:
                raise LexError("Lexer does not allow zero-width terminals. (%s: %s)" % (t.name, t.pattern))

        assert set(ignore) <= {t.name for t in terminals}

        # Init
        self.newline_types = [t.name for t in terminals if _regexp_has_newline(t.pattern.to_regexp())]
        self.ignore_types = list(ignore)

        terminals.sort(key=lambda x:(-x.priority, -x.pattern.max_width, -len(x.pattern.value), x.name))
        self.terminals = terminals
        self.user_callbacks = user_callbacks
        self.build()

    def build(self):
        terminals, self.callback = _create_unless(self.terminals)
        assert all(self.callback.values())

        for type_, f in self.user_callbacks.items():
            if type_ in self.callback:
                # Already a callback there, probably UnlessCallback
                self.callback[type_] = CallChain(self.callback[type_], f, lambda t: t.type == type_)
            else:
                self.callback[type_] = f

        self.mres = build_mres(terminals)

    def match(self, stream, pos):
        for mre, type_from_index in self.mres:
            m = mre.match(stream, pos)
            if m:
                return m.group(0), type_from_index[m.lastindex]

    def lex(self, stream):
        return _Lex(self).lex(stream, self.newline_types, self.ignore_types)




class ContextualLexer(Lexer):
    def __init__(self, terminals, states, ignore=(), always_accept=(), user_callbacks={}):
        tokens_by_name = {}
        for t in terminals:
            assert t.name not in tokens_by_name, t
            tokens_by_name[t.name] = t

        lexer_by_tokens = {}
        self.lexers = {}
        for state, accepts in states.items():
            key = frozenset(accepts)
            try:
                lexer = lexer_by_tokens[key]
            except KeyError:
                accepts = set(accepts) | set(ignore) | set(always_accept)
                state_tokens = [tokens_by_name[n] for n in accepts if n and n in tokens_by_name]
                lexer = TraditionalLexer(state_tokens, ignore=ignore, user_callbacks=user_callbacks)
                lexer_by_tokens[key] = lexer

            self.lexers[state] = lexer

        self.root_lexer = TraditionalLexer(terminals, ignore=ignore, user_callbacks=user_callbacks)

        self.set_parser_state(None) # Needs to be set on the outside

    def set_parser_state(self, state):
        self.parser_state = state

    def lex(self, stream):
        l = _Lex(self.lexers[self.parser_state], self.parser_state)
        try:
            for x in l.lex(stream, self.root_lexer.newline_types, self.root_lexer.ignore_types):
                yield x
                l.lexer = self.lexers[self.parser_state]
                l.state = self.parser_state
        except UnexpectedCharacters as e:
            # In the contextual lexer, UnexpectedCharacters can mean that the terminal is defined,
            # but not in the current context.
            # This tests the input against the global context, to provide a nicer error.
            root_match = self.root_lexer.match(stream, e.pos_in_stream)
            if not root_match:
                raise

            value, type_ = root_match
            t = Token(type_, value, e.pos_in_stream, e.line, e.column)
            raise UnexpectedToken(t, e.allowed)



class LexerConf(Serialize):
    __serialize_fields__ = 'tokens', 'ignore'
    __serialize_namespace__ = TerminalDef,

    def __init__(self, tokens, ignore=(), postlex=None, callbacks=None):
        self.tokens = tokens
        self.ignore = ignore
        self.postlex = postlex
        self.callbacks = callbacks or {}

    def _deserialize(self):
        self.callbacks = {} # TODO


from functools import partial, wraps
from itertools import repeat, product


class ExpandSingleChild:
    def __init__(self, node_builder):
        self.node_builder = node_builder

    def __call__(self, children):
        if len(children) == 1:
            return children[0]
        else:
            return self.node_builder(children)

class PropagatePositions:
    def __init__(self, node_builder):
        self.node_builder = node_builder

    def __call__(self, children):
        res = self.node_builder(children)

        if isinstance(res, Tree):
            for c in children:
                if isinstance(c, Tree) and c.children and not c.meta.empty:
                    res.meta.line = c.meta.line
                    res.meta.column = c.meta.column
                    res.meta.start_pos = c.meta.start_pos
                    res.meta.empty = False
                    break
                elif isinstance(c, Token):
                    res.meta.line = c.line
                    res.meta.column = c.column
                    res.meta.start_pos = c.pos_in_stream
                    res.meta.empty = False
                    break

            for c in reversed(children):
                if isinstance(c, Tree) and c.children and not c.meta.empty:
                    res.meta.end_line = c.meta.end_line
                    res.meta.end_column = c.meta.end_column
                    res.meta.end_pos = c.meta.end_pos
                    res.meta.empty = False
                    break
                elif isinstance(c, Token):
                    res.meta.end_line = c.end_line
                    res.meta.end_column = c.end_column
                    res.meta.end_pos = c.pos_in_stream + len(c.value)
                    res.meta.empty = False
                    break

        return res


class ChildFilter:
    def __init__(self, to_include, append_none, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include
        self.append_none = append_none

    def __call__(self, children):
        filtered = []

        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                filtered += children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)

class ChildFilterLALR(ChildFilter):
    "Optimized childfilter for LALR (assumes no duplication in parse tree, so it's safe to change it)"

    def __call__(self, children):
        filtered = []
        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   # Optimize for left-recursion
                    filtered = children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)

class ChildFilterLALR_NoPlaceholders(ChildFilter):
    "Optimized childfilter for LALR (assumes no duplication in parse tree, so it's safe to change it)"
    def __init__(self, to_include, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include

    def __call__(self, children):
        filtered = []
        for i, to_expand in self.to_include:
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   # Optimize for left-recursion
                    filtered = children[i].children
            else:
                filtered.append(children[i])
        return self.node_builder(filtered)

def _should_expand(sym):
    return not sym.is_term and sym.name.startswith('_')

def maybe_create_child_filter(expansion, keep_all_tokens, ambiguous, _empty_indices):
    # Prepare empty_indices as: How many Nones to insert at each index?
    if _empty_indices:
        assert _empty_indices.count(False) == len(expansion)
        s = ''.join(str(int(b)) for b in _empty_indices)
        empty_indices = [len(ones) for ones in s.split('0')]
        assert len(empty_indices) == len(expansion)+1, (empty_indices, len(expansion))
    else:
        empty_indices = [0] * (len(expansion)+1)

    to_include = []
    nones_to_add = 0
    for i, sym in enumerate(expansion):
        nones_to_add += empty_indices[i]
        if keep_all_tokens or not (sym.is_term and sym.filter_out):
            to_include.append((i, _should_expand(sym), nones_to_add))
            nones_to_add = 0

    nones_to_add += empty_indices[len(expansion)]

    if _empty_indices or len(to_include) < len(expansion) or any(to_expand for i, to_expand,_ in to_include):
        if _empty_indices or ambiguous:
            return partial(ChildFilter if ambiguous else ChildFilterLALR, to_include, nones_to_add)
        else:
            # LALR without placeholders
            return partial(ChildFilterLALR_NoPlaceholders, [(i, x) for i,x,_ in to_include])

class AmbiguousExpander:
    """Deal with the case where we're expanding children ('_rule') into a parent but the children
       are ambiguous. i.e. (parent->_ambig->_expand_this_rule). In this case, make the parent itself
       ambiguous with as many copies as their are ambiguous children, and then copy the ambiguous children
       into the right parents in the right places, essentially shifting the ambiguiuty up the tree."""
    def __init__(self, to_expand, tree_class, node_builder):
        self.node_builder = node_builder
        self.tree_class = tree_class
        self.to_expand = to_expand

    def __call__(self, children):
        def _is_ambig_tree(child):
            return hasattr(child, 'data') and child.data == '_ambig'

        #### When we're repeatedly expanding ambiguities we can end up with nested ambiguities.
        #    All children of an _ambig node should be a derivation of that ambig node, hence
        #    it is safe to assume that if we see an _ambig node nested within an ambig node
        #    it is safe to simply expand it into the parent _ambig node as an alternative derivation.
        ambiguous = []
        for i, child in enumerate(children):
            if _is_ambig_tree(child):
                if i in self.to_expand:
                    ambiguous.append(i)

                to_expand = [j for j, grandchild in enumerate(child.children) if _is_ambig_tree(grandchild)]
                child.expand_kids_by_index(*to_expand)

        if not ambiguous:
            return self.node_builder(children)

        expand = [ iter(child.children) if i in ambiguous else repeat(child) for i, child in enumerate(children) ]
        return self.tree_class('_ambig', [self.node_builder(list(f[0])) for f in product(zip(*expand))])

def maybe_create_ambiguous_expander(tree_class, expansion, keep_all_tokens):
    to_expand = [i for i, sym in enumerate(expansion)
                 if keep_all_tokens or ((not (sym.is_term and sym.filter_out)) and _should_expand(sym))]
    if to_expand:
        return partial(AmbiguousExpander, to_expand, tree_class)

def ptb_inline_args(func):
    @wraps(func)
    def f(children):
        return func(*children)
    return f

def inplace_transformer(func):
    @wraps(func)
    def f(children):
        # function name in a Transformer is a rule name.
        tree = Tree(func.__name__, children)
        return func(tree)
    return f

class ParseTreeBuilder:
    def __init__(self, rules, tree_class, propagate_positions=False, keep_all_tokens=False, ambiguous=False, maybe_placeholders=False):
        self.tree_class = tree_class
        self.propagate_positions = propagate_positions
        self.always_keep_all_tokens = keep_all_tokens
        self.ambiguous = ambiguous
        self.maybe_placeholders = maybe_placeholders

        self.rule_builders = list(self._init_builders(rules))

    def _init_builders(self, rules):
        for rule in rules:
            options = rule.options
            keep_all_tokens = self.always_keep_all_tokens or (options.keep_all_tokens if options else False)
            expand_single_child = options.expand1 if options else False

            wrapper_chain = list(filter(None, [
                (expand_single_child and not rule.alias) and ExpandSingleChild,
                maybe_create_child_filter(rule.expansion, keep_all_tokens, self.ambiguous, options.empty_indices if self.maybe_placeholders and options else None),
                self.propagate_positions and PropagatePositions,
                self.ambiguous and maybe_create_ambiguous_expander(self.tree_class, rule.expansion, keep_all_tokens),
            ]))

            yield rule, wrapper_chain


    def create_callback(self, transformer=None):
        callbacks = {}

        for rule, wrapper_chain in self.rule_builders:

            user_callback_name = rule.alias or rule.origin.name
            try:
                f = getattr(transformer, user_callback_name)
                assert not getattr(f, 'meta', False), "Meta args not supported for internal transformer"
                # XXX InlineTransformer is deprecated!
                if getattr(f, 'inline', False) or isinstance(transformer, InlineTransformer):
                    f = ptb_inline_args(f)
                elif hasattr(f, 'whole_tree') or isinstance(transformer, Transformer_InPlace):
                    f = inplace_transformer(f)
            except AttributeError:
                f = partial(self.tree_class, user_callback_name)

            for w in wrapper_chain:
                f = w(f)

            if rule in callbacks:
                raise GrammarError("Rule '%s' already exists" % (rule,))

            callbacks[rule] = f

        return callbacks


class LALR_Parser(object):
    def __init__(self, parser_conf, debug=False):
        assert all(r.options is None or r.options.priority is None
                   for r in parser_conf.rules), "LALR doesn't yet support prioritization"
        analysis = LALR_Analyzer(parser_conf, debug=debug)
        analysis.compute_lookahead()
        callbacks = parser_conf.callbacks

        self._parse_table = analysis.parse_table
        self.parser_conf = parser_conf
        self.parser = _Parser(analysis.parse_table, callbacks)

    @classmethod
    def deserialize(cls, data, memo, callbacks):
        inst = cls.__new__(cls)
        inst._parse_table = IntParseTable.deserialize(data, memo)
        inst.parser = _Parser(inst._parse_table, callbacks)
        return inst

    def serialize(self, memo):
        return self._parse_table.serialize(memo)

    def parse(self, *args):
        return self.parser.parse(*args)


class _Parser:
    def __init__(self, parse_table, callbacks):
        self.states = parse_table.states
        self.start_states = parse_table.start_states
        self.end_states = parse_table.end_states
        self.callbacks = callbacks

    def parse(self, seq, start, set_state=None):
        token = None
        stream = iter(seq)
        states = self.states

        start_state = self.start_states[start]
        end_state = self.end_states[start]

        state_stack = [start_state]
        value_stack = []

        if set_state: set_state(start_state)

        def get_action(token):
            state = state_stack[-1]
            try:
                return states[state][token.type]
            except KeyError:
                expected = [s for s in states[state].keys() if s.isupper()]
                raise UnexpectedToken(token, expected, state=state)

        def reduce(rule):
            size = len(rule.expansion)
            if size:
                s = value_stack[-size:]
                del state_stack[-size:]
                del value_stack[-size:]
            else:
                s = []

            value = self.callbacks[rule](s)

            _action, new_state = states[state_stack[-1]][rule.origin.name]
            assert _action is Shift
            state_stack.append(new_state)
            value_stack.append(value)

        # Main LALR-parser loop
        for token in stream:
            while True:
                action, arg = get_action(token)
                assert arg != end_state

                if action is Shift:
                    state_stack.append(arg)
                    value_stack.append(token)
                    if set_state: set_state(arg)
                    break # next token
                else:
                    reduce(arg)

        token = Token.new_borrow_pos('$END', '', token) if token else Token('$END', '', 0, 1, 1)
        while True:
            _action, arg = get_action(token)
            if _action is Shift:
                assert arg == end_state
                val ,= value_stack
                return val
            else:
                reduce(arg)



class Action:
    def __init__(self, name):
        self.name = name
    def __str__(self):
        return self.name
    def __repr__(self):
        return str(self)

Shift = Action('Shift')
Reduce = Action('Reduce')

class ParseTable:
    def __init__(self, states, start_states, end_states):
        self.states = states
        self.start_states = start_states
        self.end_states = end_states

    def serialize(self, memo):
        tokens = Enumerator()
        rules = Enumerator()

        states = {
            state: {tokens.get(token): ((1, arg.serialize(memo)) if action is Reduce else (0, arg))
                    for token, (action, arg) in actions.items()}
            for state, actions in self.states.items()
        }

        return {
            'tokens': tokens.reversed(),
            'states': states,
            'start_states': self.start_states,
            'end_states': self.end_states,
        }

    @classmethod
    def deserialize(cls, data, memo):
        tokens = data['tokens']
        states = {
            state: {tokens[token]: ((Reduce, Rule.deserialize(arg, memo)) if action==1 else (Shift, arg))
                    for token, (action, arg) in actions.items()}
            for state, actions in data['states'].items()
        }
        return cls(states, data['start_states'], data['end_states'])


class IntParseTable(ParseTable):

    @classmethod
    def from_ParseTable(cls, parse_table):
        enum = list(parse_table.states)
        state_to_idx = {s:i for i,s in enumerate(enum)}
        int_states = {}

        for s, la in parse_table.states.items():
            la = {k:(v[0], state_to_idx[v[1]]) if v[0] is Shift else v
                  for k,v in la.items()}
            int_states[ state_to_idx[s] ] = la


        start_states = {start:state_to_idx[s] for start, s in parse_table.start_states.items()}
        end_states = {start:state_to_idx[s] for start, s in parse_table.end_states.items()}
        return cls(int_states, start_states, end_states)



def get_frontend(parser, lexer):
    if parser=='lalr':
        if lexer is None:
            raise ValueError('The LALR parser requires use of a lexer')
        elif lexer == 'standard':
            return LALR_TraditionalLexer
        elif lexer == 'contextual':
            return LALR_ContextualLexer
        elif issubclass(lexer, Lexer):
            return partial(LALR_CustomLexer, lexer)
        else:
            raise ValueError('Unknown lexer: %s' % lexer)
    elif parser=='earley':
        if lexer=='standard':
            return Earley
        elif lexer=='dynamic':
            return XEarley
        elif lexer=='dynamic_complete':
            return XEarley_CompleteLex
        elif lexer=='contextual':
            raise ValueError('The Earley parser does not support the contextual parser')
        else:
            raise ValueError('Unknown lexer: %s' % lexer)
    elif parser == 'cyk':
        if lexer == 'standard':
            return CYK
        else:
            raise ValueError('CYK parser requires using standard parser.')
    else:
        raise ValueError('Unknown parser: %s' % parser)


class _ParserFrontend(Serialize):
    def _parse(self, input, start, *args):
        if start is None:
            start = self.start
            if len(start) > 1:
                raise ValueError("Lark initialized with more than 1 possible start rule. Must specify which start rule to parse", start)
            start ,= start
        return self.parser.parse(input, start, *args)


class WithLexer(_ParserFrontend):
    lexer = None
    parser = None
    lexer_conf = None
    start = None

    __serialize_fields__ = 'parser', 'lexer_conf', 'start'
    __serialize_namespace__ = LexerConf,

    def __init__(self, lexer_conf, parser_conf, options=None):
        self.lexer_conf = lexer_conf
        self.start = parser_conf.start
        self.postlex = lexer_conf.postlex

    @classmethod
    def deserialize(cls, data, memo, callbacks, postlex):
        inst = super(WithLexer, cls).deserialize(data, memo)
        inst.postlex = postlex
        inst.parser = LALR_Parser.deserialize(inst.parser, memo, callbacks)
        inst.init_lexer()
        return inst

    def _serialize(self, data, memo):
        data['parser'] = data['parser'].serialize(memo)

    def lex(self, text):
        stream = self.lexer.lex(text)
        return self.postlex.process(stream) if self.postlex else stream

    def parse(self, text, start=None):
        token_stream = self.lex(text)
        sps = self.lexer.set_parser_state
        return self._parse(token_stream, start, *[sps] if sps is not NotImplemented else [])

    def init_traditional_lexer(self):
        self.lexer = TraditionalLexer(self.lexer_conf.tokens, ignore=self.lexer_conf.ignore, user_callbacks=self.lexer_conf.callbacks)

class LALR_WithLexer(WithLexer):
    def __init__(self, lexer_conf, parser_conf, options=None):
        debug = options.debug if options else False
        self.parser = LALR_Parser(parser_conf, debug=debug)
        WithLexer.__init__(self, lexer_conf, parser_conf, options)

        self.init_lexer()

    def init_lexer(self):
        raise NotImplementedError()

class LALR_TraditionalLexer(LALR_WithLexer):
    def init_lexer(self):
        self.init_traditional_lexer()

class LALR_ContextualLexer(LALR_WithLexer):
    def init_lexer(self):
        states = {idx:list(t.keys()) for idx, t in self.parser._parse_table.states.items()}
        always_accept = self.postlex.always_accept if self.postlex else ()
        self.lexer = ContextualLexer(self.lexer_conf.tokens, states,
                                     ignore=self.lexer_conf.ignore,
                                     always_accept=always_accept,
                                     user_callbacks=self.lexer_conf.callbacks)


class LarkOptions(Serialize):
    """Specifies the options for Lark

    """
    OPTIONS_DOC = """
        parser - Decides which parser engine to use, "earley" or "lalr". (Default: "earley")
                 Note: "lalr" requires a lexer

        lexer - Decides whether or not to use a lexer stage
            "standard": Use a standard lexer
            "contextual": Stronger lexer (only works with parser="lalr")
            "dynamic": Flexible and powerful (only with parser="earley")
            "dynamic_complete": Same as dynamic, but tries *every* variation
                                of tokenizing possible. (only with parser="earley")
            "auto" (default): Choose for me based on grammar and parser

        ambiguity - Decides how to handle ambiguity in the parse. Only relevant if parser="earley"
            "resolve": The parser will automatically choose the simplest derivation
                       (it chooses consistently: greedy for tokens, non-greedy for rules)
            "explicit": The parser will return all derivations wrapped in "_ambig" tree nodes (i.e. a forest).

        transformer - Applies the transformer to every parse tree
        debug - Affects verbosity (default: False)
        keep_all_tokens - Don't automagically remove "punctuation" tokens (default: False)
        cache_grammar - Cache the Lark grammar (Default: False)
        postlex - Lexer post-processing (Default: None) Only works with the standard and contextual lexers.
        start - The start symbol, either a string, or a list of strings for multiple possible starts (Default: "start")
        profile - Measure run-time usage in Lark. Read results from the profiler proprety (Default: False)
        priority - How priorities should be evaluated - auto, none, normal, invert (Default: auto)
        propagate_positions - Propagates [line, column, end_line, end_column] attributes into all tree branches.
        lexer_callbacks - Dictionary of callbacks for the lexer. May alter tokens during lexing. Use with caution.
        maybe_placeholders - Experimental feature. Instead of omitting optional rules (i.e. rule?), replace them with None
    """
    if __doc__:
        __doc__ += OPTIONS_DOC

    _defaults = {
        'debug': False,
        'keep_all_tokens': False,
        'tree_class': None,
        'cache_grammar': False,
        'postlex': None,
        'parser': 'earley',
        'lexer': 'auto',
        'transformer': None,
        'start': 'start',
        'profile': False,
        'priority': 'auto',
        'ambiguity': 'auto',
        'propagate_positions': False,
        'lexer_callbacks': {},
        'maybe_placeholders': False,
        'edit_terminals': None,
    }

    def __init__(self, options_dict):
        o = dict(options_dict)

        options = {}
        for name, default in self._defaults.items():
            if name in o:
                value = o.pop(name)
                if isinstance(default, bool):
                    value = bool(value)
            else:
                value = default

            options[name] = value

        if isinstance(options['start'], str):
            options['start'] = [options['start']]

        self.__dict__['options'] = options

        assert self.parser in ('earley', 'lalr', 'cyk', None)

        if self.parser == 'earley' and self.transformer:
            raise ValueError('Cannot specify an embedded transformer when using the Earley algorithm.'
                             'Please use your transformer on the resulting parse tree, or use a different algorithm (i.e. LALR)')

        if o:
            raise ValueError("Unknown options: %s" % o.keys())

    def __getattr__(self, name):
        return self.options[name]
    def __setattr__(self, name, value):
        assert name in self.options
        self.options[name] = value

    def serialize(self, memo):
        return self.options

    @classmethod
    def deserialize(cls, data, memo):
        return cls(data)


class Profiler:
    def __init__(self):
        self.total_time = defaultdict(float)
        self.cur_section = '__init__'
        self.last_enter_time = time.time()

    def enter_section(self, name):
        cur_time = time.time()
        self.total_time[self.cur_section] += cur_time - self.last_enter_time
        self.last_enter_time = cur_time
        self.cur_section = name

    def make_wrapper(self, name, f):
        def wrapper(*args, **kwargs):
            last_section = self.cur_section
            self.enter_section(name)
            try:
                return f(*args, **kwargs)
            finally:
                self.enter_section(last_section)

        return wrapper


class Lark(Serialize):
    def __init__(self, grammar, **options):
        """
            grammar : a string or file-object containing the grammar spec (using Lark's ebnf syntax)
            options : a dictionary controlling various aspects of Lark.
        """
        self.options = LarkOptions(options)

        # Some, but not all file-like objects have a 'name' attribute
        try:
            self.source = grammar.name
        except AttributeError:
            self.source = '<string>'

        # Drain file-like objects to get their contents
        try:
            read = grammar.read
        except AttributeError:
            pass
        else:
            grammar = read()

        assert isinstance(grammar, STRING_TYPE)

        if self.options.cache_grammar:
            raise NotImplementedError("Not available yet")

        assert not self.options.profile, "Feature temporarily disabled"
        # self.profiler = Profiler() if self.options.profile else None

        if self.options.lexer == 'auto':
            if self.options.parser == 'lalr':
                self.options.lexer = 'contextual'
            elif self.options.parser == 'earley':
                self.options.lexer = 'dynamic'
            elif self.options.parser == 'cyk':
                self.options.lexer = 'standard'
            else:
                assert False, self.options.parser
        lexer = self.options.lexer
        assert lexer in ('standard', 'contextual', 'dynamic', 'dynamic_complete') or issubclass(lexer, Lexer)

        if self.options.ambiguity == 'auto':
            if self.options.parser == 'earley':
                self.options.ambiguity = 'resolve'
        else:
            disambig_parsers = ['earley', 'cyk']
            assert self.options.parser in disambig_parsers, (
                'Only %s supports disambiguation right now') % ', '.join(disambig_parsers)

        if self.options.priority == 'auto':
            if self.options.parser in ('earley', 'cyk', ):
                self.options.priority = 'normal'
            elif self.options.parser in ('lalr', ):
                self.options.priority = None
        elif self.options.priority in ('invert', 'normal'):
            assert self.options.parser in ('earley', 'cyk'), "priorities are not supported for LALR at this time"

        assert self.options.priority in ('auto', None, 'normal', 'invert'), 'invalid priority option specified: {}. options are auto, none, normal, invert.'.format(self.options.priority)
        assert self.options.ambiguity not in ('resolve__antiscore_sum', ), 'resolve__antiscore_sum has been replaced with the option priority="invert"'
        assert self.options.ambiguity in ('resolve', 'explicit', 'auto', )

        # Parse the grammar file and compose the grammars (TODO)
        self.grammar = load_grammar(grammar, self.source)

        # Compile the EBNF grammar into BNF
        self.terminals, self.rules, self.ignore_tokens = self.grammar.compile(self.options.start)

        if self.options.edit_terminals:
            for t in self.terminals:
                self.options.edit_terminals(t)

        self._terminals_dict = {t.name:t for t in self.terminals}

        # If the user asked to invert the priorities, negate them all here.
        # This replaces the old 'resolve__antiscore_sum' option.
        if self.options.priority == 'invert':
            for rule in self.rules:
                if rule.options and rule.options.priority is not None:
                    rule.options.priority = -rule.options.priority
        # Else, if the user asked to disable priorities, strip them from the
        # rules. This allows the Earley parsers to skip an extra forest walk
        # for improved performance, if you don't need them (or didn't specify any).
        elif self.options.priority == None:
            for rule in self.rules:
                if rule.options and rule.options.priority is not None:
                    rule.options.priority = None
        self.lexer_conf = LexerConf(self.terminals, self.ignore_tokens, self.options.postlex, self.options.lexer_callbacks)

        if self.options.parser:
            self.parser = self._build_parser()
        elif lexer:
            self.lexer = self._build_lexer()

    if __init__.__doc__:
        __init__.__doc__ += "\nOPTIONS:" + LarkOptions.OPTIONS_DOC

    __serialize_fields__ = 'parser', 'rules', 'options'

    def _build_lexer(self):
        return TraditionalLexer(self.lexer_conf.tokens, ignore=self.lexer_conf.ignore, user_callbacks=self.lexer_conf.callbacks)

    def _prepare_callbacks(self):
        self.parser_class = get_frontend(self.options.parser, self.options.lexer)
        self._parse_tree_builder = ParseTreeBuilder(self.rules, self.options.tree_class or Tree, self.options.propagate_positions, self.options.keep_all_tokens, self.options.parser!='lalr' and self.options.ambiguity=='explicit', self.options.maybe_placeholders)
        self._callbacks = self._parse_tree_builder.create_callback(self.options.transformer)

    def _build_parser(self):
        self._prepare_callbacks()
        parser_conf = ParserConf(self.rules, self._callbacks, self.options.start)
        return self.parser_class(self.lexer_conf, parser_conf, options=self.options)

    @classmethod
    def deserialize(cls, data, namespace, memo, transformer=None, postlex=None):
        if memo:
            memo = SerializeMemoizer.deserialize(memo, namespace, {})
        inst = cls.__new__(cls)
        options = dict(data['options'])
        options['transformer'] = transformer
        options['postlex'] = postlex
        inst.options = LarkOptions.deserialize(options, memo)
        inst.rules = [Rule.deserialize(r, memo) for r in data['rules']]
        inst.source = '<deserialized>'
        inst._prepare_callbacks()
        inst.parser = inst.parser_class.deserialize(data['parser'], memo, inst._callbacks, inst.options.postlex)
        return inst


    @classmethod
    def open(cls, grammar_filename, rel_to=None, **options):
        """Create an instance of Lark with the grammar given by its filename

        If rel_to is provided, the function will find the grammar filename in relation to it.

        Example:

            >>> Lark.open("grammar_file.lark", rel_to=__file__, parser="lalr")
            Lark(...)

        """
        if rel_to:
            basepath = os.path.dirname(rel_to)
            grammar_filename = os.path.join(basepath, grammar_filename)
        with open(grammar_filename, encoding='utf8') as f:
            return cls(f, **options)

    def __repr__(self):
        return 'Lark(open(%r), parser=%r, lexer=%r, ...)' % (self.source, self.options.parser, self.options.lexer)


    def lex(self, text):
        "Only lex (and postlex) the text, without parsing it. Only relevant when lexer='standard'"
        if not hasattr(self, 'lexer'):
            self.lexer = self._build_lexer()
        stream = self.lexer.lex(text)
        if self.options.postlex:
            return self.options.postlex.process(stream)
        return stream

    def get_terminal(self, name):
        "Get information about a terminal"
        return self._terminals_dict[name]

    def parse(self, text, start=None):
        """Parse the given text, according to the options provided.

        The 'start' parameter is required if Lark was given multiple possible start symbols (using the start option).

        Returns a tree, unless specified otherwise.
        """
        return self.parser.parse(text, start=start)


DATA = (
{'parser': {'parser': {'tokens': {0: '$END', 1: 'HASH', 2: 'var', 3: 'DEFINE', 4: 'pred_definition', 5: '__anon_star_0', 6: 'DISPLAY', 7: 'EXECUTE', 8: 'start', 9: 'def', 10: 'praline', 11: 'RESTRICT', 12: 'VAR', 13: 'FORGET', 14: '__ANON_0', 15: 'IMPORT', 16: '__ANON_1', 17: '__ANON_3', 18: 'TYPE', 19: 'CONTEXT', 20: 'SHUFFLE', 21: 'LOAD', 22: '__ANON_2', 23: '__ANON_4', 24: '_IS', 25: 'LPAR', 26: 'LSQB', 27: 'praline_arith', 28: 'MINUS', 29: 'app', 30: 'praline_atom', 31: 'praline_sub', 32: 'praline_tuple', 33: 'praline_div', 34: 'praline_operator', 35: 'praline_mul', 36: 'FALSE', 37: 'LBRACE', 38: 'TRUE', 39: 'praline_add', 40: 'praline_exponent', 41: 'int', 42: 'praline_list', 43: 'pecan_term', 44: 'string', 45: 'INT', 46: 'praline_compare', 47: 'ESCAPED_STRING', 48: 'RBRACE', 49: 'DO', 50: 'term', 51: 'LET', 52: 'CONJ', 53: 'COLON', 54: '__anon_plus_5', 55: 'IF', 56: 'BACKSLASH', 57: '__ANON_6', 58: 'operator_sym', 59: 'COMP', 60: 'DISJ', 61: 'operator_sym_char', 62: '__ANON_7', 63: 'MATCH', 64: 'restriction', 65: 'varlist', 66: 'RSQB', 67: '_IMPLIES', 68: 'WITH', 69: 'DOT', 70: 'CIRCUMFLEX', 71: 'LESSTHAN', 72: 'CASE', 73: 'ELSE', 74: 'THEN', 75: '_LE', 76: '__ANON_5', 77: 'STAR', 78: 'IN', 79: 'MORETHAN', 80: 'PLUS', 81: 'SEMICOLON', 82: 'EQUAL', 83: '_GE', 84: 'COMMA', 85: '_NE', 86: 'SLASH', 87: '_IFF', 88: 'RPAR', 89: 'BE', 90: 'END', 91: 'arith', 92: 'div_expr', 93: 'add_expr', 94: 'atom', 95: 'expr', 96: 'mul_expr', 97: 'args', 98: 'arg', 99: 'sub_expr', 100: 'call', 101: '__anon_plus_12', 102: '__anon_star_10', 103: '__anon_star_8', 104: '__anon_star_7', 105: 'forall_sym', 106: 'bool', 107: 'pred', 108: 'EXISTS', 109: 'FORALL', 110: 'exists_sym', 111: 'comparison', 112: '__ANON_9', 113: '__ANON_8', 114: '__anon_star_6', 115: '__anon_star_9', 116: '__anon_star_14', 117: 'PROP_VAL', 118: 'prop_val', 119: 'formal', 120: '__anon_star_17', 121: '__anon_star_15', 122: '__anon_star_18', 123: '__anon_star_16', 124: '__anon_star_19', 125: '__anon_star_11', 126: '__anon_star_2', 127: 'match_arm', 128: '__anon_plus_1', 129: 'val_dict', 130: 'match_expr', 131: 'kv_pair', 132: '__anon_plus_4', 133: '__anon_star_13', 134: '__anon_star_3'}, 'states': {0: {0: (1, {'@': 70}), 1: (0, 1), 2: (0, 2), 3: (0, 3), 4: (0, 4), 5: (0, 5), 6: (0, 6), 7: (0, 7), 8: (0, 8), 9: (0, 9), 10: (0, 10), 11: (0, 11), 12: (0, 12)}, 1: {13: (0, 13), 14: (0, 14), 15: (0, 15), 16: (0, 16), 17: (0, 17), 18: (0, 18), 19: (0, 19), 20: (0, 20), 21: (0, 21), 22: (0, 22), 23: (0, 23)}, 2: {24: (0, 24), 25: (0, 25)}, 3: {26: (0, 26), 25: (0, 27), 27: (0, 28), 28: (0, 29), 29: (0, 30), 30: (0, 31), 31: (0, 32), 32: (0, 33), 33: (0, 34), 34: (0, 35), 35: (0, 36), 36: (0, 37), 37: (0, 38), 38: (0, 39), 39: (0, 40), 40: (0, 41), 41: (0, 42), 12: (0, 12), 42: (0, 43), 43: (0, 44), 44: (0, 45), 45: (0, 46), 46: (0, 47), 2: (0, 48), 47: (0, 49)}, 4: {48: (1, {'@': 71}), 3: (1, {'@': 71}), 7: (1, {'@': 71}), 1: (1, {'@': 71}), 0: (1, {'@': 71}), 6: (1, {'@': 71}), 12: (1, {'@': 71}), 11: (1, {'@': 71})}, 5: {0: (1, {'@': 72}), 1: (0, 1), 2: (0, 2), 3: (0, 3), 4: (0, 4), 6: (0, 6), 7: (0, 7), 10: (0, 10), 9: (0, 50), 11: (0, 11), 12: (0, 12)}, 6: {49: (0, 51), 26: (0, 26), 50: (0, 52), 34: (0, 53), 51: (0, 54), 25: (0, 27), 30: (0, 31), 31: (0, 32), 52: (0, 55), 32: (0, 33), 33: (0, 34), 36: (0, 37), 35: (0, 36), 53: (0, 56), 39: (0, 40), 54: (0, 57), 12: (0, 12), 43: (0, 44), 27: (0, 28), 45: (0, 46), 46: (0, 47), 55: (0, 58), 56: (0, 59), 57: (0, 60), 58: (0, 61), 59: (0, 62), 60: (0, 63), 61: (0, 64), 28: (0, 29), 29: (0, 30), 37: (0, 38), 38: (0, 39), 40: (0, 41), 41: (0, 42), 42: (0, 43), 44: (0, 45), 2: (0, 48), 47: (0, 49), 62: (0, 65), 63: (0, 66)}, 7: {49: (0, 51), 26: (0, 26), 34: (0, 53), 51: (0, 54), 25: (0, 27), 30: (0, 31), 31: (0, 32), 52: (0, 55), 32: (0, 33), 33: (0, 34), 36: (0, 37), 35: (0, 36), 53: (0, 56), 39: (0, 40), 54: (0, 57), 12: (0, 12), 43: (0, 44), 27: (0, 28), 45: (0, 46), 46: (0, 47), 55: (0, 58), 56: (0, 59), 57: (0, 60), 58: (0, 61), 59: (0, 62), 50: (0, 67), 60: (0, 63), 61: (0, 64), 28: (0, 29), 29: (0, 30), 37: (0, 38), 38: (0, 39), 40: (0, 41), 41: (0, 42), 42: (0, 43), 44: (0, 45), 2: (0, 48), 47: (0, 49), 62: (0, 65), 63: (0, 66)}, 8: {0: (0, 68)}, 9: {1: (1, {'@': 73}), 3: (1, {'@': 73}), 0: (1, {'@': 73}), 6: (1, {'@': 73}), 12: (1, {'@': 73}), 11: (1, {'@': 73}), 7: (1, {'@': 73})}, 10: {48: (1, {'@': 74}), 3: (1, {'@': 74}), 7: (1, {'@': 74}), 1: (1, {'@': 74}), 0: (1, {'@': 74}), 6: (1, {'@': 74}), 12: (1, {'@': 74}), 11: (1, {'@': 74})}, 11: {2: (0, 69), 64: (0, 70), 65: (0, 71), 12: (0, 12)}, 12: {25: (1, {'@': 75}), 66: (1, {'@': 75}), 3: (1, {'@': 75}), 57: (1, {'@': 75}), 67: (1, {'@': 75}), 11: (1, {'@': 75}), 68: (1, {'@': 75}), 69: (1, {'@': 75}), 38: (1, {'@': 75}), 59: (1, {'@': 75}), 70: (1, {'@': 75}), 71: (1, {'@': 75}), 72: (1, {'@': 75}), 73: (1, {'@': 75}), 74: (1, {'@': 75}), 75: (1, {'@': 75}), 26: (1, {'@': 75}), 76: (1, {'@': 75}), 47: (1, {'@': 75}), 48: (1, {'@': 75}), 45: (1, {'@': 75}), 24: (1, {'@': 75}), 77: (1, {'@': 75}), 36: (1, {'@': 75}), 52: (1, {'@': 75}), 78: (1, {'@': 75}), 79: (1, {'@': 75}), 80: (1, {'@': 75}), 81: (1, {'@': 75}), 12: (1, {'@': 75}), 82: (1, {'@': 75}), 37: (1, {'@': 75}), 83: (1, {'@': 75}), 28: (1, {'@': 75}), 60: (1, {'@': 75}), 84: (1, {'@': 75}), 85: (1, {'@': 75}), 7: (1, {'@': 75}), 86: (1, {'@': 75}), 87: (1, {'@': 75}), 53: (1, {'@': 75}), 62: (1, {'@': 75}), 1: (1, {'@': 75}), 88: (1, {'@': 75}), 0: (1, {'@': 75}), 6: (1, {'@': 75}), 89: (1, {'@': 75}), 90: (1, {'@': 75})}, 13: {25: (0, 72)}, 14: {25: (0, 73)}, 15: {25: (0, 74)}, 16: {25: (0, 75)}, 17: {25: (0, 76)}, 18: {25: (0, 77)}, 19: {25: (0, 78)}, 20: {25: (0, 79)}, 21: {25: (0, 80)}, 22: {25: (0, 81)}, 23: {25: (0, 82)}, 24: {2: (0, 83), 12: (0, 12)}, 25: {88: (1, {'@': 76}), 91: (0, 84), 92: (0, 85), 93: (0, 86), 94: (0, 87), 2: (0, 88), 95: (0, 89), 96: (0, 90), 97: (0, 91), 98: (0, 92), 99: (0, 93), 45: (0, 46), 28: (0, 94), 41: (0, 95), 25: (0, 96), 100: (0, 97), 12: (0, 12)}, 26: {49: (0, 51), 26: (0, 26), 34: (0, 53), 51: (0, 54), 25: (0, 27), 30: (0, 31), 31: (0, 32), 52: (0, 55), 32: (0, 33), 33: (0, 34), 36: (0, 37), 35: (0, 36), 66: (0, 98), 53: (0, 56), 39: (0, 40), 54: (0, 57), 12: (0, 12), 43: (0, 44), 27: (0, 28), 45: (0, 46), 46: (0, 47), 55: (0, 58), 56: (0, 59), 57: (0, 60), 50: (0, 99), 58: (0, 61), 59: (0, 62), 60: (0, 63), 61: (0, 64), 28: (0, 29), 29: (0, 30), 37: (0, 38), 38: (0, 39), 40: (0, 41), 41: (0, 42), 42: (0, 43), 44: (0, 45), 2: (0, 48), 47: (0, 49), 62: (0, 65), 63: (0, 66)}, 27: {49: (0, 51), 26: (0, 26), 34: (0, 53), 51: (0, 54), 25: (0, 27), 30: (0, 31), 31: (0, 32), 52: (0, 55), 32: (0, 33), 33: (0, 34), 36: (0, 37), 35: (0, 36), 50: (0, 100), 53: (0, 56), 39: (0, 40), 54: (0, 57), 12: (0, 12), 101: (0, 101), 43: (0, 44), 27: (0, 28), 45: (0, 46), 46: (0, 47), 55: (0, 58), 56: (0, 59), 57: (0, 60), 58: (0, 61), 59: (0, 62), 60: (0, 63), 61: (0, 64), 28: (0, 29), 29: (0, 30), 37: (0, 38), 38: (0, 39), 40: (0, 41), 41: (0, 42), 42: (0, 43), 44: (0, 45), 2: (0, 48), 47: (0, 49), 62: (0, 65), 63: (0, 66)}, 28: {66: (1, {'@': 77}), 57: (1, {'@': 77}), 52: (1, {'@': 77}), 78: (1, {'@': 77}), 81: (1, {'@': 77}), 68: (1, {'@': 77}), 69: (1, {'@': 77}), 60: (1, {'@': 77}), 59: (1, {'@': 77}), 84: (1, {'@': 77}), 53: (1, {'@': 77}), 62: (1, {'@': 77}), 72: (1, {'@': 77}), 88: (1, {'@': 77}), 73: (1, {'@': 77}), 74: (1, {'@': 77}), 90: (1, {'@': 77}), 75: (0, 102), 83: (0, 103), 79: (0, 104), 85: (0, 105), 71: (0, 106), 82: (0, 107)}, 29: {26: (0, 26), 25: (0, 27), 29: (0, 30), 30: (0, 31), 32: (0, 33), 36: (0, 37), 33: (0, 34), 35: (0, 36), 37: (0, 38), 38: (0, 39), 31: (0, 108), 39: (0, 40), 40: (0, 41), 41: (0, 42), 12: (0, 12), 42: (0, 43), 43: (0, 44), 44: (0, 45), 45: (0, 46), 2: (0, 48), 47: (0, 49)}, 30: {66: (1, {'@': 78}), 57: (1, {'@': 78}), 68: (1, {'@': 78}), 69: (1, {'@': 78}), 59: (1, {'@': 78}), 71: (1, {'@': 78}), 72: (1, {'@': 78}), 73: (1, {'@': 78}), 74: (1, {'@': 78}), 75: (1, {'@': 78}), 77: (1, {'@': 78}), 52: (1, {'@': 78}), 78: (1, {'@': 78}), 79: (1, {'@': 78}), 80: (1, {'@': 78}), 81: (1, {'@': 78}), 82: (1, {'@': 78}), 83: (1, {'@': 78}), 60: (1, {'@': 78}), 84: (1, {'@': 78}), 85: (1, {'@': 78}), 86: (1, {'@': 78}), 53: (1, {'@': 78}), 62: (1, {'@': 78}), 88: (1, {'@': 78}), 90: (1, {'@': 78}), 28: (1, {'@': 78}), 26: (0, 26), 37: (0, 38), 102: (0, 109), 25: (0, 27), 42: (0, 43), 43: (0, 44), 32: (0, 33), 36: (0, 37), 44: (0, 45), 45: (0, 46), 70: (0, 110), 30: (0, 111), 38: (0, 39), 2: (0, 48), 47: (0, 49), 41: (0, 42), 12: (0, 12)}, 31: {25: (1, {'@': 79}), 66: (1, {'@': 79}), 57: (1, {'@': 79}), 68: (1, {'@': 79}), 69: (1, {'@': 79}), 38: (1, {'@': 79}), 59: (1, {'@': 79}), 70: (1, {'@': 79}), 71: (1, {'@': 79}), 72: (1, {'@': 79}), 73: (1, {'@': 79}), 74: (1, {'@': 79}), 75: (1, {'@': 79}), 26: (1, {'@': 79}), 76: (1, {'@': 79}), 47: (1, {'@': 79}), 45: (1, {'@': 79}), 77: (1, {'@': 79}), 36: (1, {'@': 79}), 52: (1, {'@': 79}), 78: (1, {'@': 79}), 79: (1, {'@': 79}), 80: (1, {'@': 79}), 81: (1, {'@': 79}), 12: (1, {'@': 79}), 82: (1, {'@': 79}), 37: (1, {'@': 79}), 83: (1, {'@': 79}), 60: (1, {'@': 79}), 84: (1, {'@': 79}), 85: (1, {'@': 79}), 86: (1, {'@': 79}), 53: (1, {'@': 79}), 62: (1, {'@': 79}), 88: (1, {'@': 79}), 90: (1, {'@': 79}), 28: (1, {'@': 79})}, 32: {66: (1, {'@': 80}), 57: (1, {'@': 80}), 68: (1, {'@': 80}), 69: (1, {'@': 80}), 59: (1, {'@': 80}), 71: (1, {'@': 80}), 72: (1, {'@': 80}), 73: (1, {'@': 80}), 74: (1, {'@': 80}), 75: (1, {'@': 80}), 52: (1, {'@': 80}), 78: (1, {'@': 80}), 79: (1, {'@': 80}), 81: (1, {'@': 80}), 82: (1, {'@': 80}), 83: (1, {'@': 80}), 60: (1, {'@': 80}), 84: (1, {'@': 80}), 85: (1, {'@': 80}), 53: (1, {'@': 80}), 62: (1, {'@': 80}), 88: (1, {'@': 80}), 90: (1, {'@': 80})}, 33: {25: (1, {'@': 81}), 66: (1, {'@': 81}), 57: (1, {'@': 81}), 68: (1, {'@': 81}), 69: (1, {'@': 81}), 38: (1, {'@': 81}), 59: (1, {'@': 81}), 70: (1, {'@': 81}), 71: (1, {'@': 81}), 72: (1, {'@': 81}), 73: (1, {'@': 81}), 74: (1, {'@': 81}), 75: (1, {'@': 81}), 26: (1, {'@': 81}), 76: (1, {'@': 81}), 47: (1, {'@': 81}), 45: (1, {'@': 81}), 77: (1, {'@': 81}), 36: (1, {'@': 81}), 52: (1, {'@': 81}), 78: (1, {'@': 81}), 79: (1, {'@': 81}), 80: (1, {'@': 81}), 81: (1, {'@': 81}), 12: (1, {'@': 81}), 82: (1, {'@': 81}), 37: (1, {'@': 81}), 83: (1, {'@': 81}), 60: (1, {'@': 81}), 84: (1, {'@': 81}), 85: (1, {'@': 81}), 86: (1, {'@': 81}), 53: (1, {'@': 81}), 62: (1, {'@': 81}), 88: (1, {'@': 81}), 90: (1, {'@': 81}), 28: (1, {'@': 81})}, 34: {66: (1, {'@': 82}), 57: (1, {'@': 82}), 68: (1, {'@': 82}), 69: (1, {'@': 82}), 59: (1, {'@': 82}), 71: (1, {'@': 82}), 72: (1, {'@': 82}), 73: (1, {'@': 82}), 74: (1, {'@': 82}), 75: (1, {'@': 82}), 52: (1, {'@': 82}), 78: (1, {'@': 82}), 79: (1, {'@': 82}), 80: (1, {'@': 82}), 81: (1, {'@': 82}), 82: (1, {'@': 82}), 83: (1, {'@': 82}), 60: (1, {'@': 82}), 84: (1, {'@': 82}), 85: (1, {'@': 82}), 53: (1, {'@': 82}), 62: (1, {'@': 82}), 88: (1, {'@': 82}), 90: (1, {'@': 82}), 28: (1, {'@': 82}), 103: (0, 112), 77: (0, 113)}, 35: {59: (0, 62), 60: (0, 63), 58: (0, 114), 52: (0, 55), 53: (0, 115), 61: (0, 64), 54: (0, 57), 62: (0, 65), 57: (0, 60)}, 36: {66: (1, {'@': 83}), 57: (1, {'@': 83}), 68: (1, {'@': 83}), 69: (1, {'@': 83}), 59: (1, {'@': 83}), 71: (1, {'@': 83}), 72: (1, {'@': 83}), 73: (1, {'@': 83}), 74: (1, {'@': 83}), 75: (1, {'@': 83}), 52: (1, {'@': 83}), 78: (1, {'@': 83}), 79: (1, {'@': 83}), 81: (1, {'@': 83}), 82: (1, {'@': 83}), 83: (1, {'@': 83}), 60: (1, {'@': 83}), 84: (1, {'@': 83}), 85: (1, {'@': 83}), 53: (1, {'@': 83}), 62: (1, {'@': 83}), 88: (1, {'@': 83}), 90: (1, {'@': 83}), 28: (1, {'@': 83}), 104: (0, 116), 80: (0, 117)}, 37: {25: (1, {'@': 84}), 66: (1, {'@': 84}), 57: (1, {'@': 84}), 68: (1, {'@': 84}), 69: (1, {'@': 84}), 38: (1, {'@': 84}), 59: (1, {'@': 84}), 70: (1, {'@': 84}), 71: (1, {'@': 84}), 72: (1, {'@': 84}), 73: (1, {'@': 84}), 74: (1, {'@': 84}), 75: (1, {'@': 84}), 26: (1, {'@': 84}), 76: (1, {'@': 84}), 47: (1, {'@': 84}), 45: (1, {'@': 84}), 77: (1, {'@': 84}), 36: (1, {'@': 84}), 52: (1, {'@': 84}), 78: (1, {'@': 84}), 79: (1, {'@': 84}), 80: (1, {'@': 84}), 81: (1, {'@': 84}), 12: (1, {'@': 84}), 82: (1, {'@': 84}), 37: (1, {'@': 84}), 83: (1, {'@': 84}), 60: (1, {'@': 84}), 84: (1, {'@': 84}), 85: (1, {'@': 84}), 86: (1, {'@': 84}), 53: (1, {'@': 84}), 62: (1, {'@': 84}), 88: (1, {'@': 84}), 90: (1, {'@': 84}), 28: (1, {'@': 84})}, 38: {91: (0, 84), 1: (0, 1), 25: (0, 118), 3: (0, 3), 4: (0, 4), 105: (0, 119), 106: (0, 120), 9: (0, 121), 7: (0, 7), 2: (0, 122), 95: (0, 123), 107: (0, 124), 12: (0, 12), 93: (0, 86), 36: (0, 125), 44: (0, 126), 96: (0, 90), 55: (0, 127), 45: (0, 46), 41: (0, 95), 94: (0, 87), 10: (0, 10), 38: (0, 128), 108: (0, 129), 109: (0, 130), 6: (0, 6), 110: (0, 131), 59: (0, 132), 11: (0, 11), 111: (0, 133), 92: (0, 85), 112: (0, 134), 99: (0, 93), 28: (0, 94), 113: (0, 135), 100: (0, 97), 47: (0, 49)}, 39: {25: (1, {'@': 85}), 66: (1, {'@': 85}), 57: (1, {'@': 85}), 68: (1, {'@': 85}), 69: (1, {'@': 85}), 38: (1, {'@': 85}), 59: (1, {'@': 85}), 70: (1, {'@': 85}), 71: (1, {'@': 85}), 72: (1, {'@': 85}), 73: (1, {'@': 85}), 74: (1, {'@': 85}), 75: (1, {'@': 85}), 26: (1, {'@': 85}), 76: (1, {'@': 85}), 47: (1, {'@': 85}), 45: (1, {'@': 85}), 77: (1, {'@': 85}), 36: (1, {'@': 85}), 52: (1, {'@': 85}), 78: (1, {'@': 85}), 79: (1, {'@': 85}), 80: (1, {'@': 85}), 81: (1, {'@': 85}), 12: (1, {'@': 85}), 82: (1, {'@': 85}), 37: (1, {'@': 85}), 83: (1, {'@': 85}), 60: (1, {'@': 85}), 84: (1, {'@': 85}), 85: (1, {'@': 85}), 86: (1, {'@': 85}), 53: (1, {'@': 85}), 62: (1, {'@': 85}), 88: (1, {'@': 85}), 90: (1, {'@': 85}), 28: (1, {'@': 85})}, 40: {66: (1, {'@': 86}), 57: (1, {'@': 86}), 68: (1, {'@': 86}), 69: (1, {'@': 86}), 59: (1, {'@': 86}), 71: (1, {'@': 86}), 72: (1, {'@': 86}), 73: (1, {'@': 86}), 74: (1, {'@': 86}), 75: (1, {'@': 86}), 52: (1, {'@': 86}), 78: (1, {'@': 86}), 79: (1, {'@': 86}), 81: (1, {'@': 86}), 82: (1, {'@': 86}), 83: (1, {'@': 86}), 60: (1, {'@': 86}), 84: (1, {'@': 86}), 85: (1, {'@': 86}), 53: (1, {'@': 86}), 62: (1, {'@': 86}), 88: (1, {'@': 86}), 90: (1, {'@': 86}), 114: (0, 136), 28: (0, 137)}, 41: {66: (1, {'@': 87}), 57: (1, {'@': 87}), 68: (1, {'@': 87}), 69: (1, {'@': 87}), 59: (1, {'@': 87}), 71: (1, {'@': 87}), 72: (1, {'@': 87}), 73: (1, {'@': 87}), 74: (1, {'@': 87}), 75: (1, {'@': 87}), 77: (1, {'@': 87}), 52: (1, {'@': 87}), 78: (1, {'@': 87}), 79: (1, {'@': 87}), 80: (1, {'@': 87}), 81: (1, {'@': 87}), 82: (1, {'@': 87}), 83: (1, {'@': 87}), 60: (1, {'@': 87}), 84: (1, {'@': 87}), 85: (1, {'@': 87}), 53: (1, {'@': 87}), 62: (1, {'@': 87}), 88: (1, {'@': 87}), 90: (1, {'@': 87}), 28: (1, {'@': 87}), 115: (0, 138), 86: (0, 139)}, 42: {25: (1, {'@': 88}), 66: (1, {'@': 88}), 57: (1, {'@': 88}), 68: (1, {'@': 88}), 69: (1, {'@': 88}), 38: (1, {'@': 88}), 59: (1, {'@': 88}), 70: (1, {'@': 88}), 71: (1, {'@': 88}), 72: (1, {'@': 88}), 73: (1, {'@': 88}), 74: (1, {'@': 88}), 75: (1, {'@': 88}), 26: (1, {'@': 88}), 76: (1, {'@': 88}), 47: (1, {'@': 88}), 45: (1, {'@': 88}), 77: (1, {'@': 88}), 36: (1, {'@': 88}), 52: (1, {'@': 88}), 78: (1, {'@': 88}), 79: (1, {'@': 88}), 80: (1, {'@': 88}), 81: (1, {'@': 88}), 12: (1, {'@': 88}), 82: (1, {'@': 88}), 37: (1, {'@': 88}), 83: (1, {'@': 88}), 60: (1, {'@': 88}), 84: (1, {'@': 88}), 85: (1, {'@': 88}), 86: (1, {'@': 88}), 53: (1, {'@': 88}), 62: (1, {'@': 88}), 88: (1, {'@': 88}), 90: (1, {'@': 88}), 28: (1, {'@': 88})}, 43: {25: (1, {'@': 89}), 66: (1, {'@': 89}), 57: (1, {'@': 89}), 68: (1, {'@': 89}), 69: (1, {'@': 89}), 38: (1, {'@': 89}), 59: (1, {'@': 89}), 70: (1, {'@': 89}), 71: (1, {'@': 89}), 72: (1, {'@': 89}), 73: (1, {'@': 89}), 74: (1, {'@': 89}), 75: (1, {'@': 89}), 26: (1, {'@': 89}), 76: (1, {'@': 89}), 47: (1, {'@': 89}), 45: (1, {'@': 89}), 77: (1, {'@': 89}), 36: (1, {'@': 89}), 52: (1, {'@': 89}), 78: (1, {'@': 89}), 79: (1, {'@': 89}), 80: (1, {'@': 89}), 81: (1, {'@': 89}), 12: (1, {'@': 89}), 82: (1, {'@': 89}), 37: (1, {'@': 89}), 83: (1, {'@': 89}), 60: (1, {'@': 89}), 84: (1, {'@': 89}), 85: (1, {'@': 89}), 86: (1, {'@': 89}), 53: (1, {'@': 89}), 62: (1, {'@': 89}), 88: (1, {'@': 89}), 90: (1, {'@': 89}), 28: (1, {'@': 89})}, 44: {25: (1, {'@': 90}), 66: (1, {'@': 90}), 57: (1, {'@': 90}), 68: (1, {'@': 90}), 69: (1, {'@': 90}), 38: (1, {'@': 90}), 59: (1, {'@': 90}), 70: (1, {'@': 90}), 71: (1, {'@': 90}), 72: (1, {'@': 90}), 73: (1, {'@': 90}), 74: (1, {'@': 90}), 75: (1, {'@': 90}), 26: (1, {'@': 90}), 76: (1, {'@': 90}), 47: (1, {'@': 90}), 45: (1, {'@': 90}), 77: (1, {'@': 90}), 36: (1, {'@': 90}), 52: (1, {'@': 90}), 78: (1, {'@': 90}), 79: (1, {'@': 90}), 80: (1, {'@': 90}), 81: (1, {'@': 90}), 12: (1, {'@': 90}), 82: (1, {'@': 90}), 37: (1, {'@': 90}), 83: (1, {'@': 90}), 60: (1, {'@': 90}), 84: (1, {'@': 90}), 85: (1, {'@': 90}), 86: (1, {'@': 90}), 53: (1, {'@': 90}), 62: (1, {'@': 90}), 88: (1, {'@': 90}), 90: (1, {'@': 90}), 28: (1, {'@': 90})}, 45: {25: (1, {'@': 91}), 66: (1, {'@': 91}), 57: (1, {'@': 91}), 68: (1, {'@': 91}), 69: (1, {'@': 91}), 38: (1, {'@': 91}), 59: (1, {'@': 91}), 70: (1, {'@': 91}), 71: (1, {'@': 91}), 72: (1, {'@': 91}), 73: (1, {'@': 91}), 74: (1, {'@': 91}), 75: (1, {'@': 91}), 26: (1, {'@': 91}), 76: (1, {'@': 91}), 47: (1, {'@': 91}), 45: (1, {'@': 91}), 77: (1, {'@': 91}), 36: (1, {'@': 91}), 52: (1, {'@': 91}), 78: (1, {'@': 91}), 79: (1, {'@': 91}), 80: (1, {'@': 91}), 81: (1, {'@': 91}), 12: (1, {'@': 91}), 82: (1, {'@': 91}), 37: (1, {'@': 91}), 83: (1, {'@': 91}), 60: (1, {'@': 91}), 84: (1, {'@': 91}), 85: (1, {'@': 91}), 86: (1, {'@': 91}), 53: (1, {'@': 91}), 62: (1, {'@': 91}), 88: (1, {'@': 91}), 90: (1, {'@': 91}), 28: (1, {'@': 91})}, 46: {25: (1, {'@': 92}), 66: (1, {'@': 92}), 3: (1, {'@': 92}), 57: (1, {'@': 92}), 67: (1, {'@': 92}), 11: (1, {'@': 92}), 68: (1, {'@': 92}), 69: (1, {'@': 92}), 38: (1, {'@': 92}), 59: (1, {'@': 92}), 70: (1, {'@': 92}), 71: (1, {'@': 92}), 72: (1, {'@': 92}), 73: (1, {'@': 92}), 74: (1, {'@': 92}), 75: (1, {'@': 92}), 26: (1, {'@': 92}), 76: (1, {'@': 92}), 47: (1, {'@': 92}), 48: (1, {'@': 92}), 45: (1, {'@': 92}), 24: (1, {'@': 92}), 77: (1, {'@': 92}), 36: (1, {'@': 92}), 52: (1, {'@': 92}), 78: (1, {'@': 92}), 79: (1, {'@': 92}), 80: (1, {'@': 92}), 81: (1, {'@': 92}), 12: (1, {'@': 92}), 82: (1, {'@': 92}), 37: (1, {'@': 92}), 83: (1, {'@': 92}), 60: (1, {'@': 92}), 84: (1, {'@': 92}), 85: (1, {'@': 92}), 7: (1, {'@': 92}), 86: (1, {'@': 92}), 87: (1, {'@': 92}), 53: (1, {'@': 92}), 62: (1, {'@': 92}), 1: (1, {'@': 92}), 88: (1, {'@': 92}), 0: (1, {'@': 92}), 6: (1, {'@': 92}), 28: (1, {'@': 92}), 90: (1, {'@': 92})}, 47: {66: (1, {'@': 93}), 57: (1, {'@': 93}), 52: (1, {'@': 93}), 78: (1, {'@': 93}), 81: (1, {'@': 93}), 68: (1, {'@': 93}), 69: (1, {'@': 93}), 60: (1, {'@': 93}), 59: (1, {'@': 93}), 84: (1, {'@': 93}), 53: (1, {'@': 93}), 62: (1, {'@': 93}), 72: (1, {'@': 93}), 88: (1, {'@': 93}), 73: (1, {'@': 93}), 74: (1, {'@': 93}), 90: (1, {'@': 93})}, 48: {25: (1, {'@': 94}), 66: (1, {'@': 94}), 57: (1, {'@': 94}), 68: (1, {'@': 94}), 69: (1, {'@': 94}), 38: (1, {'@': 94}), 59: (1, {'@': 94}), 70: (1, {'@': 94}), 71: (1, {'@': 94}), 72: (1, {'@': 94}), 73: (1, {'@': 94}), 74: (1, {'@': 94}), 75: (1, {'@': 94}), 26: (1, {'@': 94}), 76: (1, {'@': 94}), 47: (1, {'@': 94}), 45: (1, {'@': 94}), 77: (1, {'@': 94}), 36: (1, {'@': 94}), 52: (1, {'@': 94}), 78: (1, {'@': 94}), 79: (1, {'@': 94}), 80: (1, {'@': 94}), 81: (1, {'@': 94}), 12: (1, {'@': 94}), 82: (1, {'@': 94}), 37: (1, {'@': 94}), 83: (1, {'@': 94}), 60: (1, {'@': 94}), 84: (1, {'@': 94}), 85: (1, {'@': 94}), 86: (1, {'@': 94}), 53: (1, {'@': 94}), 62: (1, {'@': 94}), 88: (1, {'@': 94}), 90: (1, {'@': 94}), 28: (1, {'@': 94})}, 49: {25: (1, {'@': 95}), 66: (1, {'@': 95}), 3: (1, {'@': 95}), 57: (1, {'@': 95}), 67: (1, {'@': 95}), 11: (1, {'@': 95}), 68: (1, {'@': 95}), 69: (1, {'@': 95}), 38: (1, {'@': 95}), 59: (1, {'@': 95}), 70: (1, {'@': 95}), 71: (1, {'@': 95}), 72: (1, {'@': 95}), 73: (1, {'@': 95}), 74: (1, {'@': 95}), 75: (1, {'@': 95}), 26: (1, {'@': 95}), 76: (1, {'@': 95}), 47: (1, {'@': 95}), 48: (1, {'@': 95}), 45: (1, {'@': 95}), 77: (1, {'@': 95}), 36: (1, {'@': 95}), 52: (1, {'@': 95}), 78: (1, {'@': 95}), 79: (1, {'@': 95}), 80: (1, {'@': 95}), 81: (1, {'@': 95}), 12: (1, {'@': 95}), 82: (1, {'@': 95}), 37: (1, {'@': 95}), 83: (1, {'@': 95}), 60: (1, {'@': 95}), 84: (1, {'@': 95}), 85: (1, {'@': 95}), 7: (1, {'@': 95}), 86: (1, {'@': 95}), 87: (1, {'@': 95}), 53: (1, {'@': 95}), 62: (1, {'@': 95}), 1: (1, {'@': 95}), 88: (1, {'@': 95}), 0: (1, {'@': 95}), 6: (1, {'@': 95}), 28: (1, {'@': 95}), 90: (1, {'@': 95})}, 50: {1: (1, {'@': 96}), 3: (1, {'@': 96}), 0: (1, {'@': 96}), 6: (1, {'@': 96}), 12: (1, {'@': 96}), 11: (1, {'@': 96}), 7: (1, {'@': 96})}, 51: {49: (0, 51), 26: (0, 26), 34: (0, 53), 50: (0, 140), 51: (0, 54), 25: (0, 27), 30: (0, 31), 31: (0, 32), 52: (0, 55), 32: (0, 33), 33: (0, 34), 36: (0, 37), 35: (0, 36), 53: (0, 56), 39: (0, 40), 54: (0, 57), 12: (0, 12), 43: (0, 44), 27: (0, 28), 45: (0, 46), 46: (0, 47), 55: (0, 58), 56: (0, 59), 57: (0, 60), 58: (0, 61), 59: (0, 62), 60: (0, 63), 61: (0, 64), 28: (0, 29), 29: (0, 30), 37: (0, 38), 38: (0, 39), 40: (0, 41), 41: (0, 42), 42: (0, 43), 44: (0, 45), 2: (0, 48), 47: (0, 49), 62: (0, 65), 63: (0, 66)}, 52: {69: (0, 141)}, 53: {66: (1, {'@': 97}), 78: (1, {'@': 97}), 81: (1, {'@': 97}), 68: (1, {'@': 97}), 69: (1, {'@': 97}), 84: (1, {'@': 97}), 72: (1, {'@': 97}), 88: (1, {'@': 97}), 73: (1, {'@': 97}), 74: (1, {'@': 97}), 90: (1, {'@': 97}), 58: (0, 142), 59: (0, 62), 60: (0, 63), 62: (0, 65), 53: (0, 56), 61: (0, 64), 54: (0, 57), 52: (0, 55), 57: (0, 60)}, 54: {2: (0, 143), 12: (0, 12)}, 55: {25: (1, {'@': 98}), 66: (1, {'@': 98}), 57: (1, {'@': 98}), 68: (1, {'@': 98}), 69: (1, {'@': 98}), 38: (1, {'@': 98}), 59: (1, {'@': 98}), 72: (1, {'@': 98}), 73: (1, {'@': 98}), 74: (1, {'@': 98}), 26: (1, {'@': 98}), 47: (1, {'@': 98}), 45: (1, {'@': 98}), 36: (1, {'@': 98}), 52: (1, {'@': 98}), 78: (1, {'@': 98}), 81: (1, {'@': 98}), 12: (1, {'@': 98}), 37: (1, {'@': 98}), 60: (1, {'@': 98}), 84: (1, {'@': 98}), 53: (1, {'@': 98}), 62: (1, {'@': 98}), 88: (1, {'@': 98}), 90: (1, {'@': 98}), 28: (1, {'@': 98})}, 56: {25: (1, {'@': 99}), 66: (1, {'@': 99}), 57: (1, {'@': 99}), 68: (1, {'@': 99}), 69: (1, {'@': 99}), 38: (1, {'@': 99}), 59: (1, {'@': 99}), 72: (1, {'@': 99}), 73: (1, {'@': 99}), 74: (1, {'@': 99}), 26: (1, {'@': 99}), 47: (1, {'@': 99}), 45: (1, {'@': 99}), 36: (1, {'@': 99}), 52: (1, {'@': 99}), 78: (1, {'@': 99}), 81: (1, {'@': 99}), 12: (1, {'@': 99}), 37: (1, {'@': 99}), 60: (1, {'@': 99}), 84: (1, {'@': 99}), 53: (1, {'@': 99}), 62: (1, {'@': 99}), 88: (1, {'@': 99}), 90: (1, {'@': 99}), 28: (1, {'@': 99})}, 57: {25: (1, {'@': 100}), 45: (1, {'@': 100}), 66: (1, {'@': 100}), 36: (1, {'@': 100}), 78: (1, {'@': 100}), 81: (1, {'@': 100}), 12: (1, {'@': 100}), 68: (1, {'@': 100}), 37: (1, {'@': 100}), 69: (1, {'@': 100}), 38: (1, {'@': 100}), 84: (1, {'@': 100}), 72: (1, {'@': 100}), 88: (1, {'@': 100}), 73: (1, {'@': 100}), 74: (1, {'@': 100}), 26: (1, {'@': 100}), 90: (1, {'@': 100}), 28: (1, {'@': 100}), 47: (1, {'@': 100}), 57: (0, 60), 59: (0, 62), 60: (0, 63), 62: (0, 65), 53: (0, 56), 52: (0, 55), 61: (0, 144)}, 58: {49: (0, 51), 26: (0, 26), 34: (0, 53), 51: (0, 54), 25: (0, 27), 30: (0, 31), 31: (0, 32), 52: (0, 55), 32: (0, 33), 33: (0, 34), 36: (0, 37), 35: (0, 36), 53: (0, 56), 39: (0, 40), 54: (0, 57), 12: (0, 12), 43: (0, 44), 27: (0, 28), 45: (0, 46), 46: (0, 47), 55: (0, 58), 56: (0, 59), 57: (0, 60), 58: (0, 61), 59: (0, 62), 60: (0, 63), 61: (0, 64), 28: (0, 29), 29: (0, 30), 37: (0, 38), 38: (0, 39), 40: (0, 41), 41: (0, 42), 50: (0, 145), 42: (0, 43), 44: (0, 45), 2: (0, 48), 47: (0, 49), 62: (0, 65), 63: (0, 66)}, 59: {26: (0, 26), 37: (0, 38), 25: (0, 27), 29: (0, 146), 42: (0, 43), 30: (0, 31), 43: (0, 44), 32: (0, 33), 36: (0, 37), 44: (0, 45), 45: (0, 46), 38: (0, 39), 2: (0, 48), 47: (0, 49), 41: (0, 42), 12: (0, 12)}, 60: {25: (1, {'@': 101}), 66: (1, {'@': 101}), 57: (1, {'@': 101}), 68: (1, {'@': 101}), 69: (1, {'@': 101}), 38: (1, {'@': 101}), 59: (1, {'@': 101}), 72: (1, {'@': 101}), 73: (1, {'@': 101}), 74: (1, {'@': 101}), 26: (1, {'@': 101}), 47: (1, {'@': 101}), 45: (1, {'@': 101}), 36: (1, {'@': 101}), 52: (1, {'@': 101}), 78: (1, {'@': 101}), 81: (1, {'@': 101}), 12: (1, {'@': 101}), 37: (1, {'@': 101}), 60: (1, {'@': 101}), 84: (1, {'@': 101}), 53: (1, {'@': 101}), 62: (1, {'@': 101}), 88: (1, {'@': 101}), 90: (1, {'@': 101}), 28: (1, {'@': 101})}, 61: {26: (0, 26), 25: (0, 27), 27: (0, 28), 28: (0, 29), 29: (0, 30), 30: (0, 31), 31: (0, 32), 32: (0, 33), 33: (0, 34), 35: (0, 36), 36: (0, 37), 37: (0, 38), 34: (0, 147), 38: (0, 39), 39: (0, 40), 40: (0, 41), 41: (0, 42), 12: (0, 12), 42: (0, 43), 43: (0, 44), 44: (0, 45), 45: (0, 46), 46: (0, 47), 2: (0, 48), 47: (0, 49)}, 62: {25: (1, {'@': 102}), 66: (1, {'@': 102}), 57: (1, {'@': 102}), 68: (1, {'@': 102}), 69: (1, {'@': 102}), 38: (1, {'@': 102}), 59: (1, {'@': 102}), 72: (1, {'@': 102}), 73: (1, {'@': 102}), 74: (1, {'@': 102}), 26: (1, {'@': 102}), 47: (1, {'@': 102}), 45: (1, {'@': 102}), 36: (1, {'@': 102}), 52: (1, {'@': 102}), 78: (1, {'@': 102}), 81: (1, {'@': 102}), 12: (1, {'@': 102}), 37: (1, {'@': 102}), 60: (1, {'@': 102}), 84: (1, {'@': 102}), 53: (1, {'@': 102}), 62: (1, {'@': 102}), 88: (1, {'@': 102}), 90: (1, {'@': 102}), 28: (1, {'@': 102})}, 63: {25: (1, {'@': 103}), 66: (1, {'@': 103}), 57: (1, {'@': 103}), 68: (1, {'@': 103}), 69: (1, {'@': 103}), 38: (1, {'@': 103}), 59: (1, {'@': 103}), 72: (1, {'@': 103}), 73: (1, {'@': 103}), 74: (1, {'@': 103}), 26: (1, {'@': 103}), 47: (1, {'@': 103}), 45: (1, {'@': 103}), 36: (1, {'@': 103}), 52: (1, {'@': 103}), 78: (1, {'@': 103}), 81: (1, {'@': 103}), 12: (1, {'@': 103}), 37: (1, {'@': 103}), 60: (1, {'@': 103}), 84: (1, {'@': 103}), 53: (1, {'@': 103}), 62: (1, {'@': 103}), 88: (1, {'@': 103}), 90: (1, {'@': 103}), 28: (1, {'@': 103})}, 64: {25: (1, {'@': 104}), 66: (1, {'@': 104}), 57: (1, {'@': 104}), 68: (1, {'@': 104}), 69: (1, {'@': 104}), 38: (1, {'@': 104}), 59: (1, {'@': 104}), 72: (1, {'@': 104}), 73: (1, {'@': 104}), 74: (1, {'@': 104}), 26: (1, {'@': 104}), 47: (1, {'@': 104}), 45: (1, {'@': 104}), 36: (1, {'@': 104}), 52: (1, {'@': 104}), 78: (1, {'@': 104}), 81: (1, {'@': 104}), 12: (1, {'@': 104}), 37: (1, {'@': 104}), 60: (1, {'@': 104}), 84: (1, {'@': 104}), 53: (1, {'@': 104}), 62: (1, {'@': 104}), 88: (1, {'@': 104}), 90: (1, {'@': 104}), 28: (1, {'@': 104})}, 65: {25: (1, {'@': 105}), 66: (1, {'@': 105}), 57: (1, {'@': 105}), 68: (1, {'@': 105}), 69: (1, {'@': 105}), 38: (1, {'@': 105}), 59: (1, {'@': 105}), 72: (1, {'@': 105}), 73: (1, {'@': 105}), 74: (1, {'@': 105}), 26: (1, {'@': 105}), 47: (1, {'@': 105}), 45: (1, {'@': 105}), 36: (1, {'@': 105}), 52: (1, {'@': 105}), 78: (1, {'@': 105}), 81: (1, {'@': 105}), 12: (1, {'@': 105}), 37: (1, {'@': 105}), 60: (1, {'@': 105}), 84: (1, {'@': 105}), 53: (1, {'@': 105}), 62: (1, {'@': 105}), 88: (1, {'@': 105}), 90: (1, {'@': 105}), 28: (1, {'@': 105})}, 66: {49: (0, 51), 26: (0, 26), 34: (0, 53), 51: (0, 54), 25: (0, 27), 30: (0, 31), 31: (0, 32), 52: (0, 55), 32: (0, 33), 33: (0, 34), 36: (0, 37), 35: (0, 36), 53: (0, 56), 39: (0, 40), 54: (0, 57), 12: (0, 12), 43: (0, 44), 50: (0, 148), 27: (0, 28), 45: (0, 46), 46: (0, 47), 55: (0, 58), 56: (0, 59), 57: (0, 60), 58: (0, 61), 59: (0, 62), 60: (0, 63), 61: (0, 64), 28: (0, 29), 29: (0, 30), 37: (0, 38), 38: (0, 39), 40: (0, 41), 41: (0, 42), 42: (0, 43), 44: (0, 45), 2: (0, 48), 47: (0, 49), 62: (0, 65), 63: (0, 66)}, 67: {69: (0, 149)}, 68: {}, 69: {88: (1, {'@': 106}), 24: (1, {'@': 106}), 84: (0, 150), 116: (0, 151)}, 70: {69: (0, 152)}, 71: {24: (0, 153)}, 72: {2: (0, 154), 12: (0, 12)}, 73: {47: (0, 49), 44: (0, 155)}, 74: {44: (0, 156), 47: (0, 49)}, 75: {47: (0, 49), 44: (0, 157)}, 76: {117: (0, 158), 118: (0, 159)}, 77: {2: (0, 160), 119: (0, 161), 12: (0, 12)}, 78: {44: (0, 162), 47: (0, 49)}, 79: {119: (0, 163), 2: (0, 160), 12: (0, 12)}, 80: {47: (0, 49), 44: (0, 164)}, 81: {47: (0, 49), 44: (0, 165)}, 82: {119: (0, 166), 2: (0, 160), 12: (0, 12)}, 83: {25: (0, 167), 53: (0, 168)}, 84: {48: (1, {'@': 107}), 3: (1, {'@': 107}), 52: (1, {'@': 107}), 67: (1, {'@': 107}), 79: (1, {'@': 107}), 11: (1, {'@': 107}), 82: (1, {'@': 107}), 12: (1, {'@': 107}), 83: (1, {'@': 107}), 60: (1, {'@': 107}), 84: (1, {'@': 107}), 85: (1, {'@': 107}), 71: (1, {'@': 107}), 7: (1, {'@': 107}), 87: (1, {'@': 107}), 1: (1, {'@': 107}), 88: (1, {'@': 107}), 73: (1, {'@': 107}), 75: (1, {'@': 107}), 74: (1, {'@': 107}), 6: (1, {'@': 107}), 0: (1, {'@': 107})}, 85: {66: (1, {'@': 108}), 3: (1, {'@': 108}), 67: (1, {'@': 108}), 11: (1, {'@': 108}), 69: (1, {'@': 108}), 71: (1, {'@': 108}), 73: (1, {'@': 108}), 75: (1, {'@': 108}), 74: (1, {'@': 108}), 48: (1, {'@': 108}), 52: (1, {'@': 108}), 79: (1, {'@': 108}), 80: (1, {'@': 108}), 12: (1, {'@': 108}), 82: (1, {'@': 108}), 83: (1, {'@': 108}), 60: (1, {'@': 108}), 84: (1, {'@': 108}), 85: (1, {'@': 108}), 7: (1, {'@': 108}), 87: (1, {'@': 108}), 1: (1, {'@': 108}), 88: (1, {'@': 108}), 0: (1, {'@': 108}), 6: (1, {'@': 108}), 28: (1, {'@': 108}), 120: (0, 169), 77: (0, 170)}, 86: {66: (1, {'@': 109}), 3: (1, {'@': 109}), 67: (1, {'@': 109}), 11: (1, {'@': 109}), 69: (1, {'@': 109}), 71: (1, {'@': 109}), 73: (1, {'@': 109}), 75: (1, {'@': 109}), 74: (1, {'@': 109}), 48: (1, {'@': 109}), 52: (1, {'@': 109}), 79: (1, {'@': 109}), 12: (1, {'@': 109}), 82: (1, {'@': 109}), 83: (1, {'@': 109}), 60: (1, {'@': 109}), 84: (1, {'@': 109}), 85: (1, {'@': 109}), 7: (1, {'@': 109}), 87: (1, {'@': 109}), 1: (1, {'@': 109}), 88: (1, {'@': 109}), 0: (1, {'@': 109}), 6: (1, {'@': 109}), 121: (0, 171), 28: (0, 172)}, 87: {66: (1, {'@': 110}), 3: (1, {'@': 110}), 67: (1, {'@': 110}), 11: (1, {'@': 110}), 69: (1, {'@': 110}), 71: (1, {'@': 110}), 73: (1, {'@': 110}), 75: (1, {'@': 110}), 74: (1, {'@': 110}), 48: (1, {'@': 110}), 77: (1, {'@': 110}), 52: (1, {'@': 110}), 79: (1, {'@': 110}), 80: (1, {'@': 110}), 12: (1, {'@': 110}), 82: (1, {'@': 110}), 83: (1, {'@': 110}), 60: (1, {'@': 110}), 84: (1, {'@': 110}), 85: (1, {'@': 110}), 7: (1, {'@': 110}), 87: (1, {'@': 110}), 1: (1, {'@': 110}), 88: (1, {'@': 110}), 0: (1, {'@': 110}), 6: (1, {'@': 110}), 28: (1, {'@': 110}), 122: (0, 173), 24: (0, 174), 86: (0, 175)}, 88: {66: (1, {'@': 111}), 3: (1, {'@': 111}), 67: (1, {'@': 111}), 11: (1, {'@': 111}), 69: (1, {'@': 111}), 71: (1, {'@': 111}), 73: (1, {'@': 111}), 75: (1, {'@': 111}), 74: (1, {'@': 111}), 48: (1, {'@': 111}), 24: (1, {'@': 111}), 77: (1, {'@': 111}), 52: (1, {'@': 111}), 79: (1, {'@': 111}), 80: (1, {'@': 111}), 12: (1, {'@': 111}), 82: (1, {'@': 111}), 83: (1, {'@': 111}), 60: (1, {'@': 111}), 84: (1, {'@': 111}), 85: (1, {'@': 111}), 7: (1, {'@': 111}), 86: (1, {'@': 111}), 87: (1, {'@': 111}), 1: (1, {'@': 111}), 88: (1, {'@': 111}), 0: (1, {'@': 111}), 6: (1, {'@': 111}), 28: (1, {'@': 111}), 26: (0, 176), 25: (0, 177)}, 89: {88: (1, {'@': 112}), 84: (1, {'@': 112})}, 90: {66: (1, {'@': 113}), 3: (1, {'@': 113}), 67: (1, {'@': 113}), 11: (1, {'@': 113}), 69: (1, {'@': 113}), 71: (1, {'@': 113}), 73: (1, {'@': 113}), 75: (1, {'@': 113}), 74: (1, {'@': 113}), 48: (1, {'@': 113}), 52: (1, {'@': 113}), 79: (1, {'@': 113}), 12: (1, {'@': 113}), 82: (1, {'@': 113}), 83: (1, {'@': 113}), 60: (1, {'@': 113}), 84: (1, {'@': 113}), 85: (1, {'@': 113}), 7: (1, {'@': 113}), 87: (1, {'@': 113}), 1: (1, {'@': 113}), 88: (1, {'@': 113}), 0: (1, {'@': 113}), 6: (1, {'@': 113}), 28: (1, {'@': 113}), 123: (0, 178), 80: (0, 179)}, 91: {88: (0, 180)}, 92: {88: (1, {'@': 114}), 124: (0, 181), 84: (0, 182)}, 93: {66: (1, {'@': 115}), 3: (1, {'@': 115}), 67: (1, {'@': 115}), 11: (1, {'@': 115}), 69: (1, {'@': 115}), 71: (1, {'@': 115}), 73: (1, {'@': 115}), 75: (1, {'@': 115}), 74: (1, {'@': 115}), 48: (1, {'@': 115}), 52: (1, {'@': 115}), 79: (1, {'@': 115}), 12: (1, {'@': 115}), 82: (1, {'@': 115}), 83: (1, {'@': 115}), 60: (1, {'@': 115}), 84: (1, {'@': 115}), 85: (1, {'@': 115}), 7: (1, {'@': 115}), 87: (1, {'@': 115}), 1: (1, {'@': 115}), 88: (1, {'@': 115}), 0: (1, {'@': 115}), 6: (1, {'@': 115})}, 94: {45: (0, 46), 28: (0, 94), 41: (0, 95), 94: (0, 183), 2: (0, 184), 25: (0, 96), 100: (0, 97), 12: (0, 12)}, 95: {66: (1, {'@': 116}), 3: (1, {'@': 116}), 67: (1, {'@': 116}), 11: (1, {'@': 116}), 69: (1, {'@': 116}), 71: (1, {'@': 116}), 73: (1, {'@': 116}), 75: (1, {'@': 116}), 74: (1, {'@': 116}), 48: (1, {'@': 116}), 24: (1, {'@': 116}), 77: (1, {'@': 116}), 52: (1, {'@': 116}), 79: (1, {'@': 116}), 80: (1, {'@': 116}), 12: (1, {'@': 116}), 82: (1, {'@': 116}), 83: (1, {'@': 116}), 60: (1, {'@': 116}), 84: (1, {'@': 116}), 85: (1, {'@': 116}), 7: (1, {'@': 116}), 86: (1, {'@': 116}), 87: (1, {'@': 116}), 1: (1, {'@': 116}), 88: (1, {'@': 116}), 0: (1, {'@': 116}), 6: (1, {'@': 116}), 28: (1, {'@': 116})}, 96: {92: (0, 85), 93: (0, 86), 94: (0, 87), 2: (0, 184), 91: (0, 185), 96: (0, 90), 99: (0, 93), 45: (0, 46), 28: (0, 94), 41: (0, 95), 25: (0, 96), 100: (0, 97), 12: (0, 12)}, 97: {66: (1, {'@': 117}), 3: (1, {'@': 117}), 67: (1, {'@': 117}), 11: (1, {'@': 117}), 69: (1, {'@': 117}), 71: (1, {'@': 117}), 73: (1, {'@': 117}), 75: (1, {'@': 117}), 74: (1, {'@': 117}), 48: (1, {'@': 117}), 24: (1, {'@': 117}), 77: (1, {'@': 117}), 52: (1, {'@': 117}), 79: (1, {'@': 117}), 80: (1, {'@': 117}), 12: (1, {'@': 117}), 82: (1, {'@': 117}), 83: (1, {'@': 117}), 60: (1, {'@': 117}), 84: (1, {'@': 117}), 85: (1, {'@': 117}), 7: (1, {'@': 117}), 86: (1, {'@': 117}), 87: (1, {'@': 117}), 1: (1, {'@': 117}), 88: (1, {'@': 117}), 0: (1, {'@': 117}), 6: (1, {'@': 117}), 28: (1, {'@': 117})}, 98: {25: (1, {'@': 118}), 66: (1, {'@': 118}), 57: (1, {'@': 118}), 68: (1, {'@': 118}), 69: (1, {'@': 118}), 38: (1, {'@': 118}), 59: (1, {'@': 118}), 70: (1, {'@': 118}), 71: (1, {'@': 118}), 72: (1, {'@': 118}), 73: (1, {'@': 118}), 74: (1, {'@': 118}), 75: (1, {'@': 118}), 26: (1, {'@': 118}), 76: (1, {'@': 118}), 47: (1, {'@': 118}), 45: (1, {'@': 118}), 77: (1, {'@': 118}), 36: (1, {'@': 118}), 52: (1, {'@': 118}), 78: (1, {'@': 118}), 79: (1, {'@': 118}), 80: (1, {'@': 118}), 81: (1, {'@': 118}), 12: (1, {'@': 118}), 82: (1, {'@': 118}), 37: (1, {'@': 118}), 83: (1, {'@': 118}), 60: (1, {'@': 118}), 84: (1, {'@': 118}), 85: (1, {'@': 118}), 86: (1, {'@': 118}), 53: (1, {'@': 118}), 62: (1, {'@': 118}), 88: (1, {'@': 118}), 90: (1, {'@': 118}), 28: (1, {'@': 118})}, 99: {125: (0, 186), 84: (0, 187), 69: (0, 188), 66: (0, 189)}, 100: {84: (0, 190), 88: (0, 191)}, 101: {49: (0, 51), 26: (0, 26), 34: (0, 53), 50: (0, 192), 51: (0, 54), 25: (0, 27), 30: (0, 31), 31: (0, 32), 52: (0, 55), 32: (0, 33), 33: (0, 34), 36: (0, 37), 35: (0, 36), 53: (0, 56), 39: (0, 40), 54: (0, 57), 12: (0, 12), 43: (0, 44), 27: (0, 28), 45: (0, 46), 46: (0, 47), 55: (0, 58), 56: (0, 59), 57: (0, 60), 58: (0, 61), 59: (0, 62), 60: (0, 63), 61: (0, 64), 28: (0, 29), 29: (0, 30), 37: (0, 38), 38: (0, 39), 40: (0, 41), 41: (0, 42), 42: (0, 43), 88: (0, 193), 44: (0, 45), 2: (0, 48), 47: (0, 49), 62: (0, 65), 63: (0, 66)}, 102: {26: (0, 26), 25: (0, 27), 28: (0, 29), 29: (0, 30), 30: (0, 31), 31: (0, 32), 32: (0, 33), 36: (0, 37), 33: (0, 34), 35: (0, 36), 37: (0, 38), 27: (0, 194), 38: (0, 39), 39: (0, 40), 40: (0, 41), 41: (0, 42), 12: (0, 12), 42: (0, 43), 43: (0, 44), 44: (0, 45), 45: (0, 46), 2: (0, 48), 47: (0, 49)}, 103: {26: (0, 26), 25: (0, 27), 28: (0, 29), 29: (0, 30), 30: (0, 31), 31: (0, 32), 32: (0, 33), 36: (0, 37), 33: (0, 34), 35: (0, 36), 37: (0, 38), 38: (0, 39), 39: (0, 40), 40: (0, 41), 41: (0, 42), 12: (0, 12), 42: (0, 43), 43: (0, 44), 44: (0, 45), 45: (0, 46), 27: (0, 195), 2: (0, 48), 47: (0, 49)}, 104: {26: (0, 26), 25: (0, 27), 28: (0, 29), 29: (0, 30), 30: (0, 31), 31: (0, 32), 32: (0, 33), 36: (0, 37), 33: (0, 34), 35: (0, 36), 37: (0, 38), 38: (0, 39), 39: (0, 40), 40: (0, 41), 41: (0, 42), 12: (0, 12), 42: (0, 43), 43: (0, 44), 44: (0, 45), 27: (0, 196), 45: (0, 46), 2: (0, 48), 47: (0, 49)}, 105: {26: (0, 26), 25: (0, 27), 28: (0, 29), 29: (0, 30), 30: (0, 31), 31: (0, 32), 32: (0, 33), 36: (0, 37), 33: (0, 34), 35: (0, 36), 37: (0, 38), 27: (0, 197), 38: (0, 39), 39: (0, 40), 40: (0, 41), 41: (0, 42), 12: (0, 12), 42: (0, 43), 43: (0, 44), 44: (0, 45), 45: (0, 46), 2: (0, 48), 47: (0, 49)}, 106: {26: (0, 26), 25: (0, 27), 28: (0, 29), 29: (0, 30), 30: (0, 31), 31: (0, 32), 32: (0, 33), 36: (0, 37), 33: (0, 34), 35: (0, 36), 37: (0, 38), 38: (0, 39), 39: (0, 40), 40: (0, 41), 41: (0, 42), 12: (0, 12), 42: (0, 43), 43: (0, 44), 27: (0, 198), 44: (0, 45), 45: (0, 46), 2: (0, 48), 47: (0, 49)}, 107: {26: (0, 26), 25: (0, 27), 28: (0, 29), 29: (0, 30), 30: (0, 31), 31: (0, 32), 32: (0, 33), 36: (0, 37), 33: (0, 34), 35: (0, 36), 37: (0, 38), 38: (0, 39), 39: (0, 40), 40: (0, 41), 41: (0, 42), 12: (0, 12), 42: (0, 43), 43: (0, 44), 27: (0, 199), 44: (0, 45), 45: (0, 46), 2: (0, 48), 47: (0, 49)}, 108: {66: (1, {'@': 119}), 57: (1, {'@': 119}), 68: (1, {'@': 119}), 69: (1, {'@': 119}), 59: (1, {'@': 119}), 71: (1, {'@': 119}), 72: (1, {'@': 119}), 73: (1, {'@': 119}), 74: (1, {'@': 119}), 75: (1, {'@': 119}), 52: (1, {'@': 119}), 78: (1, {'@': 119}), 79: (1, {'@': 119}), 81: (1, {'@': 119}), 82: (1, {'@': 119}), 83: (1, {'@': 119}), 60: (1, {'@': 119}), 84: (1, {'@': 119}), 85: (1, {'@': 119}), 53: (1, {'@': 119}), 62: (1, {'@': 119}), 88: (1, {'@': 119}), 90: (1, {'@': 119})}, 109: {66: (1, {'@': 120}), 57: (1, {'@': 120}), 68: (1, {'@': 120}), 69: (1, {'@': 120}), 59: (1, {'@': 120}), 71: (1, {'@': 120}), 72: (1, {'@': 120}), 73: (1, {'@': 120}), 74: (1, {'@': 120}), 75: (1, {'@': 120}), 77: (1, {'@': 120}), 52: (1, {'@': 120}), 78: (1, {'@': 120}), 79: (1, {'@': 120}), 80: (1, {'@': 120}), 81: (1, {'@': 120}), 82: (1, {'@': 120}), 83: (1, {'@': 120}), 60: (1, {'@': 120}), 84: (1, {'@': 120}), 85: (1, {'@': 120}), 86: (1, {'@': 120}), 53: (1, {'@': 120}), 62: (1, {'@': 120}), 88: (1, {'@': 120}), 90: (1, {'@': 120}), 28: (1, {'@': 120}), 70: (0, 200)}, 110: {26: (0, 26), 37: (0, 38), 25: (0, 27), 29: (0, 201), 42: (0, 43), 30: (0, 31), 43: (0, 44), 32: (0, 33), 36: (0, 37), 44: (0, 45), 45: (0, 46), 38: (0, 39), 2: (0, 48), 47: (0, 49), 41: (0, 42), 12: (0, 12)}, 111: {25: (1, {'@': 121}), 66: (1, {'@': 121}), 57: (1, {'@': 121}), 68: (1, {'@': 121}), 69: (1, {'@': 121}), 38: (1, {'@': 121}), 59: (1, {'@': 121}), 70: (1, {'@': 121}), 71: (1, {'@': 121}), 72: (1, {'@': 121}), 73: (1, {'@': 121}), 74: (1, {'@': 121}), 75: (1, {'@': 121}), 26: (1, {'@': 121}), 76: (1, {'@': 121}), 47: (1, {'@': 121}), 45: (1, {'@': 121}), 77: (1, {'@': 121}), 36: (1, {'@': 121}), 52: (1, {'@': 121}), 78: (1, {'@': 121}), 79: (1, {'@': 121}), 80: (1, {'@': 121}), 81: (1, {'@': 121}), 12: (1, {'@': 121}), 82: (1, {'@': 121}), 37: (1, {'@': 121}), 83: (1, {'@': 121}), 60: (1, {'@': 121}), 84: (1, {'@': 121}), 85: (1, {'@': 121}), 86: (1, {'@': 121}), 53: (1, {'@': 121}), 62: (1, {'@': 121}), 88: (1, {'@': 121}), 90: (1, {'@': 121}), 28: (1, {'@': 121})}, 112: {66: (1, {'@': 122}), 57: (1, {'@': 122}), 68: (1, {'@': 122}), 69: (1, {'@': 122}), 59: (1, {'@': 122}), 71: (1, {'@': 122}), 72: (1, {'@': 122}), 73: (1, {'@': 122}), 74: (1, {'@': 122}), 75: (1, {'@': 122}), 52: (1, {'@': 122}), 78: (1, {'@': 122}), 79: (1, {'@': 122}), 80: (1, {'@': 122}), 81: (1, {'@': 122}), 82: (1, {'@': 122}), 83: (1, {'@': 122}), 60: (1, {'@': 122}), 84: (1, {'@': 122}), 85: (1, {'@': 122}), 53: (1, {'@': 122}), 62: (1, {'@': 122}), 88: (1, {'@': 122}), 90: (1, {'@': 122}), 28: (1, {'@': 122}), 77: (0, 202)}, 113: {26: (0, 26), 37: (0, 38), 25: (0, 27), 29: (0, 30), 42: (0, 43), 30: (0, 31), 43: (0, 44), 40: (0, 41), 32: (0, 33), 36: (0, 37), 44: (0, 45), 45: (0, 46), 38: (0, 39), 2: (0, 48), 47: (0, 49), 41: (0, 42), 12: (0, 12), 33: (0, 203)}, 114: {26: (0, 26), 25: (0, 27), 27: (0, 28), 28: (0, 29), 29: (0, 30), 30: (0, 31), 31: (0, 32), 32: (0, 33), 33: (0, 34), 35: (0, 36), 36: (0, 37), 37: (0, 38), 38: (0, 39), 39: (0, 40), 40: (0, 41), 41: (0, 42), 12: (0, 12), 42: (0, 43), 43: (0, 44), 44: (0, 45), 45: (0, 46), 2: (0, 48), 46: (0, 204), 47: (0, 49)}, 115: {25: (1, {'@': 99}), 66: (1, {'@': 99}), 57: (1, {'@': 99}), 68: (1, {'@': 99}), 69: (1, {'@': 99}), 38: (1, {'@': 99}), 59: (1, {'@': 99}), 72: (1, {'@': 99}), 73: (1, {'@': 99}), 74: (1, {'@': 99}), 26: (1, {'@': 99}), 47: (1, {'@': 99}), 45: (1, {'@': 99}), 36: (1, {'@': 99}), 52: (1, {'@': 99}), 78: (1, {'@': 99}), 81: (1, {'@': 99}), 12: (1, {'@': 99}), 37: (1, {'@': 99}), 60: (1, {'@': 99}), 84: (1, {'@': 99}), 53: (1, {'@': 99}), 62: (1, {'@': 99}), 88: (1, {'@': 99}), 90: (1, {'@': 99}), 28: (1, {'@': 99}), 82: (0, 205)}, 116: {66: (1, {'@': 123}), 57: (1, {'@': 123}), 68: (1, {'@': 123}), 69: (1, {'@': 123}), 59: (1, {'@': 123}), 71: (1, {'@': 123}), 72: (1, {'@': 123}), 73: (1, {'@': 123}), 74: (1, {'@': 123}), 75: (1, {'@': 123}), 52: (1, {'@': 123}), 78: (1, {'@': 123}), 79: (1, {'@': 123}), 81: (1, {'@': 123}), 82: (1, {'@': 123}), 83: (1, {'@': 123}), 60: (1, {'@': 123}), 84: (1, {'@': 123}), 85: (1, {'@': 123}), 53: (1, {'@': 123}), 62: (1, {'@': 123}), 88: (1, {'@': 123}), 90: (1, {'@': 123}), 28: (1, {'@': 123}), 80: (0, 206)}, 117: {26: (0, 26), 37: (0, 38), 25: (0, 27), 29: (0, 30), 42: (0, 43), 35: (0, 207), 30: (0, 31), 43: (0, 44), 40: (0, 41), 32: (0, 33), 36: (0, 37), 33: (0, 34), 44: (0, 45), 45: (0, 46), 38: (0, 39), 2: (0, 48), 47: (0, 49), 41: (0, 42), 12: (0, 12)}, 118: {91: (0, 208), 25: (0, 118), 38: (0, 128), 108: (0, 129), 94: (0, 87), 2: (0, 88), 105: (0, 119), 95: (0, 123), 109: (0, 130), 107: (0, 209), 106: (0, 120), 59: (0, 132), 111: (0, 133), 92: (0, 85), 12: (0, 12), 112: (0, 134), 96: (0, 90), 93: (0, 86), 36: (0, 125), 44: (0, 126), 55: (0, 127), 99: (0, 93), 45: (0, 46), 113: (0, 135), 28: (0, 94), 41: (0, 95), 110: (0, 131), 100: (0, 97), 47: (0, 49)}, 119: {2: (0, 160), 12: (0, 12), 119: (0, 210)}, 120: {48: (1, {'@': 124}), 3: (1, {'@': 124}), 7: (1, {'@': 124}), 1: (1, {'@': 124}), 67: (1, {'@': 124}), 88: (1, {'@': 124}), 73: (1, {'@': 124}), 74: (1, {'@': 124}), 0: (1, {'@': 124}), 6: (1, {'@': 124}), 12: (1, {'@': 124}), 11: (1, {'@': 124}), 52: (0, 211), 60: (0, 212), 87: (0, 213)}, 121: {48: (0, 214)}, 122: {66: (1, {'@': 111}), 3: (1, {'@': 111}), 67: (1, {'@': 111}), 11: (1, {'@': 111}), 69: (1, {'@': 111}), 71: (1, {'@': 111}), 73: (1, {'@': 111}), 75: (1, {'@': 111}), 74: (1, {'@': 111}), 48: (1, {'@': 111}), 24: (0, 24), 77: (1, {'@': 111}), 52: (1, {'@': 111}), 79: (1, {'@': 111}), 80: (1, {'@': 111}), 12: (1, {'@': 111}), 82: (1, {'@': 111}), 83: (1, {'@': 111}), 60: (1, {'@': 111}), 84: (1, {'@': 111}), 85: (1, {'@': 111}), 7: (1, {'@': 111}), 86: (1, {'@': 111}), 87: (1, {'@': 111}), 1: (1, {'@': 111}), 88: (1, {'@': 111}), 0: (1, {'@': 111}), 6: (1, {'@': 111}), 28: (1, {'@': 111}), 26: (0, 176), 25: (0, 215)}, 123: {48: (1, {'@': 125}), 3: (1, {'@': 125}), 52: (1, {'@': 125}), 67: (1, {'@': 125}), 11: (1, {'@': 125}), 12: (1, {'@': 125}), 60: (1, {'@': 125}), 7: (1, {'@': 125}), 87: (1, {'@': 125}), 1: (1, {'@': 125}), 88: (1, {'@': 125}), 73: (1, {'@': 125}), 74: (1, {'@': 125}), 0: (1, {'@': 125}), 6: (1, {'@': 125}), 71: (0, 216), 85: (0, 217), 79: (0, 218), 83: (0, 219), 75: (0, 220), 82: (0, 221)}, 124: {48: (0, 222), 67: (0, 223)}, 125: {48: (1, {'@': 126}), 3: (1, {'@': 126}), 52: (1, {'@': 126}), 67: (1, {'@': 126}), 11: (1, {'@': 126}), 12: (1, {'@': 126}), 60: (1, {'@': 126}), 7: (1, {'@': 126}), 87: (1, {'@': 126}), 1: (1, {'@': 126}), 88: (1, {'@': 126}), 73: (1, {'@': 126}), 74: (1, {'@': 126}), 0: (1, {'@': 126}), 6: (1, {'@': 126})}, 126: {48: (1, {'@': 127}), 3: (1, {'@': 127}), 52: (1, {'@': 127}), 67: (1, {'@': 127}), 11: (1, {'@': 127}), 12: (1, {'@': 127}), 60: (1, {'@': 127}), 7: (1, {'@': 127}), 87: (1, {'@': 127}), 1: (1, {'@': 127}), 88: (1, {'@': 127}), 73: (1, {'@': 127}), 74: (1, {'@': 127}), 0: (1, {'@': 127}), 6: (1, {'@': 127})}, 127: {91: (0, 84), 25: (0, 118), 38: (0, 128), 108: (0, 129), 94: (0, 87), 2: (0, 88), 105: (0, 119), 95: (0, 123), 109: (0, 130), 106: (0, 120), 59: (0, 132), 111: (0, 133), 92: (0, 85), 12: (0, 12), 112: (0, 134), 96: (0, 90), 93: (0, 86), 36: (0, 125), 107: (0, 224), 44: (0, 126), 55: (0, 127), 99: (0, 93), 45: (0, 46), 113: (0, 135), 28: (0, 94), 41: (0, 95), 110: (0, 131), 100: (0, 97), 47: (0, 49)}, 128: {48: (1, {'@': 128}), 3: (1, {'@': 128}), 52: (1, {'@': 128}), 67: (1, {'@': 128}), 11: (1, {'@': 128}), 12: (1, {'@': 128}), 60: (1, {'@': 128}), 7: (1, {'@': 128}), 87: (1, {'@': 128}), 1: (1, {'@': 128}), 88: (1, {'@': 128}), 73: (1, {'@': 128}), 74: (1, {'@': 128}), 0: (1, {'@': 128}), 6: (1, {'@': 128})}, 129: {12: (1, {'@': 129})}, 130: {12: (1, {'@': 130})}, 131: {119: (0, 225), 2: (0, 160), 12: (0, 12)}, 132: {91: (0, 84), 25: (0, 118), 38: (0, 128), 108: (0, 129), 94: (0, 87), 2: (0, 88), 105: (0, 119), 95: (0, 123), 109: (0, 130), 106: (0, 120), 59: (0, 132), 111: (0, 133), 92: (0, 85), 12: (0, 12), 112: (0, 134), 96: (0, 90), 107: (0, 226), 93: (0, 86), 36: (0, 125), 44: (0, 126), 55: (0, 127), 99: (0, 93), 45: (0, 46), 113: (0, 135), 28: (0, 94), 41: (0, 95), 110: (0, 131), 100: (0, 97), 47: (0, 49)}, 133: {48: (1, {'@': 131}), 3: (1, {'@': 131}), 52: (1, {'@': 131}), 67: (1, {'@': 131}), 11: (1, {'@': 131}), 12: (1, {'@': 131}), 60: (1, {'@': 131}), 7: (1, {'@': 131}), 87: (1, {'@': 131}), 1: (1, {'@': 131}), 88: (1, {'@': 131}), 73: (1, {'@': 131}), 74: (1, {'@': 131}), 0: (1, {'@': 131}), 6: (1, {'@': 131})}, 134: {12: (1, {'@': 132})}, 135: {12: (1, {'@': 133})}, 136: {66: (1, {'@': 134}), 57: (1, {'@': 134}), 68: (1, {'@': 134}), 69: (1, {'@': 134}), 59: (1, {'@': 134}), 71: (1, {'@': 134}), 72: (1, {'@': 134}), 73: (1, {'@': 134}), 74: (1, {'@': 134}), 75: (1, {'@': 134}), 52: (1, {'@': 134}), 78: (1, {'@': 134}), 79: (1, {'@': 134}), 81: (1, {'@': 134}), 82: (1, {'@': 134}), 83: (1, {'@': 134}), 60: (1, {'@': 134}), 84: (1, {'@': 134}), 85: (1, {'@': 134}), 53: (1, {'@': 134}), 62: (1, {'@': 134}), 88: (1, {'@': 134}), 90: (1, {'@': 134}), 28: (0, 227)}, 137: {26: (0, 26), 25: (0, 27), 29: (0, 30), 30: (0, 31), 32: (0, 33), 36: (0, 37), 33: (0, 34), 35: (0, 36), 37: (0, 38), 39: (0, 228), 38: (0, 39), 40: (0, 41), 41: (0, 42), 12: (0, 12), 42: (0, 43), 43: (0, 44), 44: (0, 45), 45: (0, 46), 2: (0, 48), 47: (0, 49)}, 138: {66: (1, {'@': 135}), 57: (1, {'@': 135}), 68: (1, {'@': 135}), 69: (1, {'@': 135}), 59: (1, {'@': 135}), 71: (1, {'@': 135}), 72: (1, {'@': 135}), 73: (1, {'@': 135}), 74: (1, {'@': 135}), 75: (1, {'@': 135}), 77: (1, {'@': 135}), 52: (1, {'@': 135}), 78: (1, {'@': 135}), 79: (1, {'@': 135}), 80: (1, {'@': 135}), 81: (1, {'@': 135}), 82: (1, {'@': 135}), 83: (1, {'@': 135}), 60: (1, {'@': 135}), 84: (1, {'@': 135}), 85: (1, {'@': 135}), 53: (1, {'@': 135}), 62: (1, {'@': 135}), 88: (1, {'@': 135}), 90: (1, {'@': 135}), 28: (1, {'@': 135}), 86: (0, 229)}, 139: {26: (0, 26), 37: (0, 38), 25: (0, 27), 29: (0, 30), 42: (0, 43), 41: (0, 42), 30: (0, 31), 43: (0, 44), 32: (0, 33), 36: (0, 37), 44: (0, 45), 45: (0, 46), 38: (0, 39), 2: (0, 48), 47: (0, 49), 40: (0, 230), 12: (0, 12)}, 140: {66: (1, {'@': 136}), 78: (1, {'@': 136}), 81: (0, 232), 68: (1, {'@': 136}), 69: (1, {'@': 136}), 84: (1, {'@': 136}), 72: (1, {'@': 136}), 88: (1, {'@': 136}), 73: (1, {'@': 136}), 74: (1, {'@': 136}), 90: (1, {'@': 136}), 126: (0, 231)}, 141: {48: (1, {'@': 137}), 3: (1, {'@': 137}), 7: (1, {'@': 137}), 1: (1, {'@': 137}), 0: (1, {'@': 137}), 6: (1, {'@': 137}), 12: (1, {'@': 137}), 11: (1, {'@': 137})}, 142: {66: (1, {'@': 138}), 78: (1, {'@': 138}), 81: (1, {'@': 138}), 68: (1, {'@': 138}), 69: (1, {'@': 138}), 84: (1, {'@': 138}), 72: (1, {'@': 138}), 88: (1, {'@': 138}), 73: (1, {'@': 138}), 74: (1, {'@': 138}), 90: (1, {'@': 138}), 26: (0, 26), 25: (0, 27), 27: (0, 28), 28: (0, 29), 29: (0, 30), 30: (0, 31), 31: (0, 32), 32: (0, 33), 33: (0, 34), 35: (0, 36), 36: (0, 37), 37: (0, 38), 38: (0, 39), 39: (0, 40), 40: (0, 41), 41: (0, 42), 12: (0, 12), 42: (0, 43), 43: (0, 44), 44: (0, 45), 45: (0, 46), 2: (0, 48), 46: (0, 204), 47: (0, 49)}, 143: {89: (0, 233), 53: (0, 234)}, 144: {25: (1, {'@': 139}), 66: (1, {'@': 139}), 57: (1, {'@': 139}), 68: (1, {'@': 139}), 69: (1, {'@': 139}), 38: (1, {'@': 139}), 59: (1, {'@': 139}), 72: (1, {'@': 139}), 73: (1, {'@': 139}), 74: (1, {'@': 139}), 26: (1, {'@': 139}), 47: (1, {'@': 139}), 45: (1, {'@': 139}), 36: (1, {'@': 139}), 52: (1, {'@': 139}), 78: (1, {'@': 139}), 81: (1, {'@': 139}), 12: (1, {'@': 139}), 37: (1, {'@': 139}), 60: (1, {'@': 139}), 84: (1, {'@': 139}), 53: (1, {'@': 139}), 62: (1, {'@': 139}), 88: (1, {'@': 139}), 90: (1, {'@': 139}), 28: (1, {'@': 139})}, 145: {74: (0, 235)}, 146: {26: (0, 26), 37: (0, 38), 25: (0, 27), 42: (0, 43), 43: (0, 44), 32: (0, 33), 36: (0, 37), 44: (0, 45), 45: (0, 46), 30: (0, 111), 38: (0, 39), 2: (0, 48), 76: (0, 236), 47: (0, 49), 41: (0, 42), 12: (0, 12)}, 147: {66: (1, {'@': 140}), 78: (1, {'@': 140}), 81: (1, {'@': 140}), 68: (1, {'@': 140}), 69: (1, {'@': 140}), 84: (1, {'@': 140}), 72: (1, {'@': 140}), 88: (1, {'@': 140}), 73: (1, {'@': 140}), 74: (1, {'@': 140}), 90: (1, {'@': 140}), 59: (0, 62), 60: (0, 63), 58: (0, 114), 52: (0, 55), 53: (0, 56), 61: (0, 64), 54: (0, 57), 62: (0, 65), 57: (0, 60)}, 148: {68: (0, 237)}, 149: {48: (1, {'@': 141}), 3: (1, {'@': 141}), 7: (1, {'@': 141}), 1: (1, {'@': 141}), 0: (1, {'@': 141}), 6: (1, {'@': 141}), 12: (1, {'@': 141}), 11: (1, {'@': 141})}, 150: {2: (0, 238), 12: (0, 12)}, 151: {88: (1, {'@': 142}), 24: (1, {'@': 142}), 84: (0, 239)}, 152: {48: (1, {'@': 143}), 3: (1, {'@': 143}), 7: (1, {'@': 143}), 1: (1, {'@': 143}), 0: (1, {'@': 143}), 6: (1, {'@': 143}), 12: (1, {'@': 143}), 11: (1, {'@': 143})}, 153: {2: (0, 240), 12: (0, 12)}, 154: {88: (0, 241)}, 155: {84: (0, 242)}, 156: {88: (0, 243)}, 157: {84: (0, 244)}, 158: {84: (1, {'@': 144})}, 159: {84: (0, 245)}, 160: {88: (1, {'@': 145}), 84: (1, {'@': 145}), 69: (1, {'@': 145}), 25: (0, 246), 24: (0, 247)}, 161: {84: (0, 248)}, 162: {84: (0, 249)}, 163: {84: (0, 250)}, 164: {84: (0, 251)}, 165: {88: (0, 252)}, 166: {84: (0, 253)}, 167: {88: (1, {'@': 76}), 91: (0, 84), 92: (0, 85), 93: (0, 86), 94: (0, 87), 2: (0, 88), 97: (0, 254), 95: (0, 89), 96: (0, 90), 98: (0, 92), 99: (0, 93), 45: (0, 46), 28: (0, 94), 41: (0, 95), 25: (0, 96), 100: (0, 97), 12: (0, 12)}, 168: {82: (0, 255)}, 169: {66: (1, {'@': 146}), 3: (1, {'@': 146}), 67: (1, {'@': 146}), 11: (1, {'@': 146}), 69: (1, {'@': 146}), 71: (1, {'@': 146}), 73: (1, {'@': 146}), 75: (1, {'@': 146}), 74: (1, {'@': 146}), 48: (1, {'@': 146}), 52: (1, {'@': 146}), 79: (1, {'@': 146}), 80: (1, {'@': 146}), 12: (1, {'@': 146}), 82: (1, {'@': 146}), 83: (1, {'@': 146}), 60: (1, {'@': 146}), 84: (1, {'@': 146}), 85: (1, {'@': 146}), 7: (1, {'@': 146}), 87: (1, {'@': 146}), 1: (1, {'@': 146}), 88: (1, {'@': 146}), 0: (1, {'@': 146}), 6: (1, {'@': 146}), 28: (1, {'@': 146}), 77: (0, 256)}, 170: {45: (0, 46), 28: (0, 94), 41: (0, 95), 94: (0, 87), 2: (0, 184), 92: (0, 257), 25: (0, 96), 100: (0, 97), 12: (0, 12)}, 171: {66: (1, {'@': 147}), 3: (1, {'@': 147}), 67: (1, {'@': 147}), 11: (1, {'@': 147}), 69: (1, {'@': 147}), 71: (1, {'@': 147}), 73: (1, {'@': 147}), 75: (1, {'@': 147}), 74: (1, {'@': 147}), 48: (1, {'@': 147}), 52: (1, {'@': 147}), 79: (1, {'@': 147}), 12: (1, {'@': 147}), 82: (1, {'@': 147}), 83: (1, {'@': 147}), 60: (1, {'@': 147}), 84: (1, {'@': 147}), 85: (1, {'@': 147}), 7: (1, {'@': 147}), 87: (1, {'@': 147}), 1: (1, {'@': 147}), 88: (1, {'@': 147}), 0: (1, {'@': 147}), 6: (1, {'@': 147}), 28: (0, 258)}, 172: {93: (0, 259), 92: (0, 85), 94: (0, 87), 2: (0, 184), 96: (0, 90), 45: (0, 46), 28: (0, 94), 41: (0, 95), 25: (0, 96), 100: (0, 97), 12: (0, 12)}, 173: {66: (1, {'@': 148}), 3: (1, {'@': 148}), 67: (1, {'@': 148}), 11: (1, {'@': 148}), 69: (1, {'@': 148}), 71: (1, {'@': 148}), 73: (1, {'@': 148}), 75: (1, {'@': 148}), 74: (1, {'@': 148}), 48: (1, {'@': 148}), 77: (1, {'@': 148}), 52: (1, {'@': 148}), 79: (1, {'@': 148}), 80: (1, {'@': 148}), 12: (1, {'@': 148}), 82: (1, {'@': 148}), 83: (1, {'@': 148}), 60: (1, {'@': 148}), 84: (1, {'@': 148}), 85: (1, {'@': 148}), 7: (1, {'@': 148}), 87: (1, {'@': 148}), 1: (1, {'@': 148}), 88: (1, {'@': 148}), 0: (1, {'@': 148}), 6: (1, {'@': 148}), 28: (1, {'@': 148}), 86: (0, 260)}, 174: {2: (0, 261), 12: (0, 12)}, 175: {45: (0, 46), 28: (0, 94), 41: (0, 95), 94: (0, 262), 2: (0, 184), 25: (0, 96), 100: (0, 97), 12: (0, 12)}, 176: {92: (0, 85), 93: (0, 86), 94: (0, 87), 2: (0, 184), 91: (0, 263), 96: (0, 90), 99: (0, 93), 45: (0, 46), 28: (0, 94), 41: (0, 95), 25: (0, 96), 100: (0, 97), 12: (0, 12)}, 177: {88: (1, {'@': 76}), 91: (0, 84), 92: (0, 85), 93: (0, 86), 94: (0, 87), 2: (0, 88), 95: (0, 89), 96: (0, 90), 98: (0, 92), 99: (0, 93), 45: (0, 46), 28: (0, 94), 41: (0, 95), 12: (0, 12), 25: (0, 96), 100: (0, 97), 97: (0, 264)}, 178: {66: (1, {'@': 149}), 3: (1, {'@': 149}), 67: (1, {'@': 149}), 11: (1, {'@': 149}), 69: (1, {'@': 149}), 71: (1, {'@': 149}), 73: (1, {'@': 149}), 75: (1, {'@': 149}), 74: (1, {'@': 149}), 48: (1, {'@': 149}), 52: (1, {'@': 149}), 79: (1, {'@': 149}), 12: (1, {'@': 149}), 82: (1, {'@': 149}), 83: (1, {'@': 149}), 60: (1, {'@': 149}), 84: (1, {'@': 149}), 85: (1, {'@': 149}), 7: (1, {'@': 149}), 87: (1, {'@': 149}), 1: (1, {'@': 149}), 88: (1, {'@': 149}), 0: (1, {'@': 149}), 6: (1, {'@': 149}), 28: (1, {'@': 149}), 80: (0, 265)}, 179: {45: (0, 46), 92: (0, 85), 28: (0, 94), 41: (0, 95), 94: (0, 87), 2: (0, 184), 96: (0, 266), 25: (0, 96), 100: (0, 97), 12: (0, 12)}, 180: {53: (0, 267)}, 181: {88: (1, {'@': 150}), 84: (0, 268)}, 182: {91: (0, 84), 92: (0, 85), 93: (0, 86), 94: (0, 87), 2: (0, 88), 95: (0, 89), 96: (0, 90), 99: (0, 93), 45: (0, 46), 28: (0, 94), 98: (0, 269), 41: (0, 95), 25: (0, 96), 100: (0, 97), 12: (0, 12)}, 183: {66: (1, {'@': 151}), 3: (1, {'@': 151}), 67: (1, {'@': 151}), 11: (1, {'@': 151}), 69: (1, {'@': 151}), 71: (1, {'@': 151}), 73: (1, {'@': 151}), 75: (1, {'@': 151}), 74: (1, {'@': 151}), 48: (1, {'@': 151}), 24: (0, 174), 77: (1, {'@': 151}), 52: (1, {'@': 151}), 79: (1, {'@': 151}), 80: (1, {'@': 151}), 12: (1, {'@': 151}), 82: (1, {'@': 151}), 83: (1, {'@': 151}), 60: (1, {'@': 151}), 84: (1, {'@': 151}), 85: (1, {'@': 151}), 7: (1, {'@': 151}), 86: (1, {'@': 151}), 87: (1, {'@': 151}), 1: (1, {'@': 151}), 88: (1, {'@': 151}), 0: (1, {'@': 151}), 6: (1, {'@': 151}), 28: (1, {'@': 151})}, 184: {66: (1, {'@': 111}), 3: (1, {'@': 111}), 67: (1, {'@': 111}), 11: (1, {'@': 111}), 69: (1, {'@': 111}), 71: (1, {'@': 111}), 73: (1, {'@': 111}), 75: (1, {'@': 111}), 74: (1, {'@': 111}), 48: (1, {'@': 111}), 24: (1, {'@': 111}), 77: (1, {'@': 111}), 52: (1, {'@': 111}), 79: (1, {'@': 111}), 80: (1, {'@': 111}), 12: (1, {'@': 111}), 82: (1, {'@': 111}), 83: (1, {'@': 111}), 60: (1, {'@': 111}), 84: (1, {'@': 111}), 85: (1, {'@': 111}), 7: (1, {'@': 111}), 86: (1, {'@': 111}), 87: (1, {'@': 111}), 1: (1, {'@': 111}), 88: (1, {'@': 111}), 0: (1, {'@': 111}), 6: (1, {'@': 111}), 28: (1, {'@': 111}), 25: (0, 177)}, 185: {88: (0, 270)}, 186: {66: (0, 271), 84: (0, 272)}, 187: {49: (0, 51), 26: (0, 26), 34: (0, 53), 51: (0, 54), 25: (0, 27), 30: (0, 31), 31: (0, 32), 52: (0, 55), 32: (0, 33), 33: (0, 34), 36: (0, 37), 35: (0, 36), 53: (0, 56), 39: (0, 40), 54: (0, 57), 12: (0, 12), 43: (0, 44), 50: (0, 273), 27: (0, 28), 45: (0, 46), 46: (0, 47), 55: (0, 58), 56: (0, 59), 57: (0, 60), 58: (0, 61), 59: (0, 62), 60: (0, 63), 61: (0, 64), 28: (0, 29), 29: (0, 30), 37: (0, 38), 38: (0, 39), 40: (0, 41), 41: (0, 42), 42: (0, 43), 44: (0, 45), 2: (0, 48), 47: (0, 49), 62: (0, 65), 63: (0, 66)}, 188: {69: (0, 274)}, 189: {25: (1, {'@': 152}), 66: (1, {'@': 152}), 57: (1, {'@': 152}), 68: (1, {'@': 152}), 69: (1, {'@': 152}), 38: (1, {'@': 152}), 59: (1, {'@': 152}), 70: (1, {'@': 152}), 71: (1, {'@': 152}), 72: (1, {'@': 152}), 73: (1, {'@': 152}), 74: (1, {'@': 152}), 75: (1, {'@': 152}), 26: (1, {'@': 152}), 76: (1, {'@': 152}), 47: (1, {'@': 152}), 45: (1, {'@': 152}), 77: (1, {'@': 152}), 36: (1, {'@': 152}), 52: (1, {'@': 152}), 78: (1, {'@': 152}), 79: (1, {'@': 152}), 80: (1, {'@': 152}), 81: (1, {'@': 152}), 12: (1, {'@': 152}), 82: (1, {'@': 152}), 37: (1, {'@': 152}), 83: (1, {'@': 152}), 60: (1, {'@': 152}), 84: (1, {'@': 152}), 85: (1, {'@': 152}), 86: (1, {'@': 152}), 53: (1, {'@': 152}), 62: (1, {'@': 152}), 88: (1, {'@': 152}), 90: (1, {'@': 152}), 28: (1, {'@': 152})}, 190: {25: (1, {'@': 153}), 63: (1, {'@': 153}), 45: (1, {'@': 153}), 57: (1, {'@': 153}), 36: (1, {'@': 153}), 52: (1, {'@': 153}), 12: (1, {'@': 153}), 37: (1, {'@': 153}), 51: (1, {'@': 153}), 38: (1, {'@': 153}), 56: (1, {'@': 153}), 60: (1, {'@': 153}), 59: (1, {'@': 153}), 49: (1, {'@': 153}), 53: (1, {'@': 153}), 55: (1, {'@': 153}), 62: (1, {'@': 153}), 88: (1, {'@': 153}), 26: (1, {'@': 153}), 28: (1, {'@': 153}), 47: (1, {'@': 153})}, 191: {25: (1, {'@': 154}), 66: (1, {'@': 154}), 57: (1, {'@': 154}), 68: (1, {'@': 154}), 69: (1, {'@': 154}), 38: (1, {'@': 154}), 59: (1, {'@': 154}), 70: (1, {'@': 154}), 71: (1, {'@': 154}), 72: (1, {'@': 154}), 73: (1, {'@': 154}), 74: (1, {'@': 154}), 75: (1, {'@': 154}), 26: (1, {'@': 154}), 76: (1, {'@': 154}), 47: (1, {'@': 154}), 45: (1, {'@': 154}), 77: (1, {'@': 154}), 36: (1, {'@': 154}), 52: (1, {'@': 154}), 78: (1, {'@': 154}), 79: (1, {'@': 154}), 80: (1, {'@': 154}), 81: (1, {'@': 154}), 12: (1, {'@': 154}), 82: (1, {'@': 154}), 37: (1, {'@': 154}), 83: (1, {'@': 154}), 60: (1, {'@': 154}), 84: (1, {'@': 154}), 85: (1, {'@': 154}), 86: (1, {'@': 154}), 53: (1, {'@': 154}), 62: (1, {'@': 154}), 88: (1, {'@': 154}), 90: (1, {'@': 154}), 28: (1, {'@': 154})}, 192: {84: (0, 275), 88: (0, 276)}, 193: {25: (1, {'@': 155}), 66: (1, {'@': 155}), 57: (1, {'@': 155}), 68: (1, {'@': 155}), 69: (1, {'@': 155}), 38: (1, {'@': 155}), 59: (1, {'@': 155}), 70: (1, {'@': 155}), 71: (1, {'@': 155}), 72: (1, {'@': 155}), 73: (1, {'@': 155}), 74: (1, {'@': 155}), 75: (1, {'@': 155}), 26: (1, {'@': 155}), 76: (1, {'@': 155}), 47: (1, {'@': 155}), 45: (1, {'@': 155}), 77: (1, {'@': 155}), 36: (1, {'@': 155}), 52: (1, {'@': 155}), 78: (1, {'@': 155}), 79: (1, {'@': 155}), 80: (1, {'@': 155}), 81: (1, {'@': 155}), 12: (1, {'@': 155}), 82: (1, {'@': 155}), 37: (1, {'@': 155}), 83: (1, {'@': 155}), 60: (1, {'@': 155}), 84: (1, {'@': 155}), 85: (1, {'@': 155}), 86: (1, {'@': 155}), 53: (1, {'@': 155}), 62: (1, {'@': 155}), 88: (1, {'@': 155}), 90: (1, {'@': 155}), 28: (1, {'@': 155})}, 194: {66: (1, {'@': 156}), 57: (1, {'@': 156}), 52: (1, {'@': 156}), 78: (1, {'@': 156}), 81: (1, {'@': 156}), 68: (1, {'@': 156}), 69: (1, {'@': 156}), 60: (1, {'@': 156}), 59: (1, {'@': 156}), 84: (1, {'@': 156}), 53: (1, {'@': 156}), 62: (1, {'@': 156}), 72: (1, {'@': 156}), 88: (1, {'@': 156}), 73: (1, {'@': 156}), 74: (1, {'@': 156}), 90: (1, {'@': 156})}, 195: {66: (1, {'@': 157}), 57: (1, {'@': 157}), 52: (1, {'@': 157}), 78: (1, {'@': 157}), 81: (1, {'@': 157}), 68: (1, {'@': 157}), 69: (1, {'@': 157}), 60: (1, {'@': 157}), 59: (1, {'@': 157}), 84: (1, {'@': 157}), 53: (1, {'@': 157}), 62: (1, {'@': 157}), 72: (1, {'@': 157}), 88: (1, {'@': 157}), 73: (1, {'@': 157}), 74: (1, {'@': 157}), 90: (1, {'@': 157})}, 196: {66: (1, {'@': 158}), 57: (1, {'@': 158}), 52: (1, {'@': 158}), 78: (1, {'@': 158}), 81: (1, {'@': 158}), 68: (1, {'@': 158}), 69: (1, {'@': 158}), 60: (1, {'@': 158}), 59: (1, {'@': 158}), 84: (1, {'@': 158}), 53: (1, {'@': 158}), 62: (1, {'@': 158}), 72: (1, {'@': 158}), 88: (1, {'@': 158}), 73: (1, {'@': 158}), 74: (1, {'@': 158}), 90: (1, {'@': 158})}, 197: {66: (1, {'@': 159}), 57: (1, {'@': 159}), 52: (1, {'@': 159}), 78: (1, {'@': 159}), 81: (1, {'@': 159}), 68: (1, {'@': 159}), 69: (1, {'@': 159}), 60: (1, {'@': 159}), 59: (1, {'@': 159}), 84: (1, {'@': 159}), 53: (1, {'@': 159}), 62: (1, {'@': 159}), 72: (1, {'@': 159}), 88: (1, {'@': 159}), 73: (1, {'@': 159}), 74: (1, {'@': 159}), 90: (1, {'@': 159})}, 198: {66: (1, {'@': 160}), 57: (1, {'@': 160}), 52: (1, {'@': 160}), 78: (1, {'@': 160}), 81: (1, {'@': 160}), 68: (1, {'@': 160}), 69: (1, {'@': 160}), 60: (1, {'@': 160}), 59: (1, {'@': 160}), 84: (1, {'@': 160}), 53: (1, {'@': 160}), 62: (1, {'@': 160}), 72: (1, {'@': 160}), 88: (1, {'@': 160}), 73: (1, {'@': 160}), 74: (1, {'@': 160}), 90: (1, {'@': 160})}, 199: {66: (1, {'@': 161}), 57: (1, {'@': 161}), 52: (1, {'@': 161}), 78: (1, {'@': 161}), 81: (1, {'@': 161}), 68: (1, {'@': 161}), 69: (1, {'@': 161}), 60: (1, {'@': 161}), 59: (1, {'@': 161}), 84: (1, {'@': 161}), 53: (1, {'@': 161}), 62: (1, {'@': 161}), 72: (1, {'@': 161}), 88: (1, {'@': 161}), 73: (1, {'@': 161}), 74: (1, {'@': 161}), 90: (1, {'@': 161})}, 200: {26: (0, 26), 37: (0, 38), 25: (0, 27), 29: (0, 277), 42: (0, 43), 30: (0, 31), 43: (0, 44), 32: (0, 33), 36: (0, 37), 44: (0, 45), 45: (0, 46), 38: (0, 39), 2: (0, 48), 47: (0, 49), 41: (0, 42), 12: (0, 12)}, 201: {66: (1, {'@': 162}), 57: (1, {'@': 162}), 68: (1, {'@': 162}), 69: (1, {'@': 162}), 59: (1, {'@': 162}), 70: (1, {'@': 162}), 71: (1, {'@': 162}), 72: (1, {'@': 162}), 73: (1, {'@': 162}), 74: (1, {'@': 162}), 75: (1, {'@': 162}), 77: (1, {'@': 162}), 52: (1, {'@': 162}), 78: (1, {'@': 162}), 79: (1, {'@': 162}), 80: (1, {'@': 162}), 81: (1, {'@': 162}), 82: (1, {'@': 162}), 83: (1, {'@': 162}), 60: (1, {'@': 162}), 84: (1, {'@': 162}), 85: (1, {'@': 162}), 86: (1, {'@': 162}), 53: (1, {'@': 162}), 62: (1, {'@': 162}), 88: (1, {'@': 162}), 90: (1, {'@': 162}), 28: (1, {'@': 162}), 26: (0, 26), 37: (0, 38), 25: (0, 27), 42: (0, 43), 43: (0, 44), 32: (0, 33), 36: (0, 37), 44: (0, 45), 45: (0, 46), 30: (0, 111), 38: (0, 39), 2: (0, 48), 47: (0, 49), 41: (0, 42), 12: (0, 12)}, 202: {26: (0, 26), 37: (0, 38), 25: (0, 27), 29: (0, 30), 42: (0, 43), 30: (0, 31), 43: (0, 44), 40: (0, 41), 32: (0, 33), 36: (0, 37), 44: (0, 45), 45: (0, 46), 38: (0, 39), 2: (0, 48), 47: (0, 49), 41: (0, 42), 33: (0, 278), 12: (0, 12)}, 203: {66: (1, {'@': 163}), 57: (1, {'@': 163}), 68: (1, {'@': 163}), 69: (1, {'@': 163}), 59: (1, {'@': 163}), 71: (1, {'@': 163}), 72: (1, {'@': 163}), 73: (1, {'@': 163}), 74: (1, {'@': 163}), 75: (1, {'@': 163}), 77: (1, {'@': 163}), 52: (1, {'@': 163}), 78: (1, {'@': 163}), 79: (1, {'@': 163}), 80: (1, {'@': 163}), 81: (1, {'@': 163}), 82: (1, {'@': 163}), 83: (1, {'@': 163}), 60: (1, {'@': 163}), 84: (1, {'@': 163}), 85: (1, {'@': 163}), 53: (1, {'@': 163}), 62: (1, {'@': 163}), 88: (1, {'@': 163}), 90: (1, {'@': 163}), 28: (1, {'@': 163})}, 204: {66: (1, {'@': 164}), 57: (1, {'@': 164}), 52: (1, {'@': 164}), 78: (1, {'@': 164}), 81: (1, {'@': 164}), 68: (1, {'@': 164}), 69: (1, {'@': 164}), 60: (1, {'@': 164}), 59: (1, {'@': 164}), 84: (1, {'@': 164}), 53: (1, {'@': 164}), 62: (1, {'@': 164}), 72: (1, {'@': 164}), 88: (1, {'@': 164}), 73: (1, {'@': 164}), 74: (1, {'@': 164}), 90: (1, {'@': 164})}, 205: {49: (0, 51), 26: (0, 26), 34: (0, 53), 51: (0, 54), 25: (0, 27), 30: (0, 31), 31: (0, 32), 52: (0, 55), 32: (0, 33), 33: (0, 34), 36: (0, 37), 35: (0, 36), 53: (0, 56), 39: (0, 40), 54: (0, 57), 12: (0, 12), 43: (0, 44), 27: (0, 28), 45: (0, 46), 46: (0, 47), 55: (0, 58), 56: (0, 59), 50: (0, 279), 57: (0, 60), 58: (0, 61), 59: (0, 62), 60: (0, 63), 61: (0, 64), 28: (0, 29), 29: (0, 30), 37: (0, 38), 38: (0, 39), 40: (0, 41), 41: (0, 42), 42: (0, 43), 44: (0, 45), 2: (0, 48), 47: (0, 49), 62: (0, 65), 63: (0, 66)}, 206: {26: (0, 26), 37: (0, 38), 25: (0, 27), 29: (0, 30), 42: (0, 43), 30: (0, 31), 43: (0, 44), 40: (0, 41), 32: (0, 33), 36: (0, 37), 33: (0, 34), 44: (0, 45), 45: (0, 46), 38: (0, 39), 2: (0, 48), 35: (0, 280), 47: (0, 49), 41: (0, 42), 12: (0, 12)}, 207: {66: (1, {'@': 165}), 57: (1, {'@': 165}), 68: (1, {'@': 165}), 69: (1, {'@': 165}), 59: (1, {'@': 165}), 71: (1, {'@': 165}), 72: (1, {'@': 165}), 73: (1, {'@': 165}), 74: (1, {'@': 165}), 75: (1, {'@': 165}), 52: (1, {'@': 165}), 78: (1, {'@': 165}), 79: (1, {'@': 165}), 80: (1, {'@': 165}), 81: (1, {'@': 165}), 82: (1, {'@': 165}), 83: (1, {'@': 165}), 60: (1, {'@': 165}), 84: (1, {'@': 165}), 85: (1, {'@': 165}), 53: (1, {'@': 165}), 62: (1, {'@': 165}), 88: (1, {'@': 165}), 90: (1, {'@': 165}), 28: (1, {'@': 165})}, 208: {48: (1, {'@': 107}), 3: (1, {'@': 107}), 52: (1, {'@': 107}), 67: (1, {'@': 107}), 79: (1, {'@': 107}), 11: (1, {'@': 107}), 82: (1, {'@': 107}), 12: (1, {'@': 107}), 83: (1, {'@': 107}), 60: (1, {'@': 107}), 84: (1, {'@': 107}), 85: (1, {'@': 107}), 71: (1, {'@': 107}), 7: (1, {'@': 107}), 87: (1, {'@': 107}), 1: (1, {'@': 107}), 88: (0, 270), 73: (1, {'@': 107}), 75: (1, {'@': 107}), 74: (1, {'@': 107}), 6: (1, {'@': 107}), 0: (1, {'@': 107})}, 209: {67: (0, 223), 88: (0, 281)}, 210: {69: (0, 282)}, 211: {91: (0, 84), 25: (0, 118), 38: (0, 128), 108: (0, 129), 94: (0, 87), 2: (0, 88), 105: (0, 119), 95: (0, 123), 109: (0, 130), 106: (0, 120), 59: (0, 132), 111: (0, 133), 92: (0, 85), 12: (0, 12), 112: (0, 134), 96: (0, 90), 93: (0, 86), 36: (0, 125), 44: (0, 126), 107: (0, 283), 55: (0, 127), 99: (0, 93), 45: (0, 46), 113: (0, 135), 28: (0, 94), 41: (0, 95), 110: (0, 131), 100: (0, 97), 47: (0, 49)}, 212: {91: (0, 84), 25: (0, 118), 38: (0, 128), 108: (0, 129), 94: (0, 87), 2: (0, 88), 105: (0, 119), 95: (0, 123), 109: (0, 130), 106: (0, 120), 59: (0, 132), 111: (0, 133), 92: (0, 85), 12: (0, 12), 112: (0, 134), 96: (0, 90), 93: (0, 86), 36: (0, 125), 44: (0, 126), 55: (0, 127), 99: (0, 93), 45: (0, 46), 113: (0, 135), 28: (0, 94), 41: (0, 95), 107: (0, 284), 110: (0, 131), 100: (0, 97), 47: (0, 49)}, 213: {91: (0, 84), 25: (0, 118), 38: (0, 128), 108: (0, 129), 94: (0, 87), 2: (0, 88), 105: (0, 119), 95: (0, 123), 109: (0, 130), 106: (0, 120), 59: (0, 132), 111: (0, 133), 107: (0, 285), 92: (0, 85), 12: (0, 12), 112: (0, 134), 96: (0, 90), 93: (0, 86), 36: (0, 125), 44: (0, 126), 55: (0, 127), 99: (0, 93), 45: (0, 46), 113: (0, 135), 28: (0, 94), 41: (0, 95), 110: (0, 131), 100: (0, 97), 47: (0, 49)}, 214: {25: (1, {'@': 166}), 66: (1, {'@': 166}), 57: (1, {'@': 166}), 68: (1, {'@': 166}), 69: (1, {'@': 166}), 38: (1, {'@': 166}), 59: (1, {'@': 166}), 70: (1, {'@': 166}), 71: (1, {'@': 166}), 72: (1, {'@': 166}), 73: (1, {'@': 166}), 74: (1, {'@': 166}), 75: (1, {'@': 166}), 26: (1, {'@': 166}), 76: (1, {'@': 166}), 47: (1, {'@': 166}), 45: (1, {'@': 166}), 77: (1, {'@': 166}), 36: (1, {'@': 166}), 52: (1, {'@': 166}), 78: (1, {'@': 166}), 79: (1, {'@': 166}), 80: (1, {'@': 166}), 81: (1, {'@': 166}), 12: (1, {'@': 166}), 82: (1, {'@': 166}), 37: (1, {'@': 166}), 83: (1, {'@': 166}), 60: (1, {'@': 166}), 84: (1, {'@': 166}), 85: (1, {'@': 166}), 86: (1, {'@': 166}), 53: (1, {'@': 166}), 62: (1, {'@': 166}), 88: (1, {'@': 166}), 90: (1, {'@': 166}), 28: (1, {'@': 166})}, 215: {88: (1, {'@': 76}), 91: (0, 84), 92: (0, 85), 93: (0, 86), 94: (0, 87), 2: (0, 88), 95: (0, 89), 96: (0, 90), 98: (0, 92), 97: (0, 286), 99: (0, 93), 45: (0, 46), 28: (0, 94), 41: (0, 95), 25: (0, 96), 100: (0, 97), 12: (0, 12)}, 216: {91: (0, 84), 92: (0, 85), 93: (0, 86), 94: (0, 87), 2: (0, 88), 96: (0, 90), 99: (0, 93), 45: (0, 46), 28: (0, 94), 41: (0, 95), 95: (0, 287), 25: (0, 96), 100: (0, 97), 12: (0, 12)}, 217: {91: (0, 84), 92: (0, 85), 93: (0, 86), 94: (0, 87), 2: (0, 88), 95: (0, 288), 96: (0, 90), 99: (0, 93), 45: (0, 46), 28: (0, 94), 41: (0, 95), 25: (0, 96), 100: (0, 97), 12: (0, 12)}, 218: {91: (0, 84), 92: (0, 85), 93: (0, 86), 94: (0, 87), 2: (0, 88), 96: (0, 90), 95: (0, 289), 99: (0, 93), 45: (0, 46), 28: (0, 94), 41: (0, 95), 25: (0, 96), 100: (0, 97), 12: (0, 12)}, 219: {91: (0, 84), 92: (0, 85), 93: (0, 86), 94: (0, 87), 2: (0, 88), 96: (0, 90), 99: (0, 93), 95: (0, 290), 45: (0, 46), 28: (0, 94), 41: (0, 95), 25: (0, 96), 100: (0, 97), 12: (0, 12)}, 220: {91: (0, 84), 92: (0, 85), 93: (0, 86), 94: (0, 87), 2: (0, 88), 96: (0, 90), 99: (0, 93), 45: (0, 46), 28: (0, 94), 41: (0, 95), 95: (0, 291), 25: (0, 96), 100: (0, 97), 12: (0, 12)}, 221: {91: (0, 84), 92: (0, 85), 93: (0, 86), 94: (0, 87), 2: (0, 88), 96: (0, 90), 99: (0, 93), 45: (0, 46), 28: (0, 94), 95: (0, 292), 41: (0, 95), 25: (0, 96), 100: (0, 97), 12: (0, 12)}, 222: {25: (1, {'@': 167}), 66: (1, {'@': 167}), 57: (1, {'@': 167}), 68: (1, {'@': 167}), 69: (1, {'@': 167}), 38: (1, {'@': 167}), 59: (1, {'@': 167}), 70: (1, {'@': 167}), 71: (1, {'@': 167}), 72: (1, {'@': 167}), 73: (1, {'@': 167}), 74: (1, {'@': 167}), 75: (1, {'@': 167}), 26: (1, {'@': 167}), 76: (1, {'@': 167}), 47: (1, {'@': 167}), 45: (1, {'@': 167}), 77: (1, {'@': 167}), 36: (1, {'@': 167}), 52: (1, {'@': 167}), 78: (1, {'@': 167}), 79: (1, {'@': 167}), 80: (1, {'@': 167}), 81: (1, {'@': 167}), 12: (1, {'@': 167}), 82: (1, {'@': 167}), 37: (1, {'@': 167}), 83: (1, {'@': 167}), 60: (1, {'@': 167}), 84: (1, {'@': 167}), 85: (1, {'@': 167}), 86: (1, {'@': 167}), 53: (1, {'@': 167}), 62: (1, {'@': 167}), 88: (1, {'@': 167}), 90: (1, {'@': 167}), 28: (1, {'@': 167})}, 223: {91: (0, 84), 25: (0, 118), 38: (0, 128), 108: (0, 129), 94: (0, 87), 2: (0, 88), 105: (0, 119), 95: (0, 123), 109: (0, 130), 106: (0, 120), 59: (0, 132), 111: (0, 133), 107: (0, 293), 92: (0, 85), 12: (0, 12), 112: (0, 134), 96: (0, 90), 93: (0, 86), 36: (0, 125), 44: (0, 126), 55: (0, 127), 99: (0, 93), 45: (0, 46), 113: (0, 135), 28: (0, 94), 41: (0, 95), 110: (0, 131), 100: (0, 97), 47: (0, 49)}, 224: {67: (0, 223), 74: (0, 294)}, 225: {69: (0, 295)}, 226: {48: (1, {'@': 168}), 3: (1, {'@': 168}), 7: (1, {'@': 168}), 1: (1, {'@': 168}), 67: (0, 223), 88: (1, {'@': 168}), 73: (1, {'@': 168}), 74: (1, {'@': 168}), 0: (1, {'@': 168}), 6: (1, {'@': 168}), 12: (1, {'@': 168}), 11: (1, {'@': 168})}, 227: {26: (0, 26), 25: (0, 27), 29: (0, 30), 30: (0, 31), 32: (0, 33), 36: (0, 37), 33: (0, 34), 35: (0, 36), 37: (0, 38), 38: (0, 39), 40: (0, 41), 41: (0, 42), 12: (0, 12), 42: (0, 43), 43: (0, 44), 44: (0, 45), 45: (0, 46), 2: (0, 48), 39: (0, 296), 47: (0, 49)}, 228: {66: (1, {'@': 169}), 57: (1, {'@': 169}), 68: (1, {'@': 169}), 69: (1, {'@': 169}), 59: (1, {'@': 169}), 71: (1, {'@': 169}), 72: (1, {'@': 169}), 73: (1, {'@': 169}), 74: (1, {'@': 169}), 75: (1, {'@': 169}), 52: (1, {'@': 169}), 78: (1, {'@': 169}), 79: (1, {'@': 169}), 81: (1, {'@': 169}), 82: (1, {'@': 169}), 83: (1, {'@': 169}), 60: (1, {'@': 169}), 84: (1, {'@': 169}), 85: (1, {'@': 169}), 53: (1, {'@': 169}), 62: (1, {'@': 169}), 88: (1, {'@': 169}), 90: (1, {'@': 169}), 28: (1, {'@': 169})}, 229: {26: (0, 26), 37: (0, 38), 25: (0, 27), 29: (0, 30), 42: (0, 43), 30: (0, 31), 43: (0, 44), 40: (0, 297), 32: (0, 33), 36: (0, 37), 44: (0, 45), 45: (0, 46), 38: (0, 39), 2: (0, 48), 47: (0, 49), 41: (0, 42), 12: (0, 12)}, 230: {66: (1, {'@': 170}), 57: (1, {'@': 170}), 68: (1, {'@': 170}), 69: (1, {'@': 170}), 59: (1, {'@': 170}), 71: (1, {'@': 170}), 72: (1, {'@': 170}), 73: (1, {'@': 170}), 74: (1, {'@': 170}), 75: (1, {'@': 170}), 77: (1, {'@': 170}), 52: (1, {'@': 170}), 78: (1, {'@': 170}), 79: (1, {'@': 170}), 80: (1, {'@': 170}), 81: (1, {'@': 170}), 82: (1, {'@': 170}), 83: (1, {'@': 170}), 60: (1, {'@': 170}), 84: (1, {'@': 170}), 85: (1, {'@': 170}), 86: (1, {'@': 170}), 53: (1, {'@': 170}), 62: (1, {'@': 170}), 88: (1, {'@': 170}), 90: (1, {'@': 170}), 28: (1, {'@': 170})}, 231: {66: (1, {'@': 171}), 78: (1, {'@': 171}), 81: (0, 298), 68: (1, {'@': 171}), 69: (1, {'@': 171}), 84: (1, {'@': 171}), 72: (1, {'@': 171}), 88: (1, {'@': 171}), 73: (1, {'@': 171}), 74: (1, {'@': 171}), 90: (1, {'@': 171})}, 232: {66: (1, {'@': 172}), 78: (1, {'@': 172}), 81: (1, {'@': 172}), 68: (1, {'@': 172}), 69: (1, {'@': 172}), 84: (1, {'@': 172}), 72: (1, {'@': 172}), 88: (1, {'@': 172}), 73: (1, {'@': 172}), 74: (1, {'@': 172}), 90: (1, {'@': 172}), 49: (0, 51), 26: (0, 26), 34: (0, 53), 51: (0, 54), 25: (0, 27), 30: (0, 31), 31: (0, 32), 52: (0, 55), 32: (0, 33), 33: (0, 34), 36: (0, 37), 35: (0, 36), 53: (0, 56), 39: (0, 40), 54: (0, 57), 12: (0, 12), 43: (0, 44), 27: (0, 28), 45: (0, 46), 46: (0, 47), 55: (0, 58), 56: (0, 59), 57: (0, 60), 58: (0, 61), 59: (0, 62), 60: (0, 63), 61: (0, 64), 28: (0, 29), 29: (0, 30), 37: (0, 38), 38: (0, 39), 40: (0, 41), 41: (0, 42), 42: (0, 43), 63: (0, 66), 44: (0, 45), 2: (0, 48), 47: (0, 49), 62: (0, 65), 50: (0, 299)}, 233: {37: (0, 38), 43: (0, 300)}, 234: {82: (0, 301)}, 235: {49: (0, 51), 26: (0, 26), 50: (0, 302), 34: (0, 53), 51: (0, 54), 25: (0, 27), 30: (0, 31), 31: (0, 32), 52: (0, 55), 32: (0, 33), 33: (0, 34), 36: (0, 37), 35: (0, 36), 53: (0, 56), 39: (0, 40), 54: (0, 57), 12: (0, 12), 43: (0, 44), 27: (0, 28), 45: (0, 46), 46: (0, 47), 55: (0, 58), 56: (0, 59), 57: (0, 60), 58: (0, 61), 59: (0, 62), 60: (0, 63), 61: (0, 64), 28: (0, 29), 29: (0, 30), 37: (0, 38), 38: (0, 39), 40: (0, 41), 41: (0, 42), 42: (0, 43), 44: (0, 45), 2: (0, 48), 47: (0, 49), 62: (0, 65), 63: (0, 66)}, 236: {49: (0, 51), 26: (0, 26), 34: (0, 53), 51: (0, 54), 25: (0, 27), 30: (0, 31), 31: (0, 32), 52: (0, 55), 32: (0, 33), 33: (0, 34), 36: (0, 37), 35: (0, 36), 53: (0, 56), 39: (0, 40), 54: (0, 57), 12: (0, 12), 43: (0, 44), 27: (0, 28), 45: (0, 46), 46: (0, 47), 55: (0, 58), 56: (0, 59), 57: (0, 60), 58: (0, 61), 59: (0, 62), 60: (0, 63), 61: (0, 64), 28: (0, 29), 29: (0, 30), 37: (0, 38), 38: (0, 39), 40: (0, 41), 41: (0, 42), 42: (0, 43), 50: (0, 303), 44: (0, 45), 2: (0, 48), 47: (0, 49), 62: (0, 65), 63: (0, 66)}, 237: {72: (0, 304), 127: (0, 305), 128: (0, 306)}, 238: {88: (1, {'@': 173}), 24: (1, {'@': 173}), 84: (1, {'@': 173})}, 239: {12: (0, 12), 2: (0, 307)}, 240: {69: (1, {'@': 174}), 25: (0, 308)}, 241: {48: (1, {'@': 175}), 3: (1, {'@': 175}), 7: (1, {'@': 175}), 1: (1, {'@': 175}), 0: (1, {'@': 175}), 6: (1, {'@': 175}), 12: (1, {'@': 175}), 11: (1, {'@': 175})}, 242: {2: (0, 309), 12: (0, 12)}, 243: {48: (1, {'@': 176}), 3: (1, {'@': 176}), 7: (1, {'@': 176}), 1: (1, {'@': 176}), 0: (1, {'@': 176}), 6: (1, {'@': 176}), 12: (1, {'@': 176}), 11: (1, {'@': 176})}, 244: {2: (0, 310), 12: (0, 12)}, 245: {12: (0, 12), 2: (0, 311)}, 246: {2: (0, 69), 65: (0, 312), 12: (0, 12)}, 247: {2: (0, 313), 12: (0, 12)}, 248: {37: (0, 314), 129: (0, 315)}, 249: {47: (0, 49), 44: (0, 316)}, 250: {2: (0, 160), 12: (0, 12), 119: (0, 317)}, 251: {47: (0, 49), 44: (0, 318)}, 252: {48: (1, {'@': 177}), 3: (1, {'@': 177}), 7: (1, {'@': 177}), 1: (1, {'@': 177}), 0: (1, {'@': 177}), 6: (1, {'@': 177}), 12: (1, {'@': 177}), 11: (1, {'@': 177})}, 253: {2: (0, 160), 119: (0, 319), 12: (0, 12)}, 254: {88: (0, 320)}, 255: {91: (0, 84), 25: (0, 118), 38: (0, 128), 108: (0, 129), 94: (0, 87), 2: (0, 88), 105: (0, 119), 95: (0, 123), 109: (0, 130), 106: (0, 120), 59: (0, 132), 111: (0, 133), 92: (0, 85), 12: (0, 12), 112: (0, 134), 96: (0, 90), 93: (0, 86), 36: (0, 125), 44: (0, 126), 107: (0, 321), 55: (0, 127), 99: (0, 93), 45: (0, 46), 113: (0, 135), 28: (0, 94), 41: (0, 95), 110: (0, 131), 100: (0, 97), 47: (0, 49)}, 256: {45: (0, 46), 28: (0, 94), 41: (0, 95), 94: (0, 87), 92: (0, 322), 2: (0, 184), 25: (0, 96), 100: (0, 97), 12: (0, 12)}, 257: {66: (1, {'@': 178}), 3: (1, {'@': 178}), 67: (1, {'@': 178}), 11: (1, {'@': 178}), 69: (1, {'@': 178}), 71: (1, {'@': 178}), 73: (1, {'@': 178}), 75: (1, {'@': 178}), 74: (1, {'@': 178}), 48: (1, {'@': 178}), 77: (1, {'@': 178}), 52: (1, {'@': 178}), 79: (1, {'@': 178}), 80: (1, {'@': 178}), 12: (1, {'@': 178}), 82: (1, {'@': 178}), 83: (1, {'@': 178}), 60: (1, {'@': 178}), 84: (1, {'@': 178}), 85: (1, {'@': 178}), 7: (1, {'@': 178}), 87: (1, {'@': 178}), 1: (1, {'@': 178}), 88: (1, {'@': 178}), 0: (1, {'@': 178}), 6: (1, {'@': 178}), 28: (1, {'@': 178})}, 258: {92: (0, 85), 94: (0, 87), 2: (0, 184), 96: (0, 90), 93: (0, 323), 45: (0, 46), 28: (0, 94), 41: (0, 95), 25: (0, 96), 100: (0, 97), 12: (0, 12)}, 259: {66: (1, {'@': 179}), 3: (1, {'@': 179}), 67: (1, {'@': 179}), 11: (1, {'@': 179}), 69: (1, {'@': 179}), 71: (1, {'@': 179}), 73: (1, {'@': 179}), 75: (1, {'@': 179}), 74: (1, {'@': 179}), 48: (1, {'@': 179}), 52: (1, {'@': 179}), 79: (1, {'@': 179}), 12: (1, {'@': 179}), 82: (1, {'@': 179}), 83: (1, {'@': 179}), 60: (1, {'@': 179}), 84: (1, {'@': 179}), 85: (1, {'@': 179}), 7: (1, {'@': 179}), 87: (1, {'@': 179}), 1: (1, {'@': 179}), 88: (1, {'@': 179}), 0: (1, {'@': 179}), 6: (1, {'@': 179}), 28: (1, {'@': 179})}, 260: {94: (0, 324), 45: (0, 46), 28: (0, 94), 41: (0, 95), 2: (0, 184), 25: (0, 96), 100: (0, 97), 12: (0, 12)}, 261: {66: (1, {'@': 180}), 3: (1, {'@': 180}), 67: (1, {'@': 180}), 11: (1, {'@': 180}), 69: (1, {'@': 180}), 71: (1, {'@': 180}), 73: (1, {'@': 180}), 75: (1, {'@': 180}), 74: (1, {'@': 180}), 48: (1, {'@': 180}), 24: (1, {'@': 180}), 77: (1, {'@': 180}), 52: (1, {'@': 180}), 79: (1, {'@': 180}), 80: (1, {'@': 180}), 12: (1, {'@': 180}), 82: (1, {'@': 180}), 83: (1, {'@': 180}), 60: (1, {'@': 180}), 84: (1, {'@': 180}), 85: (1, {'@': 180}), 7: (1, {'@': 180}), 86: (1, {'@': 180}), 87: (1, {'@': 180}), 1: (1, {'@': 180}), 88: (1, {'@': 180}), 0: (1, {'@': 180}), 6: (1, {'@': 180}), 28: (1, {'@': 180}), 25: (0, 325)}, 262: {66: (1, {'@': 181}), 3: (1, {'@': 181}), 67: (1, {'@': 181}), 11: (1, {'@': 181}), 69: (1, {'@': 181}), 71: (1, {'@': 181}), 73: (1, {'@': 181}), 75: (1, {'@': 181}), 74: (1, {'@': 181}), 48: (1, {'@': 181}), 77: (1, {'@': 181}), 52: (1, {'@': 181}), 79: (1, {'@': 181}), 80: (1, {'@': 181}), 12: (1, {'@': 181}), 82: (1, {'@': 181}), 83: (1, {'@': 181}), 60: (1, {'@': 181}), 84: (1, {'@': 181}), 85: (1, {'@': 181}), 7: (1, {'@': 181}), 86: (1, {'@': 181}), 87: (1, {'@': 181}), 1: (1, {'@': 181}), 88: (1, {'@': 181}), 0: (1, {'@': 181}), 6: (1, {'@': 181}), 28: (1, {'@': 181}), 24: (0, 174)}, 263: {69: (0, 326), 66: (0, 327)}, 264: {88: (0, 328)}, 265: {45: (0, 46), 92: (0, 85), 28: (0, 94), 96: (0, 329), 41: (0, 95), 94: (0, 87), 2: (0, 184), 25: (0, 96), 100: (0, 97), 12: (0, 12)}, 266: {66: (1, {'@': 182}), 3: (1, {'@': 182}), 67: (1, {'@': 182}), 11: (1, {'@': 182}), 69: (1, {'@': 182}), 71: (1, {'@': 182}), 73: (1, {'@': 182}), 75: (1, {'@': 182}), 74: (1, {'@': 182}), 48: (1, {'@': 182}), 52: (1, {'@': 182}), 79: (1, {'@': 182}), 80: (1, {'@': 182}), 12: (1, {'@': 182}), 82: (1, {'@': 182}), 83: (1, {'@': 182}), 60: (1, {'@': 182}), 84: (1, {'@': 182}), 85: (1, {'@': 182}), 7: (1, {'@': 182}), 87: (1, {'@': 182}), 1: (1, {'@': 182}), 88: (1, {'@': 182}), 0: (1, {'@': 182}), 6: (1, {'@': 182}), 28: (1, {'@': 182})}, 267: {82: (0, 330)}, 268: {91: (0, 84), 92: (0, 85), 93: (0, 86), 94: (0, 87), 2: (0, 88), 95: (0, 89), 96: (0, 90), 98: (0, 331), 99: (0, 93), 45: (0, 46), 28: (0, 94), 41: (0, 95), 25: (0, 96), 100: (0, 97), 12: (0, 12)}, 269: {88: (1, {'@': 183}), 84: (1, {'@': 183})}, 270: {66: (1, {'@': 184}), 3: (1, {'@': 184}), 67: (1, {'@': 184}), 11: (1, {'@': 184}), 69: (1, {'@': 184}), 71: (1, {'@': 184}), 73: (1, {'@': 184}), 75: (1, {'@': 184}), 74: (1, {'@': 184}), 48: (1, {'@': 184}), 24: (1, {'@': 184}), 77: (1, {'@': 184}), 52: (1, {'@': 184}), 79: (1, {'@': 184}), 80: (1, {'@': 184}), 12: (1, {'@': 184}), 82: (1, {'@': 184}), 83: (1, {'@': 184}), 60: (1, {'@': 184}), 84: (1, {'@': 184}), 85: (1, {'@': 184}), 7: (1, {'@': 184}), 86: (1, {'@': 184}), 87: (1, {'@': 184}), 1: (1, {'@': 184}), 88: (1, {'@': 184}), 0: (1, {'@': 184}), 6: (1, {'@': 184}), 28: (1, {'@': 184})}, 271: {25: (1, {'@': 185}), 66: (1, {'@': 185}), 57: (1, {'@': 185}), 68: (1, {'@': 185}), 69: (1, {'@': 185}), 38: (1, {'@': 185}), 59: (1, {'@': 185}), 70: (1, {'@': 185}), 71: (1, {'@': 185}), 72: (1, {'@': 185}), 73: (1, {'@': 185}), 74: (1, {'@': 185}), 75: (1, {'@': 185}), 26: (1, {'@': 185}), 76: (1, {'@': 185}), 47: (1, {'@': 185}), 45: (1, {'@': 185}), 77: (1, {'@': 185}), 36: (1, {'@': 185}), 52: (1, {'@': 185}), 78: (1, {'@': 185}), 79: (1, {'@': 185}), 80: (1, {'@': 185}), 81: (1, {'@': 185}), 12: (1, {'@': 185}), 82: (1, {'@': 185}), 37: (1, {'@': 185}), 83: (1, {'@': 185}), 60: (1, {'@': 185}), 84: (1, {'@': 185}), 85: (1, {'@': 185}), 86: (1, {'@': 185}), 53: (1, {'@': 185}), 62: (1, {'@': 185}), 88: (1, {'@': 185}), 90: (1, {'@': 185}), 28: (1, {'@': 185})}, 272: {49: (0, 51), 26: (0, 26), 34: (0, 53), 51: (0, 54), 25: (0, 27), 30: (0, 31), 31: (0, 32), 52: (0, 55), 32: (0, 33), 33: (0, 34), 36: (0, 37), 35: (0, 36), 53: (0, 56), 39: (0, 40), 54: (0, 57), 12: (0, 12), 43: (0, 44), 27: (0, 28), 45: (0, 46), 46: (0, 47), 55: (0, 58), 56: (0, 59), 57: (0, 60), 58: (0, 61), 59: (0, 62), 60: (0, 63), 61: (0, 64), 28: (0, 29), 29: (0, 30), 50: (0, 332), 37: (0, 38), 38: (0, 39), 40: (0, 41), 41: (0, 42), 42: (0, 43), 44: (0, 45), 2: (0, 48), 47: (0, 49), 62: (0, 65), 63: (0, 66)}, 273: {84: (1, {'@': 186}), 66: (1, {'@': 186})}, 274: {49: (0, 51), 26: (0, 26), 34: (0, 53), 51: (0, 54), 25: (0, 27), 30: (0, 31), 31: (0, 32), 52: (0, 55), 32: (0, 33), 33: (0, 34), 36: (0, 37), 35: (0, 36), 53: (0, 56), 39: (0, 40), 54: (0, 57), 12: (0, 12), 43: (0, 44), 27: (0, 28), 45: (0, 46), 46: (0, 47), 55: (0, 58), 56: (0, 59), 57: (0, 60), 58: (0, 61), 59: (0, 62), 60: (0, 63), 50: (0, 333), 61: (0, 64), 28: (0, 29), 29: (0, 30), 69: (0, 334), 37: (0, 38), 38: (0, 39), 40: (0, 41), 41: (0, 42), 42: (0, 43), 44: (0, 45), 2: (0, 48), 47: (0, 49), 62: (0, 65), 63: (0, 66)}, 275: {25: (1, {'@': 187}), 63: (1, {'@': 187}), 45: (1, {'@': 187}), 57: (1, {'@': 187}), 36: (1, {'@': 187}), 52: (1, {'@': 187}), 12: (1, {'@': 187}), 37: (1, {'@': 187}), 51: (1, {'@': 187}), 38: (1, {'@': 187}), 56: (1, {'@': 187}), 60: (1, {'@': 187}), 59: (1, {'@': 187}), 49: (1, {'@': 187}), 53: (1, {'@': 187}), 55: (1, {'@': 187}), 62: (1, {'@': 187}), 88: (1, {'@': 187}), 26: (1, {'@': 187}), 28: (1, {'@': 187}), 47: (1, {'@': 187})}, 276: {25: (1, {'@': 188}), 66: (1, {'@': 188}), 57: (1, {'@': 188}), 68: (1, {'@': 188}), 69: (1, {'@': 188}), 38: (1, {'@': 188}), 59: (1, {'@': 188}), 70: (1, {'@': 188}), 71: (1, {'@': 188}), 72: (1, {'@': 188}), 73: (1, {'@': 188}), 74: (1, {'@': 188}), 75: (1, {'@': 188}), 26: (1, {'@': 188}), 76: (1, {'@': 188}), 47: (1, {'@': 188}), 45: (1, {'@': 188}), 77: (1, {'@': 188}), 36: (1, {'@': 188}), 52: (1, {'@': 188}), 78: (1, {'@': 188}), 79: (1, {'@': 188}), 80: (1, {'@': 188}), 81: (1, {'@': 188}), 12: (1, {'@': 188}), 82: (1, {'@': 188}), 37: (1, {'@': 188}), 83: (1, {'@': 188}), 60: (1, {'@': 188}), 84: (1, {'@': 188}), 85: (1, {'@': 188}), 86: (1, {'@': 188}), 53: (1, {'@': 188}), 62: (1, {'@': 188}), 88: (1, {'@': 188}), 90: (1, {'@': 188}), 28: (1, {'@': 188})}, 277: {66: (1, {'@': 189}), 57: (1, {'@': 189}), 68: (1, {'@': 189}), 69: (1, {'@': 189}), 59: (1, {'@': 189}), 70: (1, {'@': 189}), 71: (1, {'@': 189}), 72: (1, {'@': 189}), 73: (1, {'@': 189}), 74: (1, {'@': 189}), 75: (1, {'@': 189}), 77: (1, {'@': 189}), 52: (1, {'@': 189}), 78: (1, {'@': 189}), 79: (1, {'@': 189}), 80: (1, {'@': 189}), 81: (1, {'@': 189}), 82: (1, {'@': 189}), 83: (1, {'@': 189}), 60: (1, {'@': 189}), 84: (1, {'@': 189}), 85: (1, {'@': 189}), 86: (1, {'@': 189}), 53: (1, {'@': 189}), 62: (1, {'@': 189}), 88: (1, {'@': 189}), 90: (1, {'@': 189}), 28: (1, {'@': 189}), 26: (0, 26), 37: (0, 38), 25: (0, 27), 42: (0, 43), 43: (0, 44), 32: (0, 33), 36: (0, 37), 44: (0, 45), 45: (0, 46), 30: (0, 111), 38: (0, 39), 2: (0, 48), 47: (0, 49), 41: (0, 42), 12: (0, 12)}, 278: {66: (1, {'@': 190}), 57: (1, {'@': 190}), 68: (1, {'@': 190}), 69: (1, {'@': 190}), 59: (1, {'@': 190}), 71: (1, {'@': 190}), 72: (1, {'@': 190}), 73: (1, {'@': 190}), 74: (1, {'@': 190}), 75: (1, {'@': 190}), 77: (1, {'@': 190}), 52: (1, {'@': 190}), 78: (1, {'@': 190}), 79: (1, {'@': 190}), 80: (1, {'@': 190}), 81: (1, {'@': 190}), 82: (1, {'@': 190}), 83: (1, {'@': 190}), 60: (1, {'@': 190}), 84: (1, {'@': 190}), 85: (1, {'@': 190}), 53: (1, {'@': 190}), 62: (1, {'@': 190}), 88: (1, {'@': 190}), 90: (1, {'@': 190}), 28: (1, {'@': 190})}, 279: {69: (0, 335)}, 280: {66: (1, {'@': 191}), 57: (1, {'@': 191}), 68: (1, {'@': 191}), 69: (1, {'@': 191}), 59: (1, {'@': 191}), 71: (1, {'@': 191}), 72: (1, {'@': 191}), 73: (1, {'@': 191}), 74: (1, {'@': 191}), 75: (1, {'@': 191}), 52: (1, {'@': 191}), 78: (1, {'@': 191}), 79: (1, {'@': 191}), 80: (1, {'@': 191}), 81: (1, {'@': 191}), 82: (1, {'@': 191}), 83: (1, {'@': 191}), 60: (1, {'@': 191}), 84: (1, {'@': 191}), 85: (1, {'@': 191}), 53: (1, {'@': 191}), 62: (1, {'@': 191}), 88: (1, {'@': 191}), 90: (1, {'@': 191}), 28: (1, {'@': 191})}, 281: {48: (1, {'@': 192}), 3: (1, {'@': 192}), 52: (1, {'@': 192}), 67: (1, {'@': 192}), 11: (1, {'@': 192}), 12: (1, {'@': 192}), 60: (1, {'@': 192}), 7: (1, {'@': 192}), 87: (1, {'@': 192}), 1: (1, {'@': 192}), 88: (1, {'@': 192}), 73: (1, {'@': 192}), 74: (1, {'@': 192}), 0: (1, {'@': 192}), 6: (1, {'@': 192})}, 282: {91: (0, 84), 25: (0, 118), 38: (0, 128), 108: (0, 129), 94: (0, 87), 2: (0, 88), 105: (0, 119), 95: (0, 123), 109: (0, 130), 106: (0, 120), 59: (0, 132), 111: (0, 133), 92: (0, 85), 12: (0, 12), 112: (0, 134), 96: (0, 90), 107: (0, 336), 93: (0, 86), 36: (0, 125), 44: (0, 126), 55: (0, 127), 99: (0, 93), 45: (0, 46), 113: (0, 135), 28: (0, 94), 41: (0, 95), 110: (0, 131), 100: (0, 97), 47: (0, 49)}, 283: {48: (1, {'@': 193}), 3: (1, {'@': 193}), 7: (1, {'@': 193}), 1: (1, {'@': 193}), 67: (0, 223), 88: (1, {'@': 193}), 73: (1, {'@': 193}), 74: (1, {'@': 193}), 0: (1, {'@': 193}), 6: (1, {'@': 193}), 12: (1, {'@': 193}), 11: (1, {'@': 193})}, 284: {48: (1, {'@': 194}), 3: (1, {'@': 194}), 7: (1, {'@': 194}), 1: (1, {'@': 194}), 67: (0, 223), 88: (1, {'@': 194}), 73: (1, {'@': 194}), 74: (1, {'@': 194}), 0: (1, {'@': 194}), 6: (1, {'@': 194}), 12: (1, {'@': 194}), 11: (1, {'@': 194})}, 285: {48: (1, {'@': 195}), 3: (1, {'@': 195}), 7: (1, {'@': 195}), 1: (1, {'@': 195}), 67: (0, 223), 88: (1, {'@': 195}), 73: (1, {'@': 195}), 74: (1, {'@': 195}), 0: (1, {'@': 195}), 6: (1, {'@': 195}), 12: (1, {'@': 195}), 11: (1, {'@': 195})}, 286: {88: (0, 337)}, 287: {48: (1, {'@': 196}), 3: (1, {'@': 196}), 52: (1, {'@': 196}), 67: (1, {'@': 196}), 11: (1, {'@': 196}), 12: (1, {'@': 196}), 60: (1, {'@': 196}), 7: (1, {'@': 196}), 87: (1, {'@': 196}), 1: (1, {'@': 196}), 88: (1, {'@': 196}), 73: (1, {'@': 196}), 74: (1, {'@': 196}), 0: (1, {'@': 196}), 6: (1, {'@': 196})}, 288: {48: (1, {'@': 197}), 3: (1, {'@': 197}), 52: (1, {'@': 197}), 67: (1, {'@': 197}), 11: (1, {'@': 197}), 12: (1, {'@': 197}), 60: (1, {'@': 197}), 7: (1, {'@': 197}), 87: (1, {'@': 197}), 1: (1, {'@': 197}), 88: (1, {'@': 197}), 73: (1, {'@': 197}), 74: (1, {'@': 197}), 0: (1, {'@': 197}), 6: (1, {'@': 197})}, 289: {48: (1, {'@': 198}), 3: (1, {'@': 198}), 52: (1, {'@': 198}), 67: (1, {'@': 198}), 11: (1, {'@': 198}), 12: (1, {'@': 198}), 60: (1, {'@': 198}), 7: (1, {'@': 198}), 87: (1, {'@': 198}), 1: (1, {'@': 198}), 88: (1, {'@': 198}), 73: (1, {'@': 198}), 74: (1, {'@': 198}), 0: (1, {'@': 198}), 6: (1, {'@': 198})}, 290: {48: (1, {'@': 199}), 3: (1, {'@': 199}), 52: (1, {'@': 199}), 67: (1, {'@': 199}), 11: (1, {'@': 199}), 12: (1, {'@': 199}), 60: (1, {'@': 199}), 7: (1, {'@': 199}), 87: (1, {'@': 199}), 1: (1, {'@': 199}), 88: (1, {'@': 199}), 73: (1, {'@': 199}), 74: (1, {'@': 199}), 0: (1, {'@': 199}), 6: (1, {'@': 199})}, 291: {48: (1, {'@': 200}), 3: (1, {'@': 200}), 52: (1, {'@': 200}), 67: (1, {'@': 200}), 11: (1, {'@': 200}), 12: (1, {'@': 200}), 60: (1, {'@': 200}), 7: (1, {'@': 200}), 87: (1, {'@': 200}), 1: (1, {'@': 200}), 88: (1, {'@': 200}), 73: (1, {'@': 200}), 74: (1, {'@': 200}), 0: (1, {'@': 200}), 6: (1, {'@': 200})}, 292: {48: (1, {'@': 201}), 3: (1, {'@': 201}), 52: (1, {'@': 201}), 67: (1, {'@': 201}), 11: (1, {'@': 201}), 12: (1, {'@': 201}), 60: (1, {'@': 201}), 7: (1, {'@': 201}), 87: (1, {'@': 201}), 1: (1, {'@': 201}), 88: (1, {'@': 201}), 73: (1, {'@': 201}), 74: (1, {'@': 201}), 0: (1, {'@': 201}), 6: (1, {'@': 201})}, 293: {48: (1, {'@': 202}), 3: (1, {'@': 202}), 7: (1, {'@': 202}), 1: (1, {'@': 202}), 67: (0, 223), 88: (1, {'@': 202}), 73: (1, {'@': 202}), 74: (1, {'@': 202}), 0: (1, {'@': 202}), 6: (1, {'@': 202}), 12: (1, {'@': 202}), 11: (1, {'@': 202})}, 294: {91: (0, 84), 25: (0, 118), 38: (0, 128), 108: (0, 129), 107: (0, 338), 94: (0, 87), 2: (0, 88), 105: (0, 119), 95: (0, 123), 109: (0, 130), 106: (0, 120), 59: (0, 132), 111: (0, 133), 92: (0, 85), 12: (0, 12), 112: (0, 134), 96: (0, 90), 93: (0, 86), 36: (0, 125), 44: (0, 126), 55: (0, 127), 99: (0, 93), 45: (0, 46), 113: (0, 135), 28: (0, 94), 41: (0, 95), 110: (0, 131), 100: (0, 97), 47: (0, 49)}, 295: {91: (0, 84), 25: (0, 118), 38: (0, 128), 108: (0, 129), 94: (0, 87), 2: (0, 88), 105: (0, 119), 95: (0, 123), 109: (0, 130), 106: (0, 120), 59: (0, 132), 111: (0, 133), 92: (0, 85), 12: (0, 12), 112: (0, 134), 96: (0, 90), 93: (0, 86), 36: (0, 125), 107: (0, 339), 44: (0, 126), 55: (0, 127), 99: (0, 93), 45: (0, 46), 113: (0, 135), 28: (0, 94), 41: (0, 95), 110: (0, 131), 100: (0, 97), 47: (0, 49)}, 296: {66: (1, {'@': 203}), 57: (1, {'@': 203}), 68: (1, {'@': 203}), 69: (1, {'@': 203}), 59: (1, {'@': 203}), 71: (1, {'@': 203}), 72: (1, {'@': 203}), 73: (1, {'@': 203}), 74: (1, {'@': 203}), 75: (1, {'@': 203}), 52: (1, {'@': 203}), 78: (1, {'@': 203}), 79: (1, {'@': 203}), 81: (1, {'@': 203}), 82: (1, {'@': 203}), 83: (1, {'@': 203}), 60: (1, {'@': 203}), 84: (1, {'@': 203}), 85: (1, {'@': 203}), 53: (1, {'@': 203}), 62: (1, {'@': 203}), 88: (1, {'@': 203}), 90: (1, {'@': 203}), 28: (1, {'@': 203})}, 297: {66: (1, {'@': 204}), 57: (1, {'@': 204}), 68: (1, {'@': 204}), 69: (1, {'@': 204}), 59: (1, {'@': 204}), 71: (1, {'@': 204}), 72: (1, {'@': 204}), 73: (1, {'@': 204}), 74: (1, {'@': 204}), 75: (1, {'@': 204}), 77: (1, {'@': 204}), 52: (1, {'@': 204}), 78: (1, {'@': 204}), 79: (1, {'@': 204}), 80: (1, {'@': 204}), 81: (1, {'@': 204}), 82: (1, {'@': 204}), 83: (1, {'@': 204}), 60: (1, {'@': 204}), 84: (1, {'@': 204}), 85: (1, {'@': 204}), 86: (1, {'@': 204}), 53: (1, {'@': 204}), 62: (1, {'@': 204}), 88: (1, {'@': 204}), 90: (1, {'@': 204}), 28: (1, {'@': 204})}, 298: {66: (1, {'@': 205}), 78: (1, {'@': 205}), 81: (1, {'@': 205}), 68: (1, {'@': 205}), 69: (1, {'@': 205}), 84: (1, {'@': 205}), 72: (1, {'@': 205}), 88: (1, {'@': 205}), 73: (1, {'@': 205}), 74: (1, {'@': 205}), 90: (1, {'@': 205}), 49: (0, 51), 26: (0, 26), 34: (0, 53), 51: (0, 54), 25: (0, 27), 30: (0, 31), 31: (0, 32), 52: (0, 55), 32: (0, 33), 33: (0, 34), 36: (0, 37), 35: (0, 36), 53: (0, 56), 39: (0, 40), 54: (0, 57), 12: (0, 12), 50: (0, 340), 43: (0, 44), 27: (0, 28), 45: (0, 46), 46: (0, 47), 55: (0, 58), 56: (0, 59), 57: (0, 60), 58: (0, 61), 59: (0, 62), 60: (0, 63), 61: (0, 64), 28: (0, 29), 29: (0, 30), 37: (0, 38), 38: (0, 39), 40: (0, 41), 41: (0, 42), 42: (0, 43), 44: (0, 45), 2: (0, 48), 47: (0, 49), 62: (0, 65), 63: (0, 66)}, 299: {66: (1, {'@': 206}), 78: (1, {'@': 206}), 81: (1, {'@': 206}), 68: (1, {'@': 206}), 69: (1, {'@': 206}), 84: (1, {'@': 206}), 72: (1, {'@': 206}), 88: (1, {'@': 206}), 73: (1, {'@': 206}), 74: (1, {'@': 206}), 90: (1, {'@': 206})}, 300: {78: (0, 341)}, 301: {49: (0, 51), 26: (0, 26), 34: (0, 53), 51: (0, 54), 25: (0, 27), 30: (0, 31), 31: (0, 32), 52: (0, 55), 32: (0, 33), 33: (0, 34), 36: (0, 37), 35: (0, 36), 53: (0, 56), 39: (0, 40), 54: (0, 57), 12: (0, 12), 50: (0, 342), 43: (0, 44), 27: (0, 28), 45: (0, 46), 46: (0, 47), 55: (0, 58), 56: (0, 59), 57: (0, 60), 58: (0, 61), 59: (0, 62), 60: (0, 63), 61: (0, 64), 28: (0, 29), 29: (0, 30), 37: (0, 38), 38: (0, 39), 40: (0, 41), 41: (0, 42), 42: (0, 43), 44: (0, 45), 2: (0, 48), 47: (0, 49), 62: (0, 65), 63: (0, 66)}, 302: {73: (0, 343)}, 303: {66: (1, {'@': 207}), 78: (1, {'@': 207}), 81: (1, {'@': 207}), 68: (1, {'@': 207}), 69: (1, {'@': 207}), 84: (1, {'@': 207}), 72: (1, {'@': 207}), 88: (1, {'@': 207}), 73: (1, {'@': 207}), 74: (1, {'@': 207}), 90: (1, {'@': 207})}, 304: {45: (0, 46), 130: (0, 344), 2: (0, 345), 26: (0, 346), 25: (0, 347), 41: (0, 348), 47: (0, 49), 12: (0, 12), 44: (0, 349)}, 305: {72: (1, {'@': 208}), 90: (1, {'@': 208})}, 306: {127: (0, 350), 72: (0, 304), 90: (0, 351)}, 307: {88: (1, {'@': 209}), 24: (1, {'@': 209}), 84: (1, {'@': 209})}, 308: {2: (0, 69), 12: (0, 12), 65: (0, 352)}, 309: {88: (0, 353)}, 310: {88: (0, 354)}, 311: {88: (0, 355)}, 312: {88: (0, 356)}, 313: {88: (1, {'@': 210}), 84: (1, {'@': 210}), 69: (1, {'@': 210}), 25: (0, 357)}, 314: {48: (0, 358), 131: (0, 359), 44: (0, 360), 47: (0, 49)}, 315: {88: (0, 361)}, 316: {88: (0, 362)}, 317: {84: (0, 363)}, 318: {84: (0, 364)}, 319: {84: (0, 365)}, 320: {53: (0, 366)}, 321: {48: (1, {'@': 211}), 3: (1, {'@': 211}), 7: (1, {'@': 211}), 1: (1, {'@': 211}), 0: (1, {'@': 211}), 6: (1, {'@': 211}), 12: (1, {'@': 211}), 11: (1, {'@': 211}), 67: (0, 223)}, 322: {66: (1, {'@': 212}), 3: (1, {'@': 212}), 67: (1, {'@': 212}), 11: (1, {'@': 212}), 69: (1, {'@': 212}), 71: (1, {'@': 212}), 73: (1, {'@': 212}), 75: (1, {'@': 212}), 74: (1, {'@': 212}), 48: (1, {'@': 212}), 77: (1, {'@': 212}), 52: (1, {'@': 212}), 79: (1, {'@': 212}), 80: (1, {'@': 212}), 12: (1, {'@': 212}), 82: (1, {'@': 212}), 83: (1, {'@': 212}), 60: (1, {'@': 212}), 84: (1, {'@': 212}), 85: (1, {'@': 212}), 7: (1, {'@': 212}), 87: (1, {'@': 212}), 1: (1, {'@': 212}), 88: (1, {'@': 212}), 0: (1, {'@': 212}), 6: (1, {'@': 212}), 28: (1, {'@': 212})}, 323: {66: (1, {'@': 213}), 3: (1, {'@': 213}), 67: (1, {'@': 213}), 11: (1, {'@': 213}), 69: (1, {'@': 213}), 71: (1, {'@': 213}), 73: (1, {'@': 213}), 75: (1, {'@': 213}), 74: (1, {'@': 213}), 48: (1, {'@': 213}), 52: (1, {'@': 213}), 79: (1, {'@': 213}), 12: (1, {'@': 213}), 82: (1, {'@': 213}), 83: (1, {'@': 213}), 60: (1, {'@': 213}), 84: (1, {'@': 213}), 85: (1, {'@': 213}), 7: (1, {'@': 213}), 87: (1, {'@': 213}), 1: (1, {'@': 213}), 88: (1, {'@': 213}), 0: (1, {'@': 213}), 6: (1, {'@': 213}), 28: (1, {'@': 213})}, 324: {66: (1, {'@': 214}), 3: (1, {'@': 214}), 67: (1, {'@': 214}), 11: (1, {'@': 214}), 69: (1, {'@': 214}), 71: (1, {'@': 214}), 73: (1, {'@': 214}), 75: (1, {'@': 214}), 74: (1, {'@': 214}), 48: (1, {'@': 214}), 77: (1, {'@': 214}), 52: (1, {'@': 214}), 79: (1, {'@': 214}), 80: (1, {'@': 214}), 12: (1, {'@': 214}), 82: (1, {'@': 214}), 83: (1, {'@': 214}), 60: (1, {'@': 214}), 84: (1, {'@': 214}), 85: (1, {'@': 214}), 7: (1, {'@': 214}), 86: (1, {'@': 214}), 87: (1, {'@': 214}), 1: (1, {'@': 214}), 88: (1, {'@': 214}), 0: (1, {'@': 214}), 6: (1, {'@': 214}), 28: (1, {'@': 214}), 24: (0, 174)}, 325: {88: (1, {'@': 76}), 91: (0, 84), 92: (0, 85), 93: (0, 86), 94: (0, 87), 2: (0, 88), 95: (0, 89), 97: (0, 367), 96: (0, 90), 98: (0, 92), 99: (0, 93), 45: (0, 46), 28: (0, 94), 41: (0, 95), 25: (0, 96), 100: (0, 97), 12: (0, 12)}, 326: {69: (0, 368)}, 327: {48: (1, {'@': 215}), 3: (1, {'@': 215}), 52: (1, {'@': 215}), 67: (1, {'@': 215}), 79: (1, {'@': 215}), 11: (1, {'@': 215}), 82: (1, {'@': 215}), 12: (1, {'@': 215}), 83: (1, {'@': 215}), 60: (1, {'@': 215}), 84: (1, {'@': 215}), 85: (1, {'@': 215}), 71: (1, {'@': 215}), 7: (1, {'@': 215}), 87: (1, {'@': 215}), 1: (1, {'@': 215}), 88: (1, {'@': 215}), 73: (1, {'@': 215}), 75: (1, {'@': 215}), 74: (1, {'@': 215}), 6: (1, {'@': 215}), 0: (1, {'@': 215})}, 328: {66: (1, {'@': 216}), 3: (1, {'@': 216}), 67: (1, {'@': 216}), 11: (1, {'@': 216}), 69: (1, {'@': 216}), 71: (1, {'@': 216}), 73: (1, {'@': 216}), 75: (1, {'@': 216}), 74: (1, {'@': 216}), 48: (1, {'@': 216}), 24: (1, {'@': 216}), 77: (1, {'@': 216}), 52: (1, {'@': 216}), 79: (1, {'@': 216}), 80: (1, {'@': 216}), 12: (1, {'@': 216}), 82: (1, {'@': 216}), 83: (1, {'@': 216}), 60: (1, {'@': 216}), 84: (1, {'@': 216}), 85: (1, {'@': 216}), 7: (1, {'@': 216}), 86: (1, {'@': 216}), 87: (1, {'@': 216}), 1: (1, {'@': 216}), 88: (1, {'@': 216}), 0: (1, {'@': 216}), 6: (1, {'@': 216}), 28: (1, {'@': 216})}, 329: {66: (1, {'@': 217}), 3: (1, {'@': 217}), 67: (1, {'@': 217}), 11: (1, {'@': 217}), 69: (1, {'@': 217}), 71: (1, {'@': 217}), 73: (1, {'@': 217}), 75: (1, {'@': 217}), 74: (1, {'@': 217}), 48: (1, {'@': 217}), 52: (1, {'@': 217}), 79: (1, {'@': 217}), 80: (1, {'@': 217}), 12: (1, {'@': 217}), 82: (1, {'@': 217}), 83: (1, {'@': 217}), 60: (1, {'@': 217}), 84: (1, {'@': 217}), 85: (1, {'@': 217}), 7: (1, {'@': 217}), 87: (1, {'@': 217}), 1: (1, {'@': 217}), 88: (1, {'@': 217}), 0: (1, {'@': 217}), 6: (1, {'@': 217}), 28: (1, {'@': 217})}, 330: {91: (0, 84), 25: (0, 118), 38: (0, 128), 108: (0, 129), 94: (0, 87), 2: (0, 88), 105: (0, 119), 95: (0, 123), 109: (0, 130), 106: (0, 120), 59: (0, 132), 111: (0, 133), 92: (0, 85), 12: (0, 12), 112: (0, 134), 96: (0, 90), 93: (0, 86), 36: (0, 125), 107: (0, 369), 44: (0, 126), 55: (0, 127), 99: (0, 93), 45: (0, 46), 113: (0, 135), 28: (0, 94), 41: (0, 95), 110: (0, 131), 100: (0, 97), 47: (0, 49)}, 331: {88: (1, {'@': 218}), 84: (1, {'@': 218})}, 332: {84: (1, {'@': 219}), 66: (1, {'@': 219})}, 333: {66: (0, 370)}, 334: {49: (0, 51), 26: (0, 26), 34: (0, 53), 51: (0, 54), 25: (0, 27), 30: (0, 31), 31: (0, 32), 52: (0, 55), 32: (0, 33), 33: (0, 34), 36: (0, 37), 35: (0, 36), 53: (0, 56), 39: (0, 40), 54: (0, 57), 12: (0, 12), 47: (0, 49), 43: (0, 44), 27: (0, 28), 45: (0, 46), 46: (0, 47), 55: (0, 58), 56: (0, 59), 57: (0, 60), 58: (0, 61), 59: (0, 62), 60: (0, 63), 61: (0, 64), 28: (0, 29), 29: (0, 30), 37: (0, 38), 38: (0, 39), 40: (0, 41), 41: (0, 42), 42: (0, 43), 44: (0, 45), 2: (0, 48), 50: (0, 371), 62: (0, 65), 63: (0, 66)}, 335: {48: (1, {'@': 220}), 3: (1, {'@': 220}), 7: (1, {'@': 220}), 1: (1, {'@': 220}), 0: (1, {'@': 220}), 6: (1, {'@': 220}), 12: (1, {'@': 220}), 11: (1, {'@': 220})}, 336: {48: (1, {'@': 221}), 3: (1, {'@': 221}), 7: (1, {'@': 221}), 1: (1, {'@': 221}), 67: (0, 223), 88: (1, {'@': 221}), 73: (1, {'@': 221}), 74: (1, {'@': 221}), 0: (1, {'@': 221}), 6: (1, {'@': 221}), 12: (1, {'@': 221}), 11: (1, {'@': 221})}, 337: {66: (1, {'@': 216}), 3: (1, {'@': 216}), 67: (1, {'@': 216}), 11: (1, {'@': 216}), 69: (1, {'@': 216}), 71: (1, {'@': 216}), 73: (1, {'@': 216}), 75: (1, {'@': 216}), 74: (1, {'@': 216}), 48: (1, {'@': 216}), 24: (1, {'@': 216}), 77: (1, {'@': 216}), 52: (1, {'@': 216}), 79: (1, {'@': 216}), 80: (1, {'@': 216}), 12: (1, {'@': 216}), 82: (1, {'@': 216}), 83: (1, {'@': 216}), 60: (1, {'@': 216}), 84: (1, {'@': 216}), 85: (1, {'@': 216}), 7: (1, {'@': 216}), 86: (1, {'@': 216}), 87: (1, {'@': 216}), 1: (1, {'@': 216}), 88: (1, {'@': 216}), 0: (1, {'@': 216}), 6: (1, {'@': 216}), 28: (1, {'@': 216}), 53: (0, 267)}, 338: {48: (1, {'@': 222}), 3: (1, {'@': 222}), 7: (1, {'@': 222}), 1: (1, {'@': 222}), 67: (0, 223), 88: (1, {'@': 222}), 73: (0, 372), 74: (1, {'@': 222}), 0: (1, {'@': 222}), 6: (1, {'@': 222}), 12: (1, {'@': 222}), 11: (1, {'@': 222})}, 339: {48: (1, {'@': 223}), 3: (1, {'@': 223}), 7: (1, {'@': 223}), 1: (1, {'@': 223}), 67: (0, 223), 88: (1, {'@': 223}), 73: (1, {'@': 223}), 74: (1, {'@': 223}), 0: (1, {'@': 223}), 6: (1, {'@': 223}), 12: (1, {'@': 223}), 11: (1, {'@': 223})}, 340: {66: (1, {'@': 224}), 78: (1, {'@': 224}), 81: (1, {'@': 224}), 68: (1, {'@': 224}), 69: (1, {'@': 224}), 84: (1, {'@': 224}), 72: (1, {'@': 224}), 88: (1, {'@': 224}), 73: (1, {'@': 224}), 74: (1, {'@': 224}), 90: (1, {'@': 224})}, 341: {49: (0, 51), 26: (0, 26), 34: (0, 53), 51: (0, 54), 25: (0, 27), 30: (0, 31), 31: (0, 32), 52: (0, 55), 32: (0, 33), 33: (0, 34), 36: (0, 37), 35: (0, 36), 53: (0, 56), 39: (0, 40), 54: (0, 57), 12: (0, 12), 43: (0, 44), 27: (0, 28), 45: (0, 46), 46: (0, 47), 55: (0, 58), 56: (0, 59), 57: (0, 60), 58: (0, 61), 59: (0, 62), 60: (0, 63), 61: (0, 64), 28: (0, 29), 29: (0, 30), 37: (0, 38), 38: (0, 39), 40: (0, 41), 41: (0, 42), 42: (0, 43), 44: (0, 45), 2: (0, 48), 47: (0, 49), 62: (0, 65), 50: (0, 373), 63: (0, 66)}, 342: {78: (0, 374)}, 343: {49: (0, 51), 26: (0, 26), 34: (0, 53), 51: (0, 54), 25: (0, 27), 30: (0, 31), 31: (0, 32), 52: (0, 55), 32: (0, 33), 33: (0, 34), 36: (0, 37), 35: (0, 36), 53: (0, 56), 39: (0, 40), 54: (0, 57), 12: (0, 12), 50: (0, 375), 43: (0, 44), 27: (0, 28), 45: (0, 46), 46: (0, 47), 55: (0, 58), 56: (0, 59), 57: (0, 60), 58: (0, 61), 59: (0, 62), 60: (0, 63), 61: (0, 64), 28: (0, 29), 29: (0, 30), 37: (0, 38), 38: (0, 39), 40: (0, 41), 41: (0, 42), 42: (0, 43), 44: (0, 45), 2: (0, 48), 47: (0, 49), 62: (0, 65), 63: (0, 66)}, 344: {76: (0, 376), 53: (0, 377)}, 345: {88: (1, {'@': 225}), 84: (1, {'@': 225}), 66: (1, {'@': 225}), 76: (1, {'@': 225}), 53: (1, {'@': 225})}, 346: {66: (0, 378), 45: (0, 46), 130: (0, 379), 2: (0, 345), 26: (0, 346), 25: (0, 347), 41: (0, 348), 47: (0, 49), 12: (0, 12), 44: (0, 349)}, 347: {130: (0, 380), 2: (0, 345), 47: (0, 49), 26: (0, 346), 25: (0, 347), 132: (0, 381), 45: (0, 46), 41: (0, 348), 12: (0, 12), 44: (0, 349)}, 348: {88: (1, {'@': 226}), 84: (1, {'@': 226}), 66: (1, {'@': 226}), 76: (1, {'@': 226}), 53: (1, {'@': 226})}, 349: {88: (1, {'@': 227}), 84: (1, {'@': 227}), 66: (1, {'@': 227}), 76: (1, {'@': 227}), 53: (1, {'@': 227})}, 350: {72: (1, {'@': 228}), 90: (1, {'@': 228})}, 351: {66: (1, {'@': 229}), 78: (1, {'@': 229}), 81: (1, {'@': 229}), 68: (1, {'@': 229}), 69: (1, {'@': 229}), 84: (1, {'@': 229}), 72: (1, {'@': 229}), 88: (1, {'@': 229}), 73: (1, {'@': 229}), 74: (1, {'@': 229}), 90: (1, {'@': 229})}, 352: {88: (0, 382)}, 353: {48: (1, {'@': 230}), 3: (1, {'@': 230}), 7: (1, {'@': 230}), 1: (1, {'@': 230}), 0: (1, {'@': 230}), 6: (1, {'@': 230}), 12: (1, {'@': 230}), 11: (1, {'@': 230})}, 354: {48: (1, {'@': 231}), 3: (1, {'@': 231}), 7: (1, {'@': 231}), 1: (1, {'@': 231}), 0: (1, {'@': 231}), 6: (1, {'@': 231}), 12: (1, {'@': 231}), 11: (1, {'@': 231})}, 355: {48: (1, {'@': 232}), 3: (1, {'@': 232}), 7: (1, {'@': 232}), 1: (1, {'@': 232}), 0: (1, {'@': 232}), 6: (1, {'@': 232}), 12: (1, {'@': 232}), 11: (1, {'@': 232})}, 356: {88: (1, {'@': 233}), 84: (1, {'@': 233}), 69: (1, {'@': 233})}, 357: {65: (0, 383), 2: (0, 69), 12: (0, 12)}, 358: {88: (1, {'@': 234})}, 359: {133: (0, 384), 84: (0, 385), 48: (0, 386)}, 360: {53: (0, 387)}, 361: {48: (1, {'@': 235}), 3: (1, {'@': 235}), 7: (1, {'@': 235}), 1: (1, {'@': 235}), 0: (1, {'@': 235}), 6: (1, {'@': 235}), 12: (1, {'@': 235}), 11: (1, {'@': 235})}, 362: {48: (1, {'@': 236}), 3: (1, {'@': 236}), 7: (1, {'@': 236}), 1: (1, {'@': 236}), 0: (1, {'@': 236}), 6: (1, {'@': 236}), 12: (1, {'@': 236}), 11: (1, {'@': 236})}, 363: {2: (0, 160), 119: (0, 388), 12: (0, 12)}, 364: {119: (0, 389), 2: (0, 160), 12: (0, 12)}, 365: {119: (0, 390), 2: (0, 160), 12: (0, 12)}, 366: {82: (0, 391)}, 367: {88: (0, 392)}, 368: {92: (0, 85), 93: (0, 86), 94: (0, 87), 2: (0, 184), 96: (0, 90), 99: (0, 93), 69: (0, 393), 45: (0, 46), 28: (0, 94), 41: (0, 95), 12: (0, 12), 25: (0, 96), 100: (0, 97), 91: (0, 394)}, 369: {48: (1, {'@': 237}), 3: (1, {'@': 237}), 7: (1, {'@': 237}), 1: (1, {'@': 237}), 0: (1, {'@': 237}), 6: (1, {'@': 237}), 12: (1, {'@': 237}), 11: (1, {'@': 237}), 67: (0, 223)}, 370: {25: (1, {'@': 238}), 66: (1, {'@': 238}), 57: (1, {'@': 238}), 68: (1, {'@': 238}), 69: (1, {'@': 238}), 38: (1, {'@': 238}), 59: (1, {'@': 238}), 70: (1, {'@': 238}), 71: (1, {'@': 238}), 72: (1, {'@': 238}), 73: (1, {'@': 238}), 74: (1, {'@': 238}), 75: (1, {'@': 238}), 26: (1, {'@': 238}), 76: (1, {'@': 238}), 47: (1, {'@': 238}), 45: (1, {'@': 238}), 77: (1, {'@': 238}), 36: (1, {'@': 238}), 52: (1, {'@': 238}), 78: (1, {'@': 238}), 79: (1, {'@': 238}), 80: (1, {'@': 238}), 81: (1, {'@': 238}), 12: (1, {'@': 238}), 82: (1, {'@': 238}), 37: (1, {'@': 238}), 83: (1, {'@': 238}), 60: (1, {'@': 238}), 84: (1, {'@': 238}), 85: (1, {'@': 238}), 86: (1, {'@': 238}), 53: (1, {'@': 238}), 62: (1, {'@': 238}), 88: (1, {'@': 238}), 90: (1, {'@': 238}), 28: (1, {'@': 238})}, 371: {66: (0, 395)}, 372: {91: (0, 84), 25: (0, 118), 38: (0, 128), 108: (0, 129), 94: (0, 87), 2: (0, 88), 105: (0, 119), 95: (0, 123), 109: (0, 130), 106: (0, 120), 59: (0, 132), 111: (0, 133), 92: (0, 85), 12: (0, 12), 112: (0, 134), 96: (0, 90), 93: (0, 86), 36: (0, 125), 44: (0, 126), 55: (0, 127), 107: (0, 396), 99: (0, 93), 45: (0, 46), 113: (0, 135), 28: (0, 94), 41: (0, 95), 110: (0, 131), 100: (0, 97), 47: (0, 49)}, 373: {66: (1, {'@': 239}), 78: (1, {'@': 239}), 81: (1, {'@': 239}), 68: (1, {'@': 239}), 69: (1, {'@': 239}), 84: (1, {'@': 239}), 72: (1, {'@': 239}), 88: (1, {'@': 239}), 73: (1, {'@': 239}), 74: (1, {'@': 239}), 90: (1, {'@': 239})}, 374: {49: (0, 51), 26: (0, 26), 34: (0, 53), 51: (0, 54), 25: (0, 27), 30: (0, 31), 31: (0, 32), 52: (0, 55), 32: (0, 33), 33: (0, 34), 36: (0, 37), 35: (0, 36), 53: (0, 56), 39: (0, 40), 54: (0, 57), 12: (0, 12), 43: (0, 44), 27: (0, 28), 45: (0, 46), 46: (0, 47), 55: (0, 58), 56: (0, 59), 57: (0, 60), 58: (0, 61), 59: (0, 62), 60: (0, 63), 50: (0, 397), 61: (0, 64), 28: (0, 29), 29: (0, 30), 37: (0, 38), 38: (0, 39), 40: (0, 41), 41: (0, 42), 42: (0, 43), 44: (0, 45), 2: (0, 48), 47: (0, 49), 62: (0, 65), 63: (0, 66)}, 375: {66: (1, {'@': 240}), 78: (1, {'@': 240}), 81: (1, {'@': 240}), 68: (1, {'@': 240}), 69: (1, {'@': 240}), 84: (1, {'@': 240}), 72: (1, {'@': 240}), 88: (1, {'@': 240}), 73: (1, {'@': 240}), 74: (1, {'@': 240}), 90: (1, {'@': 240})}, 376: {49: (0, 51), 26: (0, 26), 34: (0, 53), 51: (0, 54), 25: (0, 27), 30: (0, 31), 31: (0, 32), 52: (0, 55), 32: (0, 33), 33: (0, 34), 36: (0, 37), 35: (0, 36), 53: (0, 56), 39: (0, 40), 54: (0, 57), 12: (0, 12), 43: (0, 44), 27: (0, 28), 45: (0, 46), 46: (0, 47), 55: (0, 58), 56: (0, 59), 57: (0, 60), 58: (0, 61), 59: (0, 62), 60: (0, 63), 61: (0, 64), 28: (0, 29), 29: (0, 30), 37: (0, 38), 38: (0, 39), 40: (0, 41), 41: (0, 42), 42: (0, 43), 44: (0, 45), 50: (0, 398), 2: (0, 48), 47: (0, 49), 62: (0, 65), 63: (0, 66)}, 377: {53: (0, 399)}, 378: {88: (1, {'@': 241}), 84: (1, {'@': 241}), 66: (1, {'@': 241}), 76: (1, {'@': 241}), 53: (1, {'@': 241})}, 379: {84: (0, 400), 134: (0, 401), 53: (0, 377), 66: (0, 402)}, 380: {84: (0, 403), 53: (0, 377)}, 381: {45: (0, 46), 130: (0, 404), 12: (0, 12), 2: (0, 345), 26: (0, 346), 25: (0, 347), 41: (0, 348), 47: (0, 49), 88: (0, 405), 44: (0, 349)}, 382: {69: (1, {'@': 242})}, 383: {88: (0, 406)}, 384: {48: (0, 407), 84: (0, 408)}, 385: {131: (0, 409), 44: (0, 360), 47: (0, 49)}, 386: {88: (1, {'@': 243})}, 387: {12: (0, 12), 2: (0, 410)}, 388: {88: (0, 411)}, 389: {88: (0, 412)}, 390: {88: (0, 413)}, 391: {91: (0, 84), 25: (0, 118), 38: (0, 128), 108: (0, 129), 94: (0, 87), 2: (0, 88), 107: (0, 414), 105: (0, 119), 95: (0, 123), 109: (0, 130), 106: (0, 120), 59: (0, 132), 111: (0, 133), 92: (0, 85), 12: (0, 12), 112: (0, 134), 96: (0, 90), 93: (0, 86), 36: (0, 125), 44: (0, 126), 55: (0, 127), 99: (0, 93), 45: (0, 46), 113: (0, 135), 28: (0, 94), 41: (0, 95), 110: (0, 131), 100: (0, 97), 47: (0, 49)}, 392: {66: (1, {'@': 244}), 3: (1, {'@': 244}), 67: (1, {'@': 244}), 11: (1, {'@': 244}), 69: (1, {'@': 244}), 71: (1, {'@': 244}), 73: (1, {'@': 244}), 75: (1, {'@': 244}), 74: (1, {'@': 244}), 48: (1, {'@': 244}), 24: (1, {'@': 244}), 77: (1, {'@': 244}), 52: (1, {'@': 244}), 79: (1, {'@': 244}), 80: (1, {'@': 244}), 12: (1, {'@': 244}), 82: (1, {'@': 244}), 83: (1, {'@': 244}), 60: (1, {'@': 244}), 84: (1, {'@': 244}), 85: (1, {'@': 244}), 7: (1, {'@': 244}), 86: (1, {'@': 244}), 87: (1, {'@': 244}), 1: (1, {'@': 244}), 88: (1, {'@': 244}), 0: (1, {'@': 244}), 6: (1, {'@': 244}), 28: (1, {'@': 244})}, 393: {91: (0, 415), 92: (0, 85), 93: (0, 86), 94: (0, 87), 2: (0, 184), 96: (0, 90), 99: (0, 93), 45: (0, 46), 28: (0, 94), 41: (0, 95), 25: (0, 96), 100: (0, 97), 12: (0, 12)}, 394: {66: (0, 416)}, 395: {25: (1, {'@': 245}), 66: (1, {'@': 245}), 57: (1, {'@': 245}), 68: (1, {'@': 245}), 69: (1, {'@': 245}), 38: (1, {'@': 245}), 59: (1, {'@': 245}), 70: (1, {'@': 245}), 71: (1, {'@': 245}), 72: (1, {'@': 245}), 73: (1, {'@': 245}), 74: (1, {'@': 245}), 75: (1, {'@': 245}), 26: (1, {'@': 245}), 76: (1, {'@': 245}), 47: (1, {'@': 245}), 45: (1, {'@': 245}), 77: (1, {'@': 245}), 36: (1, {'@': 245}), 52: (1, {'@': 245}), 78: (1, {'@': 245}), 79: (1, {'@': 245}), 80: (1, {'@': 245}), 81: (1, {'@': 245}), 12: (1, {'@': 245}), 82: (1, {'@': 245}), 37: (1, {'@': 245}), 83: (1, {'@': 245}), 60: (1, {'@': 245}), 84: (1, {'@': 245}), 85: (1, {'@': 245}), 86: (1, {'@': 245}), 53: (1, {'@': 245}), 62: (1, {'@': 245}), 88: (1, {'@': 245}), 90: (1, {'@': 245}), 28: (1, {'@': 245})}, 396: {48: (1, {'@': 246}), 3: (1, {'@': 246}), 7: (1, {'@': 246}), 1: (1, {'@': 246}), 67: (0, 223), 88: (1, {'@': 246}), 73: (1, {'@': 246}), 74: (1, {'@': 246}), 0: (1, {'@': 246}), 6: (1, {'@': 246}), 12: (1, {'@': 246}), 11: (1, {'@': 246})}, 397: {66: (1, {'@': 247}), 78: (1, {'@': 247}), 81: (1, {'@': 247}), 68: (1, {'@': 247}), 69: (1, {'@': 247}), 84: (1, {'@': 247}), 72: (1, {'@': 247}), 88: (1, {'@': 247}), 73: (1, {'@': 247}), 74: (1, {'@': 247}), 90: (1, {'@': 247})}, 398: {72: (1, {'@': 248}), 90: (1, {'@': 248})}, 399: {130: (0, 417), 45: (0, 46), 2: (0, 345), 26: (0, 346), 25: (0, 347), 41: (0, 348), 47: (0, 49), 12: (0, 12), 44: (0, 349)}, 400: {45: (0, 46), 130: (0, 418), 2: (0, 345), 26: (0, 346), 25: (0, 347), 41: (0, 348), 47: (0, 49), 12: (0, 12), 44: (0, 349)}, 401: {84: (0, 419), 66: (0, 420)}, 402: {88: (1, {'@': 249}), 84: (1, {'@': 249}), 66: (1, {'@': 249}), 76: (1, {'@': 249}), 53: (1, {'@': 249})}, 403: {25: (1, {'@': 250}), 88: (1, {'@': 250}), 26: (1, {'@': 250}), 45: (1, {'@': 250}), 12: (1, {'@': 250}), 47: (1, {'@': 250})}, 404: {88: (0, 421), 84: (0, 422), 53: (0, 377)}, 405: {88: (1, {'@': 251}), 84: (1, {'@': 251}), 66: (1, {'@': 251}), 76: (1, {'@': 251}), 53: (1, {'@': 251})}, 406: {88: (1, {'@': 252}), 84: (1, {'@': 252}), 69: (1, {'@': 252})}, 407: {88: (1, {'@': 253})}, 408: {47: (0, 49), 44: (0, 360), 131: (0, 423)}, 409: {48: (1, {'@': 254}), 84: (1, {'@': 254})}, 410: {25: (0, 424)}, 411: {48: (1, {'@': 255}), 3: (1, {'@': 255}), 7: (1, {'@': 255}), 1: (1, {'@': 255}), 0: (1, {'@': 255}), 6: (1, {'@': 255}), 12: (1, {'@': 255}), 11: (1, {'@': 255})}, 412: {48: (1, {'@': 256}), 3: (1, {'@': 256}), 7: (1, {'@': 256}), 1: (1, {'@': 256}), 0: (1, {'@': 256}), 6: (1, {'@': 256}), 12: (1, {'@': 256}), 11: (1, {'@': 256})}, 413: {48: (1, {'@': 257}), 3: (1, {'@': 257}), 7: (1, {'@': 257}), 1: (1, {'@': 257}), 0: (1, {'@': 257}), 6: (1, {'@': 257}), 12: (1, {'@': 257}), 11: (1, {'@': 257})}, 414: {48: (1, {'@': 258}), 3: (1, {'@': 258}), 7: (1, {'@': 258}), 1: (1, {'@': 258}), 0: (1, {'@': 258}), 6: (1, {'@': 258}), 12: (1, {'@': 258}), 11: (1, {'@': 258}), 67: (0, 223)}, 415: {66: (0, 425)}, 416: {48: (1, {'@': 259}), 3: (1, {'@': 259}), 52: (1, {'@': 259}), 67: (1, {'@': 259}), 79: (1, {'@': 259}), 11: (1, {'@': 259}), 82: (1, {'@': 259}), 12: (1, {'@': 259}), 83: (1, {'@': 259}), 60: (1, {'@': 259}), 84: (1, {'@': 259}), 85: (1, {'@': 259}), 71: (1, {'@': 259}), 7: (1, {'@': 259}), 87: (1, {'@': 259}), 1: (1, {'@': 259}), 88: (1, {'@': 259}), 73: (1, {'@': 259}), 75: (1, {'@': 259}), 74: (1, {'@': 259}), 6: (1, {'@': 259}), 0: (1, {'@': 259})}, 417: {88: (1, {'@': 260}), 84: (1, {'@': 260}), 66: (1, {'@': 260}), 76: (1, {'@': 260}), 53: (0, 377)}, 418: {84: (1, {'@': 261}), 66: (1, {'@': 261}), 53: (0, 377)}, 419: {45: (0, 46), 130: (0, 426), 2: (0, 345), 26: (0, 346), 25: (0, 347), 41: (0, 348), 47: (0, 49), 12: (0, 12), 44: (0, 349)}, 420: {88: (1, {'@': 262}), 84: (1, {'@': 262}), 66: (1, {'@': 262}), 76: (1, {'@': 262}), 53: (1, {'@': 262})}, 421: {88: (1, {'@': 263}), 84: (1, {'@': 263}), 66: (1, {'@': 263}), 76: (1, {'@': 263}), 53: (1, {'@': 263})}, 422: {25: (1, {'@': 264}), 88: (1, {'@': 264}), 26: (1, {'@': 264}), 45: (1, {'@': 264}), 12: (1, {'@': 264}), 47: (1, {'@': 264})}, 423: {48: (1, {'@': 265}), 84: (1, {'@': 265})}, 424: {88: (1, {'@': 76}), 91: (0, 84), 92: (0, 85), 93: (0, 86), 97: (0, 427), 94: (0, 87), 2: (0, 88), 95: (0, 89), 96: (0, 90), 98: (0, 92), 99: (0, 93), 45: (0, 46), 28: (0, 94), 41: (0, 95), 25: (0, 96), 100: (0, 97), 12: (0, 12)}, 425: {48: (1, {'@': 266}), 3: (1, {'@': 266}), 52: (1, {'@': 266}), 67: (1, {'@': 266}), 79: (1, {'@': 266}), 11: (1, {'@': 266}), 82: (1, {'@': 266}), 12: (1, {'@': 266}), 83: (1, {'@': 266}), 60: (1, {'@': 266}), 84: (1, {'@': 266}), 85: (1, {'@': 266}), 71: (1, {'@': 266}), 7: (1, {'@': 266}), 87: (1, {'@': 266}), 1: (1, {'@': 266}), 88: (1, {'@': 266}), 73: (1, {'@': 266}), 75: (1, {'@': 266}), 74: (1, {'@': 266}), 6: (1, {'@': 266}), 0: (1, {'@': 266})}, 426: {84: (1, {'@': 267}), 66: (1, {'@': 267}), 53: (0, 377)}, 427: {88: (0, 428)}, 428: {48: (1, {'@': 268}), 84: (1, {'@': 268})}}, 'start_states': {'start': 0}, 'end_states': {'start': 68}}, 'lexer_conf': {'tokens': [{'@': 0}, {'@': 1}, {'@': 2}, {'@': 3}, {'@': 4}, {'@': 5}, {'@': 6}, {'@': 7}, {'@': 8}, {'@': 9}, {'@': 10}, {'@': 11}, {'@': 12}, {'@': 13}, {'@': 14}, {'@': 15}, {'@': 16}, {'@': 17}, {'@': 18}, {'@': 19}, {'@': 20}, {'@': 21}, {'@': 22}, {'@': 23}, {'@': 24}, {'@': 25}, {'@': 26}, {'@': 27}, {'@': 28}, {'@': 29}, {'@': 30}, {'@': 31}, {'@': 32}, {'@': 33}, {'@': 34}, {'@': 35}, {'@': 36}, {'@': 37}, {'@': 38}, {'@': 39}, {'@': 40}, {'@': 41}, {'@': 42}, {'@': 43}, {'@': 44}, {'@': 45}, {'@': 46}, {'@': 47}, {'@': 48}, {'@': 49}, {'@': 50}, {'@': 51}, {'@': 52}, {'@': 53}, {'@': 54}, {'@': 55}, {'@': 56}, {'@': 57}, {'@': 58}, {'@': 59}, {'@': 60}, {'@': 61}, {'@': 62}, {'@': 63}, {'@': 64}, {'@': 65}, {'@': 66}, {'@': 67}, {'@': 68}, {'@': 69}], 'ignore': ['WS', 'COMMENT'], '__type__': 'LexerConf'}, 'start': ['start'], '__type__': 'LALR_ContextualLexer'}, 'rules': [{'@': 72}, {'@': 70}, {'@': 71}, {'@': 230}, {'@': 231}, {'@': 236}, {'@': 177}, {'@': 256}, {'@': 232}, {'@': 176}, {'@': 175}, {'@': 235}, {'@': 255}, {'@': 257}, {'@': 143}, {'@': 74}, {'@': 144}, {'@': 220}, {'@': 141}, {'@': 137}, {'@': 240}, {'@': 207}, {'@': 239}, {'@': 247}, {'@': 229}, {'@': 205}, {'@': 171}, {'@': 172}, {'@': 136}, {'@': 97}, {'@': 138}, {'@': 140}, {'@': 248}, {'@': 226}, {'@': 227}, {'@': 225}, {'@': 262}, {'@': 249}, {'@': 241}, {'@': 260}, {'@': 263}, {'@': 251}, {'@': 164}, {'@': 93}, {'@': 100}, {'@': 101}, {'@': 103}, {'@': 98}, {'@': 102}, {'@': 105}, {'@': 99}, {'@': 161}, {'@': 159}, {'@': 156}, {'@': 157}, {'@': 160}, {'@': 158}, {'@': 77}, {'@': 119}, {'@': 80}, {'@': 134}, {'@': 86}, {'@': 123}, {'@': 83}, {'@': 122}, {'@': 82}, {'@': 135}, {'@': 87}, {'@': 120}, {'@': 78}, {'@': 121}, {'@': 79}, {'@': 94}, {'@': 88}, {'@': 91}, {'@': 85}, {'@': 84}, {'@': 154}, {'@': 90}, {'@': 89}, {'@': 81}, {'@': 167}, {'@': 166}, {'@': 185}, {'@': 152}, {'@': 118}, {'@': 245}, {'@': 238}, {'@': 188}, {'@': 155}, {'@': 253}, {'@': 243}, {'@': 234}, {'@': 268}, {'@': 174}, {'@': 242}, {'@': 237}, {'@': 211}, {'@': 258}, {'@': 145}, {'@': 233}, {'@': 210}, {'@': 252}, {'@': 142}, {'@': 106}, {'@': 124}, {'@': 202}, {'@': 246}, {'@': 222}, {'@': 195}, {'@': 194}, {'@': 193}, {'@': 221}, {'@': 223}, {'@': 168}, {'@': 125}, {'@': 128}, {'@': 126}, {'@': 127}, {'@': 192}, {'@': 131}, {'@': 201}, {'@': 197}, {'@': 196}, {'@': 198}, {'@': 200}, {'@': 199}, {'@': 107}, {'@': 215}, {'@': 266}, {'@': 259}, {'@': 115}, {'@': 147}, {'@': 109}, {'@': 149}, {'@': 113}, {'@': 146}, {'@': 108}, {'@': 148}, {'@': 110}, {'@': 111}, {'@': 116}, {'@': 151}, {'@': 184}, {'@': 117}, {'@': 150}, {'@': 114}, {'@': 76}, {'@': 112}, {'@': 216}, {'@': 180}, {'@': 244}, {'@': 92}, {'@': 75}, {'@': 95}, {'@': 130}, {'@': 133}, {'@': 129}, {'@': 132}, {'@': 73}, {'@': 96}, {'@': 208}, {'@': 228}, {'@': 206}, {'@': 224}, {'@': 261}, {'@': 267}, {'@': 250}, {'@': 264}, {'@': 104}, {'@': 139}, {'@': 169}, {'@': 203}, {'@': 165}, {'@': 191}, {'@': 163}, {'@': 190}, {'@': 170}, {'@': 204}, {'@': 162}, {'@': 189}, {'@': 186}, {'@': 219}, {'@': 153}, {'@': 187}, {'@': 254}, {'@': 265}, {'@': 173}, {'@': 209}, {'@': 179}, {'@': 213}, {'@': 182}, {'@': 217}, {'@': 178}, {'@': 212}, {'@': 181}, {'@': 214}, {'@': 183}, {'@': 218}], 'options': {'debug': False, 'keep_all_tokens': False, 'tree_class': None, 'cache_grammar': False, 'postlex': None, 'parser': 'lalr', 'lexer': 'contextual', 'transformer': None, 'start': ['start'], 'profile': False, 'priority': None, 'ambiguity': 'auto', 'propagate_positions': False, 'lexer_callbacks': {}, 'maybe_placeholders': False, 'edit_terminals': None}, '__type__': 'Lark'}
)
MEMO = (
{0: {'name': '_IS', 'pattern': {'value': '(?:(?:are|is)|\\∈)', 'flags': [], '_width': [1, 3], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 1: {'name': 'PROP_VAL', 'pattern': {'value': '(?:(?i:(?:(?i:sometimes)|(?i:true)))|(?i:false))', 'flags': ['i'], '_width': [4, 9], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 2: {'name': '_NE', 'pattern': {'value': '(?:(?:(?:(?:(?:\\!|\\~)|\\¬)|not)\\=|\\/\\=)|\\≠)', 'flags': [], '_width': [1, 4], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 3: {'name': 'COMP', 'pattern': {'value': '(?:(?:(?:\\!|\\~)|\\¬)|not)', 'flags': [], '_width': [1, 3], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 4: {'name': '_GE', 'pattern': {'value': '(?:\\>\\=|\\≥)', 'flags': [], '_width': [1, 2], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 5: {'name': '_LE', 'pattern': {'value': '(?:\\<\\=|\\≤)', 'flags': [], '_width': [1, 2], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 6: {'name': '_IMPLIES', 'pattern': {'value': '(?:(?:\\=\\>|\\⇒)|\\⟹\\ )', 'flags': [], '_width': [1, 2], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 7: {'name': '_IFF', 'pattern': {'value': '(?:(?:(?:\\<\\=\\>|\\⟺)|\\⇔)|iff)', 'flags': [], '_width': [1, 3], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 8: {'name': 'CONJ', 'pattern': {'value': '(?:(?:(?:\\&|\\/\\\\)|\\∧)|and)', 'flags': [], '_width': [1, 3], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 9: {'name': 'DISJ', 'pattern': {'value': '(?:(?:(?:\\||\\\\\\/)|\\∨)|or)', 'flags': [], '_width': [1, 2], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 10: {'name': 'VAR', 'pattern': {'value': '(?!(match|with|do|if|then|else|otherwise|iff|is|are|forall|exists|not|or|and|sometimes|true|false)\\b)[a-zA-Z_][a-zA-Z_0-9]*', 'flags': ['i'], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 11: {'name': 'COMMENT', 'pattern': {'value': '\\/\\/[^\n]*', 'flags': [], '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 12: {'name': 'INT', 'pattern': {'value': '(?:[0-9])+', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 13: {'name': 'WS', 'pattern': {'value': '(?:[ \t\x0c\r\n])+', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 14: {'name': 'ESCAPED_STRING', 'pattern': {'value': '\\".*?(?<!\\\\)(\\\\\\\\)*?\\"', 'flags': [], '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 15: {'name': 'HASH', 'pattern': {'value': '#', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 16: {'name': '__ANON_0', 'pattern': {'value': 'save_aut', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 17: {'name': 'LPAR', 'pattern': {'value': '(', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 18: {'name': 'COMMA', 'pattern': {'value': ',', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 19: {'name': 'RPAR', 'pattern': {'value': ')', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 20: {'name': '__ANON_1', 'pattern': {'value': 'save_aut_img', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 21: {'name': 'CONTEXT', 'pattern': {'value': 'context', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 22: {'name': '__ANON_2', 'pattern': {'value': 'end_context', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 23: {'name': 'LOAD', 'pattern': {'value': 'load', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 24: {'name': '__ANON_3', 'pattern': {'value': 'assert_prop', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 25: {'name': 'IMPORT', 'pattern': {'value': 'import', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 26: {'name': 'FORGET', 'pattern': {'value': 'forget', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 27: {'name': 'TYPE', 'pattern': {'value': 'type', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 28: {'name': 'SHUFFLE', 'pattern': {'value': 'shuffle', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 29: {'name': '__ANON_4', 'pattern': {'value': 'shuffle_or', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 30: {'name': 'RESTRICT', 'pattern': {'value': 'Restrict', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 31: {'name': 'DOT', 'pattern': {'value': '.', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 32: {'name': 'DEFINE', 'pattern': {'value': 'Define', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 33: {'name': 'COLON', 'pattern': {'value': ':', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 34: {'name': 'EQUAL', 'pattern': {'value': '=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 35: {'name': 'EXECUTE', 'pattern': {'value': 'Execute', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 36: {'name': 'DISPLAY', 'pattern': {'value': 'Display', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 37: {'name': 'IF', 'pattern': {'value': 'if', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 38: {'name': 'THEN', 'pattern': {'value': 'then', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 39: {'name': 'ELSE', 'pattern': {'value': 'else', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 40: {'name': 'BACKSLASH', 'pattern': {'value': '\\', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 41: {'name': '__ANON_5', 'pattern': {'value': '->', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 42: {'name': 'LET', 'pattern': {'value': 'let', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 43: {'name': 'BE', 'pattern': {'value': 'be', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 44: {'name': 'IN', 'pattern': {'value': 'in', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 45: {'name': 'MATCH', 'pattern': {'value': 'match', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 46: {'name': 'WITH', 'pattern': {'value': 'with', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 47: {'name': 'END', 'pattern': {'value': 'end', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 48: {'name': 'SEMICOLON', 'pattern': {'value': ';', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 49: {'name': 'DO', 'pattern': {'value': 'do', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 50: {'name': 'CASE', 'pattern': {'value': 'case', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 51: {'name': 'LSQB', 'pattern': {'value': '[', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 52: {'name': 'RSQB', 'pattern': {'value': ']', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 53: {'name': '__ANON_6', 'pattern': {'value': '[+\\-*\\/=\\\\<>]', 'flags': [], '_width': [1, 1], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 54: {'name': '__ANON_7', 'pattern': {'value': '[^\x00-ÿ]', 'flags': [], '_width': [1, 1], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 55: {'name': 'LESSTHAN', 'pattern': {'value': '<', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 56: {'name': 'MORETHAN', 'pattern': {'value': '>', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 57: {'name': 'MINUS', 'pattern': {'value': '-', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 58: {'name': 'PLUS', 'pattern': {'value': '+', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 59: {'name': 'STAR', 'pattern': {'value': '*', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 60: {'name': 'SLASH', 'pattern': {'value': '/', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 61: {'name': 'CIRCUMFLEX', 'pattern': {'value': '^', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 62: {'name': 'TRUE', 'pattern': {'value': 'true', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 63: {'name': 'FALSE', 'pattern': {'value': 'false', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 64: {'name': 'LBRACE', 'pattern': {'value': '{', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 65: {'name': 'RBRACE', 'pattern': {'value': '}', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 66: {'name': 'FORALL', 'pattern': {'value': 'forall', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 67: {'name': '__ANON_8', 'pattern': {'value': '∀', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 68: {'name': 'EXISTS', 'pattern': {'value': 'exists', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 69: {'name': '__ANON_9', 'pattern': {'value': '∃', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 70: {'origin': {'name': 'start', '__type__': 'NonTerminal'}, 'expansion': [], 'order': 1, 'alias': 'prog', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 71: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'pred_definition', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 72: {'origin': {'name': 'start', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_0', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'prog', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 73: {'origin': {'name': '__anon_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'def', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': None, '__type__': 'Rule'}, 74: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline', '__type__': 'NonTerminal'}], 'order': 13, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 75: {'origin': {'name': 'var', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'var_tok', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 76: {'origin': {'name': 'args', '__type__': 'NonTerminal'}, 'expansion': [], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': [True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 77: {'origin': {'name': 'praline_compare', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_arith', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 78: {'origin': {'name': 'praline_exponent', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'app', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_exponent', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 79: {'origin': {'name': 'app', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_atom', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 80: {'origin': {'name': 'praline_arith', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_sub', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 81: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_tuple', '__type__': 'NonTerminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 82: {'origin': {'name': 'praline_mul', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_div', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_mul', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 83: {'origin': {'name': 'praline_add', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_mul', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_add', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 84: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FALSE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'praline_false', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 85: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRUE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'praline_true', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 86: {'origin': {'name': 'praline_sub', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_add', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_sub', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 87: {'origin': {'name': 'praline_div', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_exponent', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_div', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 88: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'int', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_int', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 89: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_list', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 90: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'pecan_term', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 91: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'string', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'praline_string', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 92: {'origin': {'name': 'int', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'int_tok', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 93: {'origin': {'name': 'praline_operator', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_compare', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 94: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_var', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 95: {'origin': {'name': 'string', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ESCAPED_STRING', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'escaped_str', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 96: {'origin': {'name': '__anon_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'def', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': None, '__type__': 'Rule'}, 97: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_operator', '__type__': 'NonTerminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 98: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CONJ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 99: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 100: {'origin': {'name': 'operator_sym', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_plus_5', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'operator_sym', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 101: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_6', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 102: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMP', 'filter_out': False, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 103: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DISJ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 104: {'origin': {'name': '__anon_plus_5', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'operator_sym_char', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': None, '__type__': 'Rule'}, 105: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_7', 'filter_out': False, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 106: {'origin': {'name': 'varlist', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 107: {'origin': {'name': 'expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arith', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 108: {'origin': {'name': 'mul_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'div_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'mul', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 109: {'origin': {'name': 'sub_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'add_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'sub', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 110: {'origin': {'name': 'div_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'div', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 111: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'var_ref', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 112: {'origin': {'name': 'arg', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 113: {'origin': {'name': 'add_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'mul_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'add', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 114: {'origin': {'name': 'args', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arg', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 115: {'origin': {'name': 'arith', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'sub_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 116: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'int', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'int_const', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 117: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'call', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 118: {'origin': {'name': 'praline_list', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'praline_list_literal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': [False, True, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 119: {'origin': {'name': 'praline_arith', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_sub', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_neg', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 120: {'origin': {'name': 'praline_exponent', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'app', '__type__': 'NonTerminal'}, {'name': '__anon_star_10', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_exponent', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 121: {'origin': {'name': 'app', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'app', '__type__': 'NonTerminal'}, {'name': 'praline_atom', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_app', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 122: {'origin': {'name': 'praline_mul', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_div', '__type__': 'NonTerminal'}, {'name': '__anon_star_8', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_mul', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 123: {'origin': {'name': 'praline_add', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_mul', '__type__': 'NonTerminal'}, {'name': '__anon_star_7', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_add', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 124: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'bool', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 125: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 126: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FALSE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'formal_false', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 127: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'string', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'spot_formula', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 128: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRUE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'formula_true', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 129: {'origin': {'name': 'exists_sym', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'EXISTS', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 130: {'origin': {'name': 'forall_sym', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FORALL', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 131: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'comparison', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 132: {'origin': {'name': 'exists_sym', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_9', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 133: {'origin': {'name': 'forall_sym', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_8', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 134: {'origin': {'name': 'praline_sub', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_add', '__type__': 'NonTerminal'}, {'name': '__anon_star_6', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_sub', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 135: {'origin': {'name': 'praline_div', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_exponent', '__type__': 'NonTerminal'}, {'name': '__anon_star_9', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_div', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 136: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DO', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 8, 'alias': 'praline_do', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 137: {'origin': {'name': 'praline', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DISPLAY', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'praline_display', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 138: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_operator', '__type__': 'NonTerminal'}, {'name': 'operator_sym', '__type__': 'NonTerminal'}], 'order': 10, 'alias': 'partial_op_fst', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 139: {'origin': {'name': '__anon_plus_5', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_plus_5', '__type__': 'NonTerminal'}, {'name': 'operator_sym_char', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': None, '__type__': 'Rule'}, 140: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'operator_sym', '__type__': 'NonTerminal'}, {'name': 'praline_operator', '__type__': 'NonTerminal'}], 'order': 11, 'alias': 'partial_op_snd', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 141: {'origin': {'name': 'praline', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'EXECUTE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'praline_execute', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 142: {'origin': {'name': 'varlist', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': '__anon_star_14', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 143: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'RESTRICT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'restriction', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 144: {'origin': {'name': 'prop_val', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PROP_VAL', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'prop_val_tok', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 145: {'origin': {'name': 'formal', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'formal_var', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 146: {'origin': {'name': 'mul_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'div_expr', '__type__': 'NonTerminal'}, {'name': '__anon_star_17', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'mul', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 147: {'origin': {'name': 'sub_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'add_expr', '__type__': 'NonTerminal'}, {'name': '__anon_star_15', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'sub', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 148: {'origin': {'name': 'div_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}, {'name': '__anon_star_18', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'div', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 149: {'origin': {'name': 'add_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'mul_expr', '__type__': 'NonTerminal'}, {'name': '__anon_star_16', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'add', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 150: {'origin': {'name': 'args', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arg', '__type__': 'NonTerminal'}, {'name': '__anon_star_19', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 151: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'atom', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'neg', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 152: {'origin': {'name': 'praline_list', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'praline_list_literal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 153: {'origin': {'name': '__anon_plus_12', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'term', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': None, '__type__': 'Rule'}, 154: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 155: {'origin': {'name': 'praline_tuple', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_plus_12', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': [False, False, True, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 156: {'origin': {'name': 'praline_compare', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_arith', '__type__': 'NonTerminal'}, {'name': '_LE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_arith', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'praline_le', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 157: {'origin': {'name': 'praline_compare', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_arith', '__type__': 'NonTerminal'}, {'name': '_GE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_arith', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'praline_ge', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 158: {'origin': {'name': 'praline_compare', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_arith', '__type__': 'NonTerminal'}, {'name': 'MORETHAN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_arith', '__type__': 'NonTerminal'}], 'order': 5, 'alias': 'praline_gt', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 159: {'origin': {'name': 'praline_compare', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_arith', '__type__': 'NonTerminal'}, {'name': '_NE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_arith', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_ne', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 160: {'origin': {'name': 'praline_compare', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_arith', '__type__': 'NonTerminal'}, {'name': 'LESSTHAN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_arith', '__type__': 'NonTerminal'}], 'order': 4, 'alias': 'praline_lt', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 161: {'origin': {'name': 'praline_compare', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_arith', '__type__': 'NonTerminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_arith', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_eq', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 162: {'origin': {'name': '__anon_star_10', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CIRCUMFLEX', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'app', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': None, '__type__': 'Rule'}, 163: {'origin': {'name': '__anon_star_8', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_div', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': None, '__type__': 'Rule'}, 164: {'origin': {'name': 'praline_operator', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_operator', '__type__': 'NonTerminal'}, {'name': 'operator_sym', '__type__': 'NonTerminal'}, {'name': 'praline_compare', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_operator', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 165: {'origin': {'name': '__anon_star_7', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_mul', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': None, '__type__': 'Rule'}, 166: {'origin': {'name': 'pecan_term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'def', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'praline_pecan_term', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 167: {'origin': {'name': 'pecan_term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'praline_pecan_term', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 168: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMP', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 9, 'alias': 'comp', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 169: {'origin': {'name': '__anon_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_add', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': None, '__type__': 'Rule'}, 170: {'origin': {'name': '__anon_star_9', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_exponent', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': None, '__type__': 'Rule'}, 171: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DO', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__anon_star_2', '__type__': 'NonTerminal'}], 'order': 6, 'alias': 'praline_do', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 172: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DO', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': 'praline_do', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 173: {'origin': {'name': '__anon_star_14', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': None, '__type__': 'Rule'}, 174: {'origin': {'name': 'restriction', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'varlist', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'restrict_is', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 175: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'FORGET', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 8, 'alias': 'directive_forget', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 176: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'IMPORT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': 'directive_import', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 177: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_2', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'directive_end_context', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 178: {'origin': {'name': '__anon_star_17', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'div_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': None, '__type__': 'Rule'}, 179: {'origin': {'name': '__anon_star_15', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'add_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': None, '__type__': 'Rule'}, 180: {'origin': {'name': 'call', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'call_is', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 181: {'origin': {'name': '__anon_star_18', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'atom', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': None, '__type__': 'Rule'}, 182: {'origin': {'name': '__anon_star_16', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'mul_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': None, '__type__': 'Rule'}, 183: {'origin': {'name': '__anon_star_19', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arg', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': None, '__type__': 'Rule'}, 184: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arith', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 185: {'origin': {'name': 'praline_list', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__anon_star_11', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'praline_list_literal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 186: {'origin': {'name': '__anon_star_11', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': None, '__type__': 'Rule'}, 187: {'origin': {'name': '__anon_plus_12', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_plus_12', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': None, '__type__': 'Rule'}, 188: {'origin': {'name': 'praline_tuple', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_plus_12', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 189: {'origin': {'name': '__anon_star_10', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_10', '__type__': 'NonTerminal'}, {'name': 'CIRCUMFLEX', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'app', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': None, '__type__': 'Rule'}, 190: {'origin': {'name': '__anon_star_8', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_8', '__type__': 'NonTerminal'}, {'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_div', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': None, '__type__': 'Rule'}, 191: {'origin': {'name': '__anon_star_7', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_7', '__type__': 'NonTerminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_mul', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': None, '__type__': 'Rule'}, 192: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 193: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'bool', '__type__': 'NonTerminal'}, {'name': 'CONJ', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 6, 'alias': 'conj', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 194: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'bool', '__type__': 'NonTerminal'}, {'name': 'DISJ', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 5, 'alias': 'disj', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 195: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'bool', '__type__': 'NonTerminal'}, {'name': '_IFF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 4, 'alias': 'iff', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 196: {'origin': {'name': 'comparison', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'LESSTHAN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'less', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 197: {'origin': {'name': 'comparison', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': '_NE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'not_equal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 198: {'origin': {'name': 'comparison', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'MORETHAN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'greater', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 199: {'origin': {'name': 'comparison', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': '_GE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 5, 'alias': 'greater_equal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 200: {'origin': {'name': 'comparison', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': '_LE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 4, 'alias': 'less_equal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 201: {'origin': {'name': 'comparison', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'equal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 202: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'pred', '__type__': 'NonTerminal'}, {'name': '_IMPLIES', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'implies', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 203: {'origin': {'name': '__anon_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_6', '__type__': 'NonTerminal'}, {'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_add', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': None, '__type__': 'Rule'}, 204: {'origin': {'name': '__anon_star_9', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_9', '__type__': 'NonTerminal'}, {'name': 'SLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_exponent', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': None, '__type__': 'Rule'}, 205: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DO', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__anon_star_2', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': 'praline_do', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 206: {'origin': {'name': '__anon_star_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': None, '__type__': 'Rule'}, 207: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'BACKSLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'app', '__type__': 'NonTerminal'}, {'name': '__ANON_5', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_lambda', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 208: {'origin': {'name': '__anon_plus_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'match_arm', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': None, '__type__': 'Rule'}, 209: {'origin': {'name': '__anon_star_14', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_14', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': None, '__type__': 'Rule'}, 210: {'origin': {'name': 'formal', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'formal_is', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 211: {'origin': {'name': 'pred_definition', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'def_pred_is', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 212: {'origin': {'name': '__anon_star_17', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_17', '__type__': 'NonTerminal'}, {'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'div_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': None, '__type__': 'Rule'}, 213: {'origin': {'name': '__anon_star_15', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_15', '__type__': 'NonTerminal'}, {'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'add_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': None, '__type__': 'Rule'}, 214: {'origin': {'name': '__anon_star_18', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_18', '__type__': 'NonTerminal'}, {'name': 'SLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'atom', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': None, '__type__': 'Rule'}, 215: {'origin': {'name': 'expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arith', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'index', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 216: {'origin': {'name': 'call', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'call_args', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 217: {'origin': {'name': '__anon_star_16', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_16', '__type__': 'NonTerminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'mul_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': None, '__type__': 'Rule'}, 218: {'origin': {'name': '__anon_star_19', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_19', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arg', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': None, '__type__': 'Rule'}, 219: {'origin': {'name': '__anon_star_11', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_11', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': None, '__type__': 'Rule'}, 220: {'origin': {'name': 'praline', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DEFINE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_operator', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'praline_def', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 221: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'forall_sym', '__type__': 'NonTerminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 7, 'alias': 'forall', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 222: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'THEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'if_then_else', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': [False, False, False, False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 223: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'exists_sym', '__type__': 'NonTerminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 8, 'alias': 'exists', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 224: {'origin': {'name': '__anon_star_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_2', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': None, '__type__': 'Rule'}, 225: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'praline_match_var', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 226: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'int', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_match_int', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 227: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'string', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_match_string', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 228: {'origin': {'name': '__anon_plus_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_plus_1', '__type__': 'NonTerminal'}, {'name': 'match_arm', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': None, '__type__': 'Rule'}, 229: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'WITH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_plus_1', '__type__': 'NonTerminal'}, {'name': 'END', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'praline_match', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 230: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'directive_save_aut', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 231: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_1', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'directive_save_aut_img', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 232: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'prop_val', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': 'directive_assert_prop', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 233: {'origin': {'name': 'formal', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'varlist', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'formal_call', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 234: {'origin': {'name': 'val_dict', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': [False, True, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 235: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'TYPE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'val_dict', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 9, 'alias': 'directive_type', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 236: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'CONTEXT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'directive_context', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 237: {'origin': {'name': 'pred_definition', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'def_pred_standard', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 238: {'origin': {'name': 'praline_list', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'praline_list_gen', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 239: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LET', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'BE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pecan_term', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'praline_let_pecan', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 240: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'THEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_if', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 241: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': 'praline_match_list', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': [False, True, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 242: {'origin': {'name': 'restriction', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'varlist', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'varlist', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'restrict_call', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 243: {'origin': {'name': 'val_dict', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kv_pair', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 244: {'origin': {'name': 'call', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'call_is_args', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 245: {'origin': {'name': 'praline_list', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'praline_list_gen', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 246: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'THEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'if_then_else', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 247: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LET', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'praline_let', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 248: {'origin': {'name': 'match_arm', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CASE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': '__ANON_5', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_match_arm', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 249: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'praline_match_list', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 250: {'origin': {'name': '__anon_plus_4', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': None, '__type__': 'Rule'}, 251: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_plus_4', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 8, 'alias': 'praline_match_tuple', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': [False, False, True, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 252: {'origin': {'name': 'formal', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'varlist', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'formal_is_call', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 253: {'origin': {'name': 'val_dict', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kv_pair', '__type__': 'NonTerminal'}, {'name': '__anon_star_13', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 254: {'origin': {'name': '__anon_star_13', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kv_pair', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': None, '__type__': 'Rule'}, 255: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'SHUFFLE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 10, 'alias': 'directive_shuffle', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 256: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LOAD', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': 'directive_load_aut', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 257: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_4', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 11, 'alias': 'directive_shuffle_or', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 258: {'origin': {'name': 'pred_definition', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'def_pred_is_call', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 259: {'origin': {'name': 'expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arith', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arith', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'index_range', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 260: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}], 'order': 6, 'alias': 'praline_match_prepend', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 261: {'origin': {'name': '__anon_star_3', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': None, '__type__': 'Rule'}, 262: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': '__anon_star_3', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'praline_match_list', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 263: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_plus_4', '__type__': 'NonTerminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': 'praline_match_tuple', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 264: {'origin': {'name': '__anon_plus_4', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_plus_4', '__type__': 'NonTerminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': None, '__type__': 'Rule'}, 265: {'origin': {'name': '__anon_star_13', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_13', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kv_pair', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': None, '__type__': 'Rule'}, 266: {'origin': {'name': 'expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arith', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arith', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'index_range', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 267: {'origin': {'name': '__anon_star_3', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_3', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': None, '__type__': 'Rule'}, 268: {'origin': {'name': 'kv_pair', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'string', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'kv_pair', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}}
)
Shift = 0
Reduce = 1
def Lark_StandAlone(transformer=None, postlex=None):
  namespace = {'Rule': Rule, 'TerminalDef': TerminalDef}
  return Lark.deserialize(DATA, namespace, MEMO, transformer=transformer, postlex=postlex)
