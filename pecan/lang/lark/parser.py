# The file was automatically generated by Lark v0.7.7
#
#
#   Lark Stand-alone Generator Tool
# ----------------------------------
# Generates a stand-alone LALR(1) parser with a standard lexer
#
# Git:    https://github.com/erezsh/lark
# Author: Erez Shinan (erezshin@gmail.com)
#
#
#    >>> LICENSE
#
#    This tool and its generated code use a separate license from Lark.
#
#    It is licensed under GPLv2 or above.
#
#    If you wish to purchase a commercial license for this tool and its
#    generated code, contact me via email.
#
#    If GPL is incompatible with your free or open-source project,
#    contact me and we'll work it out (for free).
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    See <http://www.gnu.org/licenses/>.
#
#

class LarkError(Exception):
    pass

class GrammarError(LarkError):
    pass

class ParseError(LarkError):
    pass

class LexError(LarkError):
    pass

class UnexpectedInput(LarkError):
    pos_in_stream = None

    def get_context(self, text, span=40):
        pos = self.pos_in_stream
        start = max(pos - span, 0)
        end = pos + span
        before = text[start:pos].rsplit('\n', 1)[-1]
        after = text[pos:end].split('\n', 1)[0]
        return before + after + '\n' + ' ' * len(before) + '^\n'

    def match_examples(self, parse_fn, examples):
        """ Given a parser instance and a dictionary mapping some label with
            some malformed syntax examples, it'll return the label for the
            example that bests matches the current error.
        """
        assert self.state is not None, "Not supported for this exception"

        candidate = None
        for label, example in examples.items():
            assert not isinstance(example, STRING_TYPE)

            for malformed in example:
                try:
                    parse_fn(malformed)
                except UnexpectedInput as ut:
                    if ut.state == self.state:
                        try:
                            if ut.token == self.token:  # Try exact match first
                                return label
                        except AttributeError:
                            pass
                        if not candidate:
                            candidate = label

        return candidate


class UnexpectedCharacters(LexError, UnexpectedInput):
    def __init__(self, seq, lex_pos, line, column, allowed=None, considered_tokens=None, state=None, token_history=None):
        message = "No terminal defined for '%s' at line %d col %d" % (seq[lex_pos], line, column)

        self.line = line
        self.column = column
        self.allowed = allowed
        self.considered_tokens = considered_tokens
        self.pos_in_stream = lex_pos
        self.state = state

        message += '\n\n' + self.get_context(seq)
        if allowed:
            message += '\nExpecting: %s\n' % allowed
        if token_history:
            message += '\nPrevious tokens: %s\n' % ', '.join(repr(t) for t in token_history)

        super(UnexpectedCharacters, self).__init__(message)



class UnexpectedToken(ParseError, UnexpectedInput):
    def __init__(self, token, expected, considered_rules=None, state=None):
        self.token = token
        self.expected = expected     # XXX str shouldn't necessary
        self.line = getattr(token, 'line', '?')
        self.column = getattr(token, 'column', '?')
        self.considered_rules = considered_rules
        self.state = state
        self.pos_in_stream = getattr(token, 'pos_in_stream', None)

        message = ("Unexpected token %r at line %s, column %s.\n"
                   "Expected one of: \n\t* %s\n"
                   % (token, self.line, self.column, '\n\t* '.join(self.expected)))

        super(UnexpectedToken, self).__init__(message)

class VisitError(LarkError):
    def __init__(self, tree, orig_exc):
        self.tree = tree
        self.orig_exc = orig_exc

        message = 'Error trying to process rule "%s":\n\n%s' % (tree.data, orig_exc)
        super(VisitError, self).__init__(message)

def classify(seq, key=None, value=None):
    d = {}
    for item in seq:
        k = key(item) if (key is not None) else item
        v = value(item) if (value is not None) else item
        if k in d:
            d[k].append(v)
        else:
            d[k] = [v]
    return d


def _deserialize(data, namespace, memo):
    if isinstance(data, dict):
        if '__type__' in data: # Object
            class_ = namespace[data['__type__']]
            return class_.deserialize(data, memo)
        elif '@' in data:
            return memo[data['@']]
        return {key:_deserialize(value, namespace, memo) for key, value in data.items()}
    elif isinstance(data, list):
        return [_deserialize(value, namespace, memo) for value in data]
    return data


class Serialize(object):
    def memo_serialize(self, types_to_memoize):
        memo = SerializeMemoizer(types_to_memoize)
        return self.serialize(memo), memo.serialize()

    def serialize(self, memo=None):
        if memo and memo.in_types(self):
            return {'@': memo.memoized.get(self)}

        fields = getattr(self, '__serialize_fields__')
        res = {f: _serialize(getattr(self, f), memo) for f in fields}
        res['__type__'] = type(self).__name__
        postprocess = getattr(self, '_serialize', None)
        if postprocess:
            postprocess(res, memo)
        return res

    @classmethod
    def deserialize(cls, data, memo):
        namespace = getattr(cls, '__serialize_namespace__', {})
        namespace = {c.__name__:c for c in namespace}

        fields = getattr(cls, '__serialize_fields__')

        if '@' in data:
            return memo[data['@']]

        inst = cls.__new__(cls)
        for f in fields:
            try:
                setattr(inst, f, _deserialize(data[f], namespace, memo))
            except KeyError as e:
                raise KeyError("Cannot find key for class", cls, e)
        postprocess = getattr(inst, '_deserialize', None)
        if postprocess:
            postprocess()
        return inst


class SerializeMemoizer(Serialize):
    __serialize_fields__ = 'memoized',

    def __init__(self, types_to_memoize):
        self.types_to_memoize = tuple(types_to_memoize)
        self.memoized = Enumerator()

    def in_types(self, value):
        return isinstance(value, self.types_to_memoize)

    def serialize(self):
        return _serialize(self.memoized.reversed(), None)

    @classmethod
    def deserialize(cls, data, namespace, memo):
        return _deserialize(data, namespace, memo)



try:
    STRING_TYPE = basestring
except NameError:   # Python 3
    STRING_TYPE = str


import types
from functools import wraps, partial
from contextlib import contextmanager

Str = type(u'')
try:
    classtype = types.ClassType # Python2
except AttributeError:
    classtype = type    # Python3

def smart_decorator(f, create_decorator):
    if isinstance(f, types.FunctionType):
        return wraps(f)(create_decorator(f, True))

    elif isinstance(f, (classtype, type, types.BuiltinFunctionType)):
        return wraps(f)(create_decorator(f, False))

    elif isinstance(f, types.MethodType):
        return wraps(f)(create_decorator(f.__func__, True))

    elif isinstance(f, partial):
        # wraps does not work for partials in 2.7: https://bugs.python.org/issue3445
        return wraps(f.func)(create_decorator(lambda *args, **kw: f(*args[1:], **kw), True))

    else:
        return create_decorator(f.__func__.__call__, True)

import sys, re
Py36 = (sys.version_info[:2] >= (3, 6))

import sre_parse
import sre_constants
def get_regexp_width(regexp):
    try:
        return [int(x) for x in sre_parse.parse(regexp).getwidth()]
    except sre_constants.error:
        raise ValueError(regexp)


class Meta:
    def __init__(self):
        self.empty = True

class Tree(object):
    def __init__(self, data, children, meta=None):
        self.data = data
        self.children = children
        self._meta = meta

    @property
    def meta(self):
        if self._meta is None:
            self._meta = Meta()
        return self._meta

    def __repr__(self):
        return 'Tree(%s, %s)' % (self.data, self.children)

    def _pretty_label(self):
        return self.data

    def _pretty(self, level, indent_str):
        if len(self.children) == 1 and not isinstance(self.children[0], Tree):
            return [ indent_str*level, self._pretty_label(), '\t', '%s' % (self.children[0],), '\n']

        l = [ indent_str*level, self._pretty_label(), '\n' ]
        for n in self.children:
            if isinstance(n, Tree):
                l += n._pretty(level+1, indent_str)
            else:
                l += [ indent_str*(level+1), '%s' % (n,), '\n' ]

        return l

    def pretty(self, indent_str='  '):
        return ''.join(self._pretty(0, indent_str))

    def __eq__(self, other):
        try:
            return self.data == other.data and self.children == other.children
        except AttributeError:
            return False

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self):
        return hash((self.data, tuple(self.children)))

    def iter_subtrees(self):
        # TODO: Re-write as a more efficient version

        visited = set()
        q = [self]

        l = []
        while q:
            subtree = q.pop()
            l.append( subtree )
            if id(subtree) in visited:
                continue    # already been here from another branch
            visited.add(id(subtree))
            q += [c for c in subtree.children if isinstance(c, Tree)]

        seen = set()
        for x in reversed(l):
            if id(x) not in seen:
                yield x
                seen.add(id(x))

    def find_pred(self, pred):
        "Find all nodes where pred(tree) == True"
        return filter(pred, self.iter_subtrees())

    def find_data(self, data):
        "Find all nodes where tree.data == data"
        return self.find_pred(lambda t: t.data == data)


from inspect import getmembers, getmro

class Discard(Exception):
    pass

# Transformers

class Transformer:
    """Visits the tree recursively, starting with the leaves and finally the root (bottom-up)

    Calls its methods (provided by user via inheritance) according to tree.data
    The returned value replaces the old one in the structure.

    Can be used to implement map or reduce.
    """

    __visit_tokens__ = False   # For backwards compatibility
    def __init__(self,  visit_tokens=False):
        self.__visit_tokens__ = visit_tokens

    def _call_userfunc(self, tree, new_children=None):
        # Assumes tree is already transformed
        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            try:
                if getattr(f, 'meta', False):
                    return f(children, tree.meta)
                elif getattr(f, 'inline', False):
                    return f(*children)
                elif getattr(f, 'whole_tree', False):
                    if new_children is not None:
                        tree.children = new_children
                    return f(tree)
                else:
                    return f(children)
            except (GrammarError, Discard):
                raise
            except Exception as e:
                raise VisitError(tree, e)

    def _call_userfunc_token(self, token):
        try:
            f = getattr(self, token.type)
        except AttributeError:
            return self.__default_token__(token)
        else:
            try:
                return f(token)
            except (GrammarError, Discard):
                raise
            except Exception as e:
                raise VisitError(token, e)


    def _transform_children(self, children):
        for c in children:
            try:
                if isinstance(c, Tree):
                    yield self._transform_tree(c)
                elif self.__visit_tokens__ and isinstance(c, Token):
                    yield self._call_userfunc_token(c)
                else:
                    yield c
            except Discard:
                pass

    def _transform_tree(self, tree):
        children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree, children)

    def transform(self, tree):
        return self._transform_tree(tree)

    def __mul__(self, other):
        return TransformerChain(self, other)

    def __default__(self, data, children, meta):
        "Default operation on tree (for override)"
        return Tree(data, children, meta)

    def __default_token__(self, token):
        "Default operation on token (for override)"
        return token


    @classmethod
    def _apply_decorator(cls, decorator, **kwargs):
        mro = getmro(cls)
        assert mro[0] is cls
        libmembers = {name for _cls in mro[1:] for name, _ in getmembers(_cls)}
        for name, value in getmembers(cls):

            # Make sure the function isn't inherited (unless it's overwritten)
            if name.startswith('_') or (name in libmembers and name not in cls.__dict__):
                continue
            if not callable(cls.__dict__[name]):
                continue

            # Skip if v_args already applied (at the function level)
            if hasattr(cls.__dict__[name], 'vargs_applied'):
                continue

            static = isinstance(cls.__dict__[name], (staticmethod, classmethod))
            setattr(cls, name, decorator(value, static=static, **kwargs))
        return cls


class InlineTransformer(Transformer):   # XXX Deprecated
    def _call_userfunc(self, tree, new_children=None):
        # Assumes tree is already transformed
        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            return f(*children)


class TransformerChain(object):
    def __init__(self, *transformers):
        self.transformers = transformers

    def transform(self, tree):
        for t in self.transformers:
            tree = t.transform(tree)
        return tree

    def __mul__(self, other):
        return TransformerChain(*self.transformers + (other,))


class Transformer_InPlace(Transformer):
    "Non-recursive. Changes the tree in-place instead of returning new instances"
    def _transform_tree(self, tree):           # Cancel recursion
        return self._call_userfunc(tree)

    def transform(self, tree):
        for subtree in tree.iter_subtrees():
            subtree.children = list(self._transform_children(subtree.children))

        return self._transform_tree(tree)


class Transformer_InPlaceRecursive(Transformer):
    "Recursive. Changes the tree in-place instead of returning new instances"
    def _transform_tree(self, tree):
        tree.children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree)



# Visitors

class VisitorBase:
    def _call_userfunc(self, tree):
        return getattr(self, tree.data, self.__default__)(tree)

    def __default__(self, tree):
        "Default operation on tree (for override)"
        return tree


class Visitor(VisitorBase):
    """Bottom-up visitor, non-recursive

    Visits the tree, starting with the leaves and finally the root (bottom-up)
    Calls its methods (provided by user via inheritance) according to tree.data
    """


    def visit(self, tree):
        for subtree in tree.iter_subtrees():
            self._call_userfunc(subtree)
        return tree

class Visitor_Recursive(VisitorBase):
    """Bottom-up visitor, recursive

    Visits the tree, starting with the leaves and finally the root (bottom-up)
    Calls its methods (provided by user via inheritance) according to tree.data
    """

    def visit(self, tree):
        for child in tree.children:
            if isinstance(child, Tree):
                self.visit(child)

        f = getattr(self, tree.data, self.__default__)
        f(tree)
        return tree



def visit_children_decor(func):
    "See Interpreter"
    @wraps(func)
    def inner(cls, tree):
        values = cls.visit_children(tree)
        return func(cls, values)
    return inner


class Interpreter:
    """Top-down visitor, recursive

    Visits the tree, starting with the root and finally the leaves (top-down)
    Calls its methods (provided by user via inheritance) according to tree.data

    Unlike Transformer and Visitor, the Interpreter doesn't automatically visit its sub-branches.
    The user has to explicitly call visit_children, or use the @visit_children_decor
    """
    def visit(self, tree):
        return getattr(self, tree.data)(tree)

    def visit_children(self, tree):
        return [self.visit(child) if isinstance(child, Tree) else child
                for child in tree.children]

    def __getattr__(self, name):
        return self.__default__

    def __default__(self, tree):
        return self.visit_children(tree)




# Decorators

def _apply_decorator(obj, decorator, **kwargs):
    try:
        _apply = obj._apply_decorator
    except AttributeError:
        return decorator(obj, **kwargs)
    else:
        return _apply(decorator, **kwargs)



def _inline_args__func(func):
    @wraps(func)
    def create_decorator(_f, with_self):
        if with_self:
            def f(self, children):
                return _f(self, *children)
        else:
            def f(self, children):
                return _f(*children)
        return f

    return smart_decorator(func, create_decorator)


def inline_args(obj):   # XXX Deprecated
    return _apply_decorator(obj, _inline_args__func)



def _visitor_args_func_dec(func, inline=False, meta=False, whole_tree=False, static=False):
    assert [whole_tree, meta, inline].count(True) <= 1
    def create_decorator(_f, with_self):
        if with_self:
            def f(self, *args, **kwargs):
                return _f(self, *args, **kwargs)
        else:
            def f(self, *args, **kwargs):
                return _f(*args, **kwargs)
        return f

    if static:
        f = wraps(func)(create_decorator(func, False))
    else:
        f = smart_decorator(func, create_decorator)
    f.vargs_applied = True
    f.inline = inline
    f.meta = meta
    f.whole_tree = whole_tree
    return f

def v_args(inline=False, meta=False, tree=False):
    "A convenience decorator factory, for modifying the behavior of user-supplied visitor methods"
    if [tree, meta, inline].count(True) > 1:
        raise ValueError("Visitor functions can either accept tree, or meta, or be inlined. These cannot be combined.")
    def _visitor_args_dec(obj):
        return _apply_decorator(obj, _visitor_args_func_dec, inline=inline, meta=meta, whole_tree=tree)
    return _visitor_args_dec



class Indenter:
    def __init__(self):
        self.paren_level = None
        self.indent_level = None
        assert self.tab_len > 0

    def handle_NL(self, token):
        if self.paren_level > 0:
            return

        yield token

        indent_str = token.rsplit('\n', 1)[1] # Tabs and spaces
        indent = indent_str.count(' ') + indent_str.count('\t') * self.tab_len

        if indent > self.indent_level[-1]:
            self.indent_level.append(indent)
            yield Token.new_borrow_pos(self.INDENT_type, indent_str, token)
        else:
            while indent < self.indent_level[-1]:
                self.indent_level.pop()
                yield Token.new_borrow_pos(self.DEDENT_type, indent_str, token)

            assert indent == self.indent_level[-1], '%s != %s' % (indent, self.indent_level[-1])

    def _process(self, stream):
        for token in stream:
            if token.type == self.NL_type:
                for t in self.handle_NL(token):
                    yield t
            else:
                yield token

            if token.type in self.OPEN_PAREN_types:
                self.paren_level += 1
            elif token.type in self.CLOSE_PAREN_types:
                self.paren_level -= 1
                assert self.paren_level >= 0

        while len(self.indent_level) > 1:
            self.indent_level.pop()
            yield Token(self.DEDENT_type, '')

        assert self.indent_level == [0], self.indent_level

    def process(self, stream):
        self.paren_level = 0
        self.indent_level = [0]
        return self._process(stream)

    # XXX Hack for ContextualLexer. Maybe there's a more elegant solution?
    @property
    def always_accept(self):
        return (self.NL_type,)



class Symbol(Serialize):
    is_term = NotImplemented

    def __init__(self, name):
        self.name = name

    def __eq__(self, other):
        assert isinstance(other, Symbol), other
        return self.is_term == other.is_term and self.name == other.name

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self):
        return hash(self.name)

    def __repr__(self):
        return '%s(%r)' % (type(self).__name__, self.name)

    fullrepr = property(__repr__)


class Terminal(Symbol):
    __serialize_fields__ = 'name', 'filter_out'

    is_term = True

    def __init__(self, name, filter_out=False):
        self.name = name
        self.filter_out = filter_out

    @property
    def fullrepr(self):
        return '%s(%r, %r)' % (type(self).__name__, self.name, self.filter_out)



class NonTerminal(Symbol):
    __serialize_fields__ = 'name',

    is_term = False



class RuleOptions(Serialize):
    __serialize_fields__ = 'keep_all_tokens', 'expand1', 'priority', 'empty_indices'

    def __init__(self, keep_all_tokens=False, expand1=False, priority=None, empty_indices=()):
        self.keep_all_tokens = keep_all_tokens
        self.expand1 = expand1
        self.priority = priority
        self.empty_indices = empty_indices

    def __repr__(self):
        return 'RuleOptions(%r, %r, %r)' % (
            self.keep_all_tokens,
            self.expand1,
            self.priority,
        )


class Rule(Serialize):
    """
        origin : a symbol
        expansion : a list of symbols
        order : index of this expansion amongst all rules of the same name
    """
    __slots__ = ('origin', 'expansion', 'alias', 'options', 'order', '_hash')

    __serialize_fields__ = 'origin', 'expansion', 'order', 'alias', 'options'
    __serialize_namespace__ = Terminal, NonTerminal, RuleOptions

    def __init__(self, origin, expansion, order=0, alias=None, options=None):
        self.origin = origin
        self.expansion = expansion
        self.alias = alias
        self.order = order
        self.options = options
        self._hash = hash((self.origin, tuple(self.expansion)))

    def _deserialize(self):
        self._hash = hash((self.origin, tuple(self.expansion)))

    def __str__(self):
        return '<%s : %s>' % (self.origin.name, ' '.join(x.name for x in self.expansion))

    def __repr__(self):
        return 'Rule(%r, %r, %r, %r)' % (self.origin, self.expansion, self.alias, self.options)

    def __hash__(self):
        return self._hash

    def __eq__(self, other):
        if not isinstance(other, Rule):
            return False
        return self.origin == other.origin and self.expansion == other.expansion





class Pattern(Serialize):

    def __init__(self, value, flags=()):
        self.value = value
        self.flags = frozenset(flags)

    def __repr__(self):
        return repr(self.to_regexp())

    # Pattern Hashing assumes all subclasses have a different priority!
    def __hash__(self):
        return hash((type(self), self.value, self.flags))
    def __eq__(self, other):
        return type(self) == type(other) and self.value == other.value and self.flags == other.flags

    def to_regexp(self):
        raise NotImplementedError()

    if Py36:
        # Python 3.6 changed syntax for flags in regular expression
        def _get_flags(self, value):
            for f in self.flags:
                value = ('(?%s:%s)' % (f, value))
            return value

    else:
        def _get_flags(self, value):
            for f in self.flags:
                value = ('(?%s)' % f) + value
            return value


class PatternStr(Pattern):
    __serialize_fields__ = 'value', 'flags'

    type = "str"

    def to_regexp(self):
        return self._get_flags(re.escape(self.value))

    @property
    def min_width(self):
        return len(self.value)
    max_width = min_width

class PatternRE(Pattern):
    __serialize_fields__ = 'value', 'flags', '_width'

    type = "re"

    def to_regexp(self):
        return self._get_flags(self.value)

    _width = None
    def _get_width(self):
        if self._width is None:
            self._width = get_regexp_width(self.to_regexp())
        return self._width

    @property
    def min_width(self):
        return self._get_width()[0]
    @property
    def max_width(self):
        return self._get_width()[1]


class TerminalDef(Serialize):
    __serialize_fields__ = 'name', 'pattern', 'priority'
    __serialize_namespace__ = PatternStr, PatternRE

    def __init__(self, name, pattern, priority=1):
        assert isinstance(pattern, Pattern), pattern
        self.name = name
        self.pattern = pattern
        self.priority = priority

    def __repr__(self):
        return '%s(%r, %r)' % (type(self).__name__, self.name, self.pattern)



class Token(Str):
    __slots__ = ('type', 'pos_in_stream', 'value', 'line', 'column', 'end_line', 'end_column')

    def __new__(cls, type_, value, pos_in_stream=None, line=None, column=None, end_line=None, end_column=None):
        try:
            self = super(Token, cls).__new__(cls, value)
        except UnicodeDecodeError:
            value = value.decode('latin1')
            self = super(Token, cls).__new__(cls, value)

        self.type = type_
        self.pos_in_stream = pos_in_stream
        self.value = value
        self.line = line
        self.column = column
        self.end_line = end_line
        self.end_column = end_column
        return self

    @classmethod
    def new_borrow_pos(cls, type_, value, borrow_t):
        return cls(type_, value, borrow_t.pos_in_stream, borrow_t.line, borrow_t.column, borrow_t.end_line, borrow_t.end_column)

    def __reduce__(self):
        return (self.__class__, (self.type, self.value, self.pos_in_stream, self.line, self.column, ))

    def __repr__(self):
        return 'Token(%s, %r)' % (self.type, self.value)

    def __deepcopy__(self, memo):
        return Token(self.type, self.value, self.pos_in_stream, self.line, self.column)

    def __eq__(self, other):
        if isinstance(other, Token) and self.type != other.type:
            return False

        return Str.__eq__(self, other)

    __hash__ = Str.__hash__


class LineCounter:
    def __init__(self):
        self.newline_char = '\n'
        self.char_pos = 0
        self.line = 1
        self.column = 1
        self.line_start_pos = 0

    def feed(self, token, test_newline=True):
        """Consume a token and calculate the new line & column.

        As an optional optimization, set test_newline=False is token doesn't contain a newline.
        """
        if test_newline:
            newlines = token.count(self.newline_char)
            if newlines:
                self.line += newlines
                self.line_start_pos = self.char_pos + token.rindex(self.newline_char) + 1

        self.char_pos += len(token)
        self.column = self.char_pos - self.line_start_pos + 1

class _Lex:
    "Built to serve both Lexer and ContextualLexer"
    def __init__(self, lexer, state=None):
        self.lexer = lexer
        self.state = state

    def lex(self, stream, newline_types, ignore_types):
        newline_types = frozenset(newline_types)
        ignore_types = frozenset(ignore_types)
        line_ctr = LineCounter()
        last_token = None

        while line_ctr.char_pos < len(stream):
            lexer = self.lexer
            res = lexer.match(stream, line_ctr.char_pos)
            if not res:
                allowed = {v for m, tfi in lexer.mres for v in tfi.values()} - ignore_types
                if not allowed:
                    allowed = {"<END-OF-FILE>"}
                raise UnexpectedCharacters(stream, line_ctr.char_pos, line_ctr.line, line_ctr.column, allowed=allowed, state=self.state, token_history=last_token and [last_token])

            value, type_ = res

            t = None
            if type_ not in ignore_types:
                t = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column)
                if t.type in lexer.callback:
                    t = lexer.callback[t.type](t)
                    if not isinstance(t, Token):
                        raise ValueError("Callbacks must return a token (returned %r)" % t)
                last_token = t
                yield t
            else:
                if type_ in lexer.callback:
                    t = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column)
                    lexer.callback[type_](t)

            line_ctr.feed(value, type_ in newline_types)
            if t:
                t.end_line = line_ctr.line
                t.end_column = line_ctr.column


class UnlessCallback:
    def __init__(self, mres):
        self.mres = mres

    def __call__(self, t):
        for mre, type_from_index in self.mres:
            m = mre.match(t.value)
            if m:
                t.type = type_from_index[m.lastindex]
                break
        return t

class CallChain:
    def __init__(self, callback1, callback2, cond):
        self.callback1 = callback1
        self.callback2 = callback2
        self.cond = cond

    def __call__(self, t):
        t2 = self.callback1(t)
        return self.callback2(t) if self.cond(t2) else t2





def _create_unless(terminals):
    tokens_by_type = classify(terminals, lambda t: type(t.pattern))
    assert len(tokens_by_type) <= 2, tokens_by_type.keys()
    embedded_strs = set()
    callback = {}
    for retok in tokens_by_type.get(PatternRE, []):
        unless = [] # {}
        for strtok in tokens_by_type.get(PatternStr, []):
            if strtok.priority > retok.priority:
                continue
            s = strtok.pattern.value
            m = re.match(retok.pattern.to_regexp(), s)
            if m and m.group(0) == s:
                unless.append(strtok)
                if strtok.pattern.flags <= retok.pattern.flags:
                    embedded_strs.add(strtok)
        if unless:
            callback[retok.name] = UnlessCallback(build_mres(unless, match_whole=True))

    terminals = [t for t in terminals if t not in embedded_strs]
    return terminals, callback


def _build_mres(terminals, max_size, match_whole):
    # Python sets an unreasonable group limit (currently 100) in its re module
    # Worse, the only way to know we reached it is by catching an AssertionError!
    # This function recursively tries less and less groups until it's successful.
    postfix = '$' if match_whole else ''
    mres = []
    while terminals:
        try:
            mre = re.compile(u'|'.join(u'(?P<%s>%s)'%(t.name, t.pattern.to_regexp()+postfix) for t in terminals[:max_size]))
        except AssertionError:  # Yes, this is what Python provides us.. :/
            return _build_mres(terminals, max_size//2, match_whole)

        # terms_from_name = {t.name: t for t in terminals[:max_size]}
        mres.append((mre, {i:n for n,i in mre.groupindex.items()} ))
        terminals = terminals[max_size:]
    return mres

def build_mres(terminals, match_whole=False):
    return _build_mres(terminals, len(terminals), match_whole)

def _regexp_has_newline(r):
    r"""Expressions that may indicate newlines in a regexp:
        - newlines (\n)
        - escaped newline (\\n)
        - anything but ([^...])
        - any-char (.) when the flag (?s) exists
        - spaces (\s)
    """
    return '\n' in r or '\\n' in r or '\\s' in r or '[^' in r or ('(?s' in r and '.' in r)

class Lexer(object):
    """Lexer interface

    Method Signatures:
        lex(self, stream) -> Iterator[Token]

        set_parser_state(self, state)   # Optional
    """
    set_parser_state = NotImplemented
    lex = NotImplemented


class TraditionalLexer(Lexer):

    def __init__(self, terminals, ignore=(), user_callbacks={}):
        assert all(isinstance(t, TerminalDef) for t in terminals), terminals

        terminals = list(terminals)

        # Sanitization
        for t in terminals:
            try:
                re.compile(t.pattern.to_regexp())
            except:
                raise LexError("Cannot compile token %s: %s" % (t.name, t.pattern))

            if t.pattern.min_width == 0:
                raise LexError("Lexer does not allow zero-width terminals. (%s: %s)" % (t.name, t.pattern))

        assert set(ignore) <= {t.name for t in terminals}

        # Init
        self.newline_types = [t.name for t in terminals if _regexp_has_newline(t.pattern.to_regexp())]
        self.ignore_types = list(ignore)

        terminals.sort(key=lambda x:(-x.priority, -x.pattern.max_width, -len(x.pattern.value), x.name))
        self.terminals = terminals
        self.user_callbacks = user_callbacks
        self.build()

    def build(self):
        terminals, self.callback = _create_unless(self.terminals)
        assert all(self.callback.values())

        for type_, f in self.user_callbacks.items():
            if type_ in self.callback:
                # Already a callback there, probably UnlessCallback
                self.callback[type_] = CallChain(self.callback[type_], f, lambda t: t.type == type_)
            else:
                self.callback[type_] = f

        self.mres = build_mres(terminals)

    def match(self, stream, pos):
        for mre, type_from_index in self.mres:
            m = mre.match(stream, pos)
            if m:
                return m.group(0), type_from_index[m.lastindex]

    def lex(self, stream):
        return _Lex(self).lex(stream, self.newline_types, self.ignore_types)




class ContextualLexer(Lexer):
    def __init__(self, terminals, states, ignore=(), always_accept=(), user_callbacks={}):
        tokens_by_name = {}
        for t in terminals:
            assert t.name not in tokens_by_name, t
            tokens_by_name[t.name] = t

        lexer_by_tokens = {}
        self.lexers = {}
        for state, accepts in states.items():
            key = frozenset(accepts)
            try:
                lexer = lexer_by_tokens[key]
            except KeyError:
                accepts = set(accepts) | set(ignore) | set(always_accept)
                state_tokens = [tokens_by_name[n] for n in accepts if n and n in tokens_by_name]
                lexer = TraditionalLexer(state_tokens, ignore=ignore, user_callbacks=user_callbacks)
                lexer_by_tokens[key] = lexer

            self.lexers[state] = lexer

        self.root_lexer = TraditionalLexer(terminals, ignore=ignore, user_callbacks=user_callbacks)

        self.set_parser_state(None) # Needs to be set on the outside

    def set_parser_state(self, state):
        self.parser_state = state

    def lex(self, stream):
        l = _Lex(self.lexers[self.parser_state], self.parser_state)
        try:
            for x in l.lex(stream, self.root_lexer.newline_types, self.root_lexer.ignore_types):
                yield x
                l.lexer = self.lexers[self.parser_state]
                l.state = self.parser_state
        except UnexpectedCharacters as e:
            # In the contextual lexer, UnexpectedCharacters can mean that the terminal is defined,
            # but not in the current context.
            # This tests the input against the global context, to provide a nicer error.
            root_match = self.root_lexer.match(stream, e.pos_in_stream)
            if not root_match:
                raise

            value, type_ = root_match
            t = Token(type_, value, e.pos_in_stream, e.line, e.column)
            raise UnexpectedToken(t, e.allowed)



class LexerConf(Serialize):
    __serialize_fields__ = 'tokens', 'ignore'
    __serialize_namespace__ = TerminalDef,

    def __init__(self, tokens, ignore=(), postlex=None, callbacks=None):
        self.tokens = tokens
        self.ignore = ignore
        self.postlex = postlex
        self.callbacks = callbacks or {}

    def _deserialize(self):
        self.callbacks = {} # TODO


from functools import partial, wraps
from itertools import repeat, product


class ExpandSingleChild:
    def __init__(self, node_builder):
        self.node_builder = node_builder

    def __call__(self, children):
        if len(children) == 1:
            return children[0]
        else:
            return self.node_builder(children)

class PropagatePositions:
    def __init__(self, node_builder):
        self.node_builder = node_builder

    def __call__(self, children):
        res = self.node_builder(children)

        if isinstance(res, Tree):
            for c in children:
                if isinstance(c, Tree) and c.children and not c.meta.empty:
                    res.meta.line = c.meta.line
                    res.meta.column = c.meta.column
                    res.meta.start_pos = c.meta.start_pos
                    res.meta.empty = False
                    break
                elif isinstance(c, Token):
                    res.meta.line = c.line
                    res.meta.column = c.column
                    res.meta.start_pos = c.pos_in_stream
                    res.meta.empty = False
                    break

            for c in reversed(children):
                if isinstance(c, Tree) and c.children and not c.meta.empty:
                    res.meta.end_line = c.meta.end_line
                    res.meta.end_column = c.meta.end_column
                    res.meta.end_pos = c.meta.end_pos
                    res.meta.empty = False
                    break
                elif isinstance(c, Token):
                    res.meta.end_line = c.end_line
                    res.meta.end_column = c.end_column
                    res.meta.end_pos = c.pos_in_stream + len(c.value)
                    res.meta.empty = False
                    break

        return res


class ChildFilter:
    def __init__(self, to_include, append_none, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include
        self.append_none = append_none

    def __call__(self, children):
        filtered = []

        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                filtered += children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)

class ChildFilterLALR(ChildFilter):
    "Optimized childfilter for LALR (assumes no duplication in parse tree, so it's safe to change it)"

    def __call__(self, children):
        filtered = []
        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   # Optimize for left-recursion
                    filtered = children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)

class ChildFilterLALR_NoPlaceholders(ChildFilter):
    "Optimized childfilter for LALR (assumes no duplication in parse tree, so it's safe to change it)"
    def __init__(self, to_include, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include

    def __call__(self, children):
        filtered = []
        for i, to_expand in self.to_include:
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   # Optimize for left-recursion
                    filtered = children[i].children
            else:
                filtered.append(children[i])
        return self.node_builder(filtered)

def _should_expand(sym):
    return not sym.is_term and sym.name.startswith('_')

def maybe_create_child_filter(expansion, keep_all_tokens, ambiguous, _empty_indices):
    # Prepare empty_indices as: How many Nones to insert at each index?
    if _empty_indices:
        assert _empty_indices.count(False) == len(expansion)
        s = ''.join(str(int(b)) for b in _empty_indices)
        empty_indices = [len(ones) for ones in s.split('0')]
        assert len(empty_indices) == len(expansion)+1, (empty_indices, len(expansion))
    else:
        empty_indices = [0] * (len(expansion)+1)

    to_include = []
    nones_to_add = 0
    for i, sym in enumerate(expansion):
        nones_to_add += empty_indices[i]
        if keep_all_tokens or not (sym.is_term and sym.filter_out):
            to_include.append((i, _should_expand(sym), nones_to_add))
            nones_to_add = 0

    nones_to_add += empty_indices[len(expansion)]

    if _empty_indices or len(to_include) < len(expansion) or any(to_expand for i, to_expand,_ in to_include):
        if _empty_indices or ambiguous:
            return partial(ChildFilter if ambiguous else ChildFilterLALR, to_include, nones_to_add)
        else:
            # LALR without placeholders
            return partial(ChildFilterLALR_NoPlaceholders, [(i, x) for i,x,_ in to_include])

class AmbiguousExpander:
    """Deal with the case where we're expanding children ('_rule') into a parent but the children
       are ambiguous. i.e. (parent->_ambig->_expand_this_rule). In this case, make the parent itself
       ambiguous with as many copies as their are ambiguous children, and then copy the ambiguous children
       into the right parents in the right places, essentially shifting the ambiguiuty up the tree."""
    def __init__(self, to_expand, tree_class, node_builder):
        self.node_builder = node_builder
        self.tree_class = tree_class
        self.to_expand = to_expand

    def __call__(self, children):
        def _is_ambig_tree(child):
            return hasattr(child, 'data') and child.data == '_ambig'

        #### When we're repeatedly expanding ambiguities we can end up with nested ambiguities.
        #    All children of an _ambig node should be a derivation of that ambig node, hence
        #    it is safe to assume that if we see an _ambig node nested within an ambig node
        #    it is safe to simply expand it into the parent _ambig node as an alternative derivation.
        ambiguous = []
        for i, child in enumerate(children):
            if _is_ambig_tree(child):
                if i in self.to_expand:
                    ambiguous.append(i)

                to_expand = [j for j, grandchild in enumerate(child.children) if _is_ambig_tree(grandchild)]
                child.expand_kids_by_index(*to_expand)

        if not ambiguous:
            return self.node_builder(children)

        expand = [ iter(child.children) if i in ambiguous else repeat(child) for i, child in enumerate(children) ]
        return self.tree_class('_ambig', [self.node_builder(list(f[0])) for f in product(zip(*expand))])

def maybe_create_ambiguous_expander(tree_class, expansion, keep_all_tokens):
    to_expand = [i for i, sym in enumerate(expansion)
                 if keep_all_tokens or ((not (sym.is_term and sym.filter_out)) and _should_expand(sym))]
    if to_expand:
        return partial(AmbiguousExpander, to_expand, tree_class)

def ptb_inline_args(func):
    @wraps(func)
    def f(children):
        return func(*children)
    return f

def inplace_transformer(func):
    @wraps(func)
    def f(children):
        # function name in a Transformer is a rule name.
        tree = Tree(func.__name__, children)
        return func(tree)
    return f

class ParseTreeBuilder:
    def __init__(self, rules, tree_class, propagate_positions=False, keep_all_tokens=False, ambiguous=False, maybe_placeholders=False):
        self.tree_class = tree_class
        self.propagate_positions = propagate_positions
        self.always_keep_all_tokens = keep_all_tokens
        self.ambiguous = ambiguous
        self.maybe_placeholders = maybe_placeholders

        self.rule_builders = list(self._init_builders(rules))

    def _init_builders(self, rules):
        for rule in rules:
            options = rule.options
            keep_all_tokens = self.always_keep_all_tokens or (options.keep_all_tokens if options else False)
            expand_single_child = options.expand1 if options else False

            wrapper_chain = list(filter(None, [
                (expand_single_child and not rule.alias) and ExpandSingleChild,
                maybe_create_child_filter(rule.expansion, keep_all_tokens, self.ambiguous, options.empty_indices if self.maybe_placeholders and options else None),
                self.propagate_positions and PropagatePositions,
                self.ambiguous and maybe_create_ambiguous_expander(self.tree_class, rule.expansion, keep_all_tokens),
            ]))

            yield rule, wrapper_chain


    def create_callback(self, transformer=None):
        callbacks = {}

        for rule, wrapper_chain in self.rule_builders:

            user_callback_name = rule.alias or rule.origin.name
            try:
                f = getattr(transformer, user_callback_name)
                assert not getattr(f, 'meta', False), "Meta args not supported for internal transformer"
                # XXX InlineTransformer is deprecated!
                if getattr(f, 'inline', False) or isinstance(transformer, InlineTransformer):
                    f = ptb_inline_args(f)
                elif hasattr(f, 'whole_tree') or isinstance(transformer, Transformer_InPlace):
                    f = inplace_transformer(f)
            except AttributeError:
                f = partial(self.tree_class, user_callback_name)

            for w in wrapper_chain:
                f = w(f)

            if rule in callbacks:
                raise GrammarError("Rule '%s' already exists" % (rule,))

            callbacks[rule] = f

        return callbacks


class LALR_Parser(object):
    def __init__(self, parser_conf, debug=False):
        assert all(r.options is None or r.options.priority is None
                   for r in parser_conf.rules), "LALR doesn't yet support prioritization"
        analysis = LALR_Analyzer(parser_conf, debug=debug)
        analysis.compute_lookahead()
        callbacks = parser_conf.callbacks

        self._parse_table = analysis.parse_table
        self.parser_conf = parser_conf
        self.parser = _Parser(analysis.parse_table, callbacks)

    @classmethod
    def deserialize(cls, data, memo, callbacks):
        inst = cls.__new__(cls)
        inst._parse_table = IntParseTable.deserialize(data, memo)
        inst.parser = _Parser(inst._parse_table, callbacks)
        return inst

    def serialize(self, memo):
        return self._parse_table.serialize(memo)

    def parse(self, *args):
        return self.parser.parse(*args)


class _Parser:
    def __init__(self, parse_table, callbacks):
        self.states = parse_table.states
        self.start_states = parse_table.start_states
        self.end_states = parse_table.end_states
        self.callbacks = callbacks

    def parse(self, seq, start, set_state=None):
        token = None
        stream = iter(seq)
        states = self.states

        start_state = self.start_states[start]
        end_state = self.end_states[start]

        state_stack = [start_state]
        value_stack = []

        if set_state: set_state(start_state)

        def get_action(token):
            state = state_stack[-1]
            try:
                return states[state][token.type]
            except KeyError:
                expected = [s for s in states[state].keys() if s.isupper()]
                raise UnexpectedToken(token, expected, state=state)

        def reduce(rule):
            size = len(rule.expansion)
            if size:
                s = value_stack[-size:]
                del state_stack[-size:]
                del value_stack[-size:]
            else:
                s = []

            value = self.callbacks[rule](s)

            _action, new_state = states[state_stack[-1]][rule.origin.name]
            assert _action is Shift
            state_stack.append(new_state)
            value_stack.append(value)

        # Main LALR-parser loop
        for token in stream:
            while True:
                action, arg = get_action(token)
                assert arg != end_state

                if action is Shift:
                    state_stack.append(arg)
                    value_stack.append(token)
                    if set_state: set_state(arg)
                    break # next token
                else:
                    reduce(arg)

        token = Token.new_borrow_pos('$END', '', token) if token else Token('$END', '', 0, 1, 1)
        while True:
            _action, arg = get_action(token)
            if _action is Shift:
                assert arg == end_state
                val ,= value_stack
                return val
            else:
                reduce(arg)



class Action:
    def __init__(self, name):
        self.name = name
    def __str__(self):
        return self.name
    def __repr__(self):
        return str(self)

Shift = Action('Shift')
Reduce = Action('Reduce')

class ParseTable:
    def __init__(self, states, start_states, end_states):
        self.states = states
        self.start_states = start_states
        self.end_states = end_states

    def serialize(self, memo):
        tokens = Enumerator()
        rules = Enumerator()

        states = {
            state: {tokens.get(token): ((1, arg.serialize(memo)) if action is Reduce else (0, arg))
                    for token, (action, arg) in actions.items()}
            for state, actions in self.states.items()
        }

        return {
            'tokens': tokens.reversed(),
            'states': states,
            'start_states': self.start_states,
            'end_states': self.end_states,
        }

    @classmethod
    def deserialize(cls, data, memo):
        tokens = data['tokens']
        states = {
            state: {tokens[token]: ((Reduce, Rule.deserialize(arg, memo)) if action==1 else (Shift, arg))
                    for token, (action, arg) in actions.items()}
            for state, actions in data['states'].items()
        }
        return cls(states, data['start_states'], data['end_states'])


class IntParseTable(ParseTable):

    @classmethod
    def from_ParseTable(cls, parse_table):
        enum = list(parse_table.states)
        state_to_idx = {s:i for i,s in enumerate(enum)}
        int_states = {}

        for s, la in parse_table.states.items():
            la = {k:(v[0], state_to_idx[v[1]]) if v[0] is Shift else v
                  for k,v in la.items()}
            int_states[ state_to_idx[s] ] = la


        start_states = {start:state_to_idx[s] for start, s in parse_table.start_states.items()}
        end_states = {start:state_to_idx[s] for start, s in parse_table.end_states.items()}
        return cls(int_states, start_states, end_states)



def get_frontend(parser, lexer):
    if parser=='lalr':
        if lexer is None:
            raise ValueError('The LALR parser requires use of a lexer')
        elif lexer == 'standard':
            return LALR_TraditionalLexer
        elif lexer == 'contextual':
            return LALR_ContextualLexer
        elif issubclass(lexer, Lexer):
            return partial(LALR_CustomLexer, lexer)
        else:
            raise ValueError('Unknown lexer: %s' % lexer)
    elif parser=='earley':
        if lexer=='standard':
            return Earley
        elif lexer=='dynamic':
            return XEarley
        elif lexer=='dynamic_complete':
            return XEarley_CompleteLex
        elif lexer=='contextual':
            raise ValueError('The Earley parser does not support the contextual parser')
        else:
            raise ValueError('Unknown lexer: %s' % lexer)
    elif parser == 'cyk':
        if lexer == 'standard':
            return CYK
        else:
            raise ValueError('CYK parser requires using standard parser.')
    else:
        raise ValueError('Unknown parser: %s' % parser)


class _ParserFrontend(Serialize):
    def _parse(self, input, start, *args):
        if start is None:
            start = self.start
            if len(start) > 1:
                raise ValueError("Lark initialized with more than 1 possible start rule. Must specify which start rule to parse", start)
            start ,= start
        return self.parser.parse(input, start, *args)


class WithLexer(_ParserFrontend):
    lexer = None
    parser = None
    lexer_conf = None
    start = None

    __serialize_fields__ = 'parser', 'lexer_conf', 'start'
    __serialize_namespace__ = LexerConf,

    def __init__(self, lexer_conf, parser_conf, options=None):
        self.lexer_conf = lexer_conf
        self.start = parser_conf.start
        self.postlex = lexer_conf.postlex

    @classmethod
    def deserialize(cls, data, memo, callbacks, postlex):
        inst = super(WithLexer, cls).deserialize(data, memo)
        inst.postlex = postlex
        inst.parser = LALR_Parser.deserialize(inst.parser, memo, callbacks)
        inst.init_lexer()
        return inst

    def _serialize(self, data, memo):
        data['parser'] = data['parser'].serialize(memo)

    def lex(self, text):
        stream = self.lexer.lex(text)
        return self.postlex.process(stream) if self.postlex else stream

    def parse(self, text, start=None):
        token_stream = self.lex(text)
        sps = self.lexer.set_parser_state
        return self._parse(token_stream, start, *[sps] if sps is not NotImplemented else [])

    def init_traditional_lexer(self):
        self.lexer = TraditionalLexer(self.lexer_conf.tokens, ignore=self.lexer_conf.ignore, user_callbacks=self.lexer_conf.callbacks)

class LALR_WithLexer(WithLexer):
    def __init__(self, lexer_conf, parser_conf, options=None):
        debug = options.debug if options else False
        self.parser = LALR_Parser(parser_conf, debug=debug)
        WithLexer.__init__(self, lexer_conf, parser_conf, options)

        self.init_lexer()

    def init_lexer(self):
        raise NotImplementedError()

class LALR_TraditionalLexer(LALR_WithLexer):
    def init_lexer(self):
        self.init_traditional_lexer()

class LALR_ContextualLexer(LALR_WithLexer):
    def init_lexer(self):
        states = {idx:list(t.keys()) for idx, t in self.parser._parse_table.states.items()}
        always_accept = self.postlex.always_accept if self.postlex else ()
        self.lexer = ContextualLexer(self.lexer_conf.tokens, states,
                                     ignore=self.lexer_conf.ignore,
                                     always_accept=always_accept,
                                     user_callbacks=self.lexer_conf.callbacks)


class LarkOptions(Serialize):
    """Specifies the options for Lark

    """
    OPTIONS_DOC = """
        parser - Decides which parser engine to use, "earley" or "lalr". (Default: "earley")
                 Note: "lalr" requires a lexer

        lexer - Decides whether or not to use a lexer stage
            "standard": Use a standard lexer
            "contextual": Stronger lexer (only works with parser="lalr")
            "dynamic": Flexible and powerful (only with parser="earley")
            "dynamic_complete": Same as dynamic, but tries *every* variation
                                of tokenizing possible. (only with parser="earley")
            "auto" (default): Choose for me based on grammar and parser

        ambiguity - Decides how to handle ambiguity in the parse. Only relevant if parser="earley"
            "resolve": The parser will automatically choose the simplest derivation
                       (it chooses consistently: greedy for tokens, non-greedy for rules)
            "explicit": The parser will return all derivations wrapped in "_ambig" tree nodes (i.e. a forest).

        transformer - Applies the transformer to every parse tree
        debug - Affects verbosity (default: False)
        keep_all_tokens - Don't automagically remove "punctuation" tokens (default: False)
        cache_grammar - Cache the Lark grammar (Default: False)
        postlex - Lexer post-processing (Default: None) Only works with the standard and contextual lexers.
        start - The start symbol, either a string, or a list of strings for multiple possible starts (Default: "start")
        profile - Measure run-time usage in Lark. Read results from the profiler proprety (Default: False)
        priority - How priorities should be evaluated - auto, none, normal, invert (Default: auto)
        propagate_positions - Propagates [line, column, end_line, end_column] attributes into all tree branches.
        lexer_callbacks - Dictionary of callbacks for the lexer. May alter tokens during lexing. Use with caution.
        maybe_placeholders - Experimental feature. Instead of omitting optional rules (i.e. rule?), replace them with None
    """
    if __doc__:
        __doc__ += OPTIONS_DOC

    _defaults = {
        'debug': False,
        'keep_all_tokens': False,
        'tree_class': None,
        'cache_grammar': False,
        'postlex': None,
        'parser': 'earley',
        'lexer': 'auto',
        'transformer': None,
        'start': 'start',
        'profile': False,
        'priority': 'auto',
        'ambiguity': 'auto',
        'propagate_positions': False,
        'lexer_callbacks': {},
        'maybe_placeholders': False,
        'edit_terminals': None,
    }

    def __init__(self, options_dict):
        o = dict(options_dict)

        options = {}
        for name, default in self._defaults.items():
            if name in o:
                value = o.pop(name)
                if isinstance(default, bool):
                    value = bool(value)
            else:
                value = default

            options[name] = value

        if isinstance(options['start'], str):
            options['start'] = [options['start']]

        self.__dict__['options'] = options

        assert self.parser in ('earley', 'lalr', 'cyk', None)

        if self.parser == 'earley' and self.transformer:
            raise ValueError('Cannot specify an embedded transformer when using the Earley algorithm.'
                             'Please use your transformer on the resulting parse tree, or use a different algorithm (i.e. LALR)')

        if o:
            raise ValueError("Unknown options: %s" % o.keys())

    def __getattr__(self, name):
        return self.options[name]
    def __setattr__(self, name, value):
        assert name in self.options
        self.options[name] = value

    def serialize(self, memo):
        return self.options

    @classmethod
    def deserialize(cls, data, memo):
        return cls(data)


class Profiler:
    def __init__(self):
        self.total_time = defaultdict(float)
        self.cur_section = '__init__'
        self.last_enter_time = time.time()

    def enter_section(self, name):
        cur_time = time.time()
        self.total_time[self.cur_section] += cur_time - self.last_enter_time
        self.last_enter_time = cur_time
        self.cur_section = name

    def make_wrapper(self, name, f):
        def wrapper(*args, **kwargs):
            last_section = self.cur_section
            self.enter_section(name)
            try:
                return f(*args, **kwargs)
            finally:
                self.enter_section(last_section)

        return wrapper


class Lark(Serialize):
    def __init__(self, grammar, **options):
        """
            grammar : a string or file-object containing the grammar spec (using Lark's ebnf syntax)
            options : a dictionary controlling various aspects of Lark.
        """
        self.options = LarkOptions(options)

        # Some, but not all file-like objects have a 'name' attribute
        try:
            self.source = grammar.name
        except AttributeError:
            self.source = '<string>'

        # Drain file-like objects to get their contents
        try:
            read = grammar.read
        except AttributeError:
            pass
        else:
            grammar = read()

        assert isinstance(grammar, STRING_TYPE)

        if self.options.cache_grammar:
            raise NotImplementedError("Not available yet")

        assert not self.options.profile, "Feature temporarily disabled"
        # self.profiler = Profiler() if self.options.profile else None

        if self.options.lexer == 'auto':
            if self.options.parser == 'lalr':
                self.options.lexer = 'contextual'
            elif self.options.parser == 'earley':
                self.options.lexer = 'dynamic'
            elif self.options.parser == 'cyk':
                self.options.lexer = 'standard'
            else:
                assert False, self.options.parser
        lexer = self.options.lexer
        assert lexer in ('standard', 'contextual', 'dynamic', 'dynamic_complete') or issubclass(lexer, Lexer)

        if self.options.ambiguity == 'auto':
            if self.options.parser == 'earley':
                self.options.ambiguity = 'resolve'
        else:
            disambig_parsers = ['earley', 'cyk']
            assert self.options.parser in disambig_parsers, (
                'Only %s supports disambiguation right now') % ', '.join(disambig_parsers)

        if self.options.priority == 'auto':
            if self.options.parser in ('earley', 'cyk', ):
                self.options.priority = 'normal'
            elif self.options.parser in ('lalr', ):
                self.options.priority = None
        elif self.options.priority in ('invert', 'normal'):
            assert self.options.parser in ('earley', 'cyk'), "priorities are not supported for LALR at this time"

        assert self.options.priority in ('auto', None, 'normal', 'invert'), 'invalid priority option specified: {}. options are auto, none, normal, invert.'.format(self.options.priority)
        assert self.options.ambiguity not in ('resolve__antiscore_sum', ), 'resolve__antiscore_sum has been replaced with the option priority="invert"'
        assert self.options.ambiguity in ('resolve', 'explicit', 'auto', )

        # Parse the grammar file and compose the grammars (TODO)
        self.grammar = load_grammar(grammar, self.source)

        # Compile the EBNF grammar into BNF
        self.terminals, self.rules, self.ignore_tokens = self.grammar.compile(self.options.start)

        if self.options.edit_terminals:
            for t in self.terminals:
                self.options.edit_terminals(t)

        self._terminals_dict = {t.name:t for t in self.terminals}

        # If the user asked to invert the priorities, negate them all here.
        # This replaces the old 'resolve__antiscore_sum' option.
        if self.options.priority == 'invert':
            for rule in self.rules:
                if rule.options and rule.options.priority is not None:
                    rule.options.priority = -rule.options.priority
        # Else, if the user asked to disable priorities, strip them from the
        # rules. This allows the Earley parsers to skip an extra forest walk
        # for improved performance, if you don't need them (or didn't specify any).
        elif self.options.priority == None:
            for rule in self.rules:
                if rule.options and rule.options.priority is not None:
                    rule.options.priority = None
        self.lexer_conf = LexerConf(self.terminals, self.ignore_tokens, self.options.postlex, self.options.lexer_callbacks)

        if self.options.parser:
            self.parser = self._build_parser()
        elif lexer:
            self.lexer = self._build_lexer()

    if __init__.__doc__:
        __init__.__doc__ += "\nOPTIONS:" + LarkOptions.OPTIONS_DOC

    __serialize_fields__ = 'parser', 'rules', 'options'

    def _build_lexer(self):
        return TraditionalLexer(self.lexer_conf.tokens, ignore=self.lexer_conf.ignore, user_callbacks=self.lexer_conf.callbacks)

    def _prepare_callbacks(self):
        self.parser_class = get_frontend(self.options.parser, self.options.lexer)
        self._parse_tree_builder = ParseTreeBuilder(self.rules, self.options.tree_class or Tree, self.options.propagate_positions, self.options.keep_all_tokens, self.options.parser!='lalr' and self.options.ambiguity=='explicit', self.options.maybe_placeholders)
        self._callbacks = self._parse_tree_builder.create_callback(self.options.transformer)

    def _build_parser(self):
        self._prepare_callbacks()
        parser_conf = ParserConf(self.rules, self._callbacks, self.options.start)
        return self.parser_class(self.lexer_conf, parser_conf, options=self.options)

    @classmethod
    def deserialize(cls, data, namespace, memo, transformer=None, postlex=None):
        if memo:
            memo = SerializeMemoizer.deserialize(memo, namespace, {})
        inst = cls.__new__(cls)
        options = dict(data['options'])
        options['transformer'] = transformer
        options['postlex'] = postlex
        inst.options = LarkOptions.deserialize(options, memo)
        inst.rules = [Rule.deserialize(r, memo) for r in data['rules']]
        inst.source = '<deserialized>'
        inst._prepare_callbacks()
        inst.parser = inst.parser_class.deserialize(data['parser'], memo, inst._callbacks, inst.options.postlex)
        return inst


    @classmethod
    def open(cls, grammar_filename, rel_to=None, **options):
        """Create an instance of Lark with the grammar given by its filename

        If rel_to is provided, the function will find the grammar filename in relation to it.

        Example:

            >>> Lark.open("grammar_file.lark", rel_to=__file__, parser="lalr")
            Lark(...)

        """
        if rel_to:
            basepath = os.path.dirname(rel_to)
            grammar_filename = os.path.join(basepath, grammar_filename)
        with open(grammar_filename, encoding='utf8') as f:
            return cls(f, **options)

    def __repr__(self):
        return 'Lark(open(%r), parser=%r, lexer=%r, ...)' % (self.source, self.options.parser, self.options.lexer)


    def lex(self, text):
        "Only lex (and postlex) the text, without parsing it. Only relevant when lexer='standard'"
        if not hasattr(self, 'lexer'):
            self.lexer = self._build_lexer()
        stream = self.lexer.lex(text)
        if self.options.postlex:
            return self.options.postlex.process(stream)
        return stream

    def get_terminal(self, name):
        "Get information about a terminal"
        return self._terminals_dict[name]

    def parse(self, text, start=None):
        """Parse the given text, according to the options provided.

        The 'start' parameter is required if Lark was given multiple possible start symbols (using the start option).

        Returns a tree, unless specified otherwise.
        """
        return self.parser.parse(text, start=start)


DATA = (
{'parser': {'parser': {'tokens': {0: '$END', 1: 'DISPLAY', 2: 'VAR', 3: 'var', 4: 'praline', 5: 'def', 6: 'HASH', 7: 'pred_definition', 8: 'RESTRICT', 9: 'DEFINE', 10: 'EXECUTE', 11: 'start', 12: '_NEWLINE', 13: 'defs', 14: '__anon_star_0', 15: 'LBRACE', 16: 'praline_sub', 17: 'praline_list', 18: 'pecan_term', 19: 'praline_exponent', 20: 'ESCAPED_STRING', 21: 'LET', 22: 'LPAR', 23: 'praline_prepend', 24: 'praline_compare', 25: 'int', 26: 'app', 27: 'praline_arith', 28: '__ANON_9', 29: 'IF', 30: 'string', 31: 'DO', 32: 'DISJ', 33: 'FALSE', 34: 'MATCH', 35: 'praline_operator', 36: 'LSQB', 37: 'praline_div', 38: 'TRUE', 39: 'praline_mul', 40: 'operator_sym_char', 41: 'praline_add', 42: 'operator_sym', 43: 'INT', 44: 'MINUS', 45: 'term', 46: 'praline_tuple', 47: '__ANON_8', 48: 'CONJ', 49: 'COMP', 50: 'BACKSLASH', 51: '__anon_plus_5', 52: 'praline_atom', 53: 'CIRCUMFLEX', 54: '__ANON_5', 55: '_EQ', 56: '_ELSE', 57: 'IN', 58: 'RSQB', 59: '_GE', 60: '__ANON_7', 61: 'DOT', 62: 'THEN', 63: 'COMMA', 64: 'RBRACE', 65: 'END', 66: 'WITH', 67: 'IFF', 68: 'ARE', 69: '__ANON_6', 70: '_NE', 71: 'CASE', 72: 'PLUS', 73: 'BE', 74: 'ELSE', 75: 'LESSTHAN', 76: '_IMPLIES', 77: 'RPAR', 78: 'STAR', 79: '_IFF', 80: 'MORETHAN', 81: 'SLASH', 82: '_LE', 83: '_IS', 84: '__ANON_4', 85: 'CONTEXT', 86: 'LOAD', 87: '__ANON_2', 88: '__ANON_1', 89: '__ANON_0', 90: 'FORGET', 91: '__ANON_3', 92: 'TYPE', 93: 'IMPORT', 94: 'SHUFFLE', 95: 'varlist', 96: 'restriction', 97: '__ANON_11', 98: 'FORALL', 99: 'EXISTS', 100: '__ANON_10', 101: 'div_expr', 102: 'bool', 103: 'atom', 104: 'call', 105: 'mul_expr', 106: 'exists_sym', 107: 'forall_sym', 108: 'arith', 109: 'pred', 110: 'expr', 111: 'add_expr', 112: 'sub_expr', 113: 'comparison', 114: '__anon_star_9', 115: 'COLON', 116: '__anon_plus_12', 117: '__anon_star_10', 118: '__anon_plus_2', 119: '__anon_star_8', 120: '__anon_star_7', 121: '__anon_star_6', 122: 'args', 123: 'arg', 124: '__anon_star_14', 125: '__anon_star_17', 126: '__anon_star_18', 127: '__anon_star_16', 128: 'formal', 129: '__anon_star_15', 130: '__anon_star_11', 131: '__anon_star_19', 132: 'PROP_VAL', 133: 'prop_val', 134: 'AND', 135: '__anon_plus_1', 136: 'match_arm', 137: 'ONLY', 138: 'match_expr', 139: 'val_dict', 140: '__anon_plus_4', 141: 'kv_pair', 142: '__anon_star_3', 143: '__anon_star_13'}, 'states': {0: {0: (1, {'@': 77}), 1: (0, 1), 2: (0, 2), 3: (0, 3), 4: (0, 4), 5: (0, 5), 6: (0, 6), 7: (0, 7), 8: (0, 8), 9: (0, 9), 10: (0, 10), 11: (0, 11), 12: (0, 12), 13: (0, 13), 14: (0, 14)}, 1: {15: (0, 15), 16: (0, 16), 17: (0, 17), 18: (0, 18), 19: (0, 19), 20: (0, 20), 21: (0, 21), 22: (0, 22), 23: (0, 23), 24: (0, 24), 25: (0, 25), 26: (0, 26), 27: (0, 27), 28: (0, 28), 29: (0, 29), 30: (0, 30), 31: (0, 31), 32: (0, 32), 33: (0, 33), 34: (0, 34), 35: (0, 35), 36: (0, 36), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40), 41: (0, 41), 42: (0, 42), 43: (0, 43), 2: (0, 2), 44: (0, 44), 45: (0, 45), 46: (0, 46), 47: (0, 47), 3: (0, 48), 48: (0, 49), 49: (0, 50), 50: (0, 51), 51: (0, 52), 52: (0, 53)}, 2: {53: (1, {'@': 78}), 54: (1, {'@': 78}), 15: (1, {'@': 78}), 55: (1, {'@': 78}), 38: (1, {'@': 78}), 56: (1, {'@': 78}), 57: (1, {'@': 78}), 58: (1, {'@': 78}), 21: (1, {'@': 78}), 59: (1, {'@': 78}), 60: (1, {'@': 78}), 61: (1, {'@': 78}), 29: (1, {'@': 78}), 62: (1, {'@': 78}), 63: (1, {'@': 78}), 47: (1, {'@': 78}), 64: (1, {'@': 78}), 34: (1, {'@': 78}), 0: (1, {'@': 78}), 20: (1, {'@': 78}), 65: (1, {'@': 78}), 66: (1, {'@': 78}), 67: (1, {'@': 78}), 68: (1, {'@': 78}), 22: (1, {'@': 78}), 69: (1, {'@': 78}), 70: (1, {'@': 78}), 32: (1, {'@': 78}), 71: (1, {'@': 78}), 44: (1, {'@': 78}), 2: (1, {'@': 78}), 72: (1, {'@': 78}), 48: (1, {'@': 78}), 43: (1, {'@': 78}), 33: (1, {'@': 78}), 73: (1, {'@': 78}), 74: (1, {'@': 78}), 75: (1, {'@': 78}), 31: (1, {'@': 78}), 76: (1, {'@': 78}), 36: (1, {'@': 78}), 77: (1, {'@': 78}), 78: (1, {'@': 78}), 79: (1, {'@': 78}), 80: (1, {'@': 78}), 50: (1, {'@': 78}), 81: (1, {'@': 78}), 49: (1, {'@': 78}), 28: (1, {'@': 78}), 82: (1, {'@': 78}), 83: (1, {'@': 78}), 12: (1, {'@': 78})}, 3: {22: (0, 54), 83: (0, 55)}, 4: {12: (1, {'@': 79}), 64: (1, {'@': 79}), 0: (1, {'@': 79})}, 5: {0: (1, {'@': 80}), 14: (0, 56), 12: (0, 12)}, 6: {84: (0, 57), 85: (0, 58), 86: (0, 59), 87: (0, 60), 88: (0, 61), 89: (0, 62), 90: (0, 63), 91: (0, 64), 92: (0, 65), 93: (0, 66), 94: (0, 67)}, 7: {12: (1, {'@': 81}), 64: (1, {'@': 81}), 0: (1, {'@': 81})}, 8: {3: (0, 68), 95: (0, 69), 2: (0, 2), 96: (0, 70)}, 9: {41: (0, 41), 16: (0, 16), 15: (0, 15), 43: (0, 43), 35: (0, 71), 2: (0, 2), 17: (0, 17), 18: (0, 18), 19: (0, 19), 44: (0, 44), 20: (0, 20), 22: (0, 22), 36: (0, 36), 23: (0, 23), 27: (0, 27), 24: (0, 24), 25: (0, 25), 26: (0, 26), 46: (0, 46), 30: (0, 30), 37: (0, 37), 3: (0, 48), 33: (0, 33), 39: (0, 39), 38: (0, 38), 52: (0, 53)}, 10: {15: (0, 15), 16: (0, 16), 17: (0, 17), 18: (0, 18), 19: (0, 19), 20: (0, 20), 21: (0, 21), 22: (0, 22), 23: (0, 23), 24: (0, 24), 25: (0, 25), 26: (0, 26), 27: (0, 27), 28: (0, 28), 29: (0, 29), 30: (0, 30), 31: (0, 31), 32: (0, 32), 33: (0, 33), 34: (0, 34), 35: (0, 35), 36: (0, 36), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40), 41: (0, 41), 42: (0, 42), 43: (0, 43), 2: (0, 2), 44: (0, 44), 46: (0, 46), 47: (0, 47), 3: (0, 48), 45: (0, 72), 48: (0, 49), 49: (0, 50), 50: (0, 51), 51: (0, 52), 52: (0, 53)}, 11: {0: (0, 73)}, 12: {1: (1, {'@': 82}), 32: (1, {'@': 82}), 15: (1, {'@': 82}), 97: (1, {'@': 82}), 38: (1, {'@': 82}), 10: (1, {'@': 82}), 71: (1, {'@': 82}), 44: (1, {'@': 82}), 2: (1, {'@': 82}), 8: (1, {'@': 82}), 98: (1, {'@': 82}), 57: (1, {'@': 82}), 48: (1, {'@': 82}), 99: (1, {'@': 82}), 43: (1, {'@': 82}), 33: (1, {'@': 82}), 74: (1, {'@': 82}), 58: (1, {'@': 82}), 21: (1, {'@': 82}), 31: (1, {'@': 82}), 36: (1, {'@': 82}), 61: (1, {'@': 82}), 29: (1, {'@': 82}), 6: (1, {'@': 82}), 62: (1, {'@': 82}), 63: (1, {'@': 82}), 47: (1, {'@': 82}), 64: (1, {'@': 82}), 34: (1, {'@': 82}), 9: (1, {'@': 82}), 77: (1, {'@': 82}), 0: (1, {'@': 82}), 20: (1, {'@': 82}), 100: (1, {'@': 82}), 50: (1, {'@': 82}), 65: (1, {'@': 82}), 66: (1, {'@': 82}), 49: (1, {'@': 82}), 28: (1, {'@': 82}), 12: (1, {'@': 82}), 22: (1, {'@': 82})}, 13: {0: (1, {'@': 83})}, 14: {0: (1, {'@': 77}), 6: (0, 6), 1: (0, 1), 2: (0, 2), 3: (0, 3), 4: (0, 4), 12: (0, 74), 5: (0, 5), 13: (0, 75), 9: (0, 9), 7: (0, 7), 8: (0, 8), 10: (0, 10)}, 15: {1: (0, 1), 101: (0, 76), 3: (0, 77), 6: (0, 6), 30: (0, 78), 99: (0, 79), 20: (0, 20), 102: (0, 80), 103: (0, 81), 104: (0, 82), 105: (0, 83), 9: (0, 9), 10: (0, 10), 98: (0, 84), 22: (0, 85), 106: (0, 86), 107: (0, 87), 108: (0, 88), 29: (0, 89), 109: (0, 90), 110: (0, 91), 111: (0, 92), 5: (0, 93), 33: (0, 94), 112: (0, 95), 43: (0, 43), 49: (0, 96), 2: (0, 2), 25: (0, 97), 4: (0, 4), 97: (0, 98), 7: (0, 7), 8: (0, 8), 44: (0, 99), 100: (0, 100), 113: (0, 101), 38: (0, 102)}, 16: {54: (1, {'@': 84}), 32: (1, {'@': 84}), 15: (1, {'@': 84}), 55: (1, {'@': 84}), 38: (1, {'@': 84}), 71: (1, {'@': 84}), 44: (1, {'@': 84}), 2: (1, {'@': 84}), 57: (1, {'@': 84}), 48: (1, {'@': 84}), 43: (1, {'@': 84}), 33: (1, {'@': 84}), 74: (1, {'@': 84}), 58: (1, {'@': 84}), 21: (1, {'@': 84}), 59: (1, {'@': 84}), 75: (1, {'@': 84}), 31: (1, {'@': 84}), 36: (1, {'@': 84}), 61: (1, {'@': 84}), 29: (1, {'@': 84}), 62: (1, {'@': 84}), 63: (1, {'@': 84}), 47: (1, {'@': 84}), 34: (1, {'@': 84}), 77: (1, {'@': 84}), 20: (1, {'@': 84}), 80: (1, {'@': 84}), 50: (1, {'@': 84}), 66: (1, {'@': 84}), 65: (1, {'@': 84}), 49: (1, {'@': 84}), 28: (1, {'@': 84}), 82: (1, {'@': 84}), 12: (1, {'@': 84}), 22: (1, {'@': 84}), 70: (1, {'@': 84})}, 17: {53: (1, {'@': 85}), 54: (1, {'@': 85}), 15: (1, {'@': 85}), 55: (1, {'@': 85}), 38: (1, {'@': 85}), 57: (1, {'@': 85}), 58: (1, {'@': 85}), 21: (1, {'@': 85}), 59: (1, {'@': 85}), 60: (1, {'@': 85}), 61: (1, {'@': 85}), 29: (1, {'@': 85}), 62: (1, {'@': 85}), 63: (1, {'@': 85}), 47: (1, {'@': 85}), 34: (1, {'@': 85}), 20: (1, {'@': 85}), 65: (1, {'@': 85}), 66: (1, {'@': 85}), 69: (1, {'@': 85}), 22: (1, {'@': 85}), 70: (1, {'@': 85}), 32: (1, {'@': 85}), 71: (1, {'@': 85}), 44: (1, {'@': 85}), 2: (1, {'@': 85}), 72: (1, {'@': 85}), 48: (1, {'@': 85}), 43: (1, {'@': 85}), 33: (1, {'@': 85}), 74: (1, {'@': 85}), 75: (1, {'@': 85}), 31: (1, {'@': 85}), 36: (1, {'@': 85}), 77: (1, {'@': 85}), 78: (1, {'@': 85}), 80: (1, {'@': 85}), 50: (1, {'@': 85}), 81: (1, {'@': 85}), 49: (1, {'@': 85}), 28: (1, {'@': 85}), 82: (1, {'@': 85}), 12: (1, {'@': 85})}, 18: {53: (1, {'@': 86}), 54: (1, {'@': 86}), 15: (1, {'@': 86}), 55: (1, {'@': 86}), 38: (1, {'@': 86}), 57: (1, {'@': 86}), 58: (1, {'@': 86}), 21: (1, {'@': 86}), 59: (1, {'@': 86}), 60: (1, {'@': 86}), 61: (1, {'@': 86}), 29: (1, {'@': 86}), 62: (1, {'@': 86}), 63: (1, {'@': 86}), 47: (1, {'@': 86}), 34: (1, {'@': 86}), 20: (1, {'@': 86}), 65: (1, {'@': 86}), 66: (1, {'@': 86}), 69: (1, {'@': 86}), 22: (1, {'@': 86}), 70: (1, {'@': 86}), 32: (1, {'@': 86}), 71: (1, {'@': 86}), 44: (1, {'@': 86}), 2: (1, {'@': 86}), 72: (1, {'@': 86}), 48: (1, {'@': 86}), 43: (1, {'@': 86}), 33: (1, {'@': 86}), 74: (1, {'@': 86}), 75: (1, {'@': 86}), 31: (1, {'@': 86}), 36: (1, {'@': 86}), 77: (1, {'@': 86}), 78: (1, {'@': 86}), 80: (1, {'@': 86}), 50: (1, {'@': 86}), 81: (1, {'@': 86}), 49: (1, {'@': 86}), 28: (1, {'@': 86}), 82: (1, {'@': 86}), 12: (1, {'@': 86})}, 19: {54: (1, {'@': 87}), 32: (1, {'@': 87}), 15: (1, {'@': 87}), 55: (1, {'@': 87}), 38: (1, {'@': 87}), 71: (1, {'@': 87}), 44: (1, {'@': 87}), 2: (1, {'@': 87}), 72: (1, {'@': 87}), 57: (1, {'@': 87}), 48: (1, {'@': 87}), 43: (1, {'@': 87}), 33: (1, {'@': 87}), 74: (1, {'@': 87}), 58: (1, {'@': 87}), 21: (1, {'@': 87}), 59: (1, {'@': 87}), 75: (1, {'@': 87}), 31: (1, {'@': 87}), 36: (1, {'@': 87}), 61: (1, {'@': 87}), 29: (1, {'@': 87}), 62: (1, {'@': 87}), 63: (1, {'@': 87}), 47: (1, {'@': 87}), 34: (1, {'@': 87}), 77: (1, {'@': 87}), 20: (1, {'@': 87}), 78: (1, {'@': 87}), 80: (1, {'@': 87}), 50: (1, {'@': 87}), 66: (1, {'@': 87}), 65: (1, {'@': 87}), 49: (1, {'@': 87}), 28: (1, {'@': 87}), 82: (1, {'@': 87}), 12: (1, {'@': 87}), 22: (1, {'@': 87}), 70: (1, {'@': 87}), 114: (0, 103), 81: (0, 104)}, 20: {53: (1, {'@': 88}), 54: (1, {'@': 88}), 15: (1, {'@': 88}), 55: (1, {'@': 88}), 38: (1, {'@': 88}), 115: (1, {'@': 88}), 56: (1, {'@': 88}), 57: (1, {'@': 88}), 58: (1, {'@': 88}), 21: (1, {'@': 88}), 59: (1, {'@': 88}), 60: (1, {'@': 88}), 61: (1, {'@': 88}), 29: (1, {'@': 88}), 62: (1, {'@': 88}), 63: (1, {'@': 88}), 47: (1, {'@': 88}), 64: (1, {'@': 88}), 34: (1, {'@': 88}), 0: (1, {'@': 88}), 20: (1, {'@': 88}), 65: (1, {'@': 88}), 66: (1, {'@': 88}), 67: (1, {'@': 88}), 22: (1, {'@': 88}), 69: (1, {'@': 88}), 70: (1, {'@': 88}), 32: (1, {'@': 88}), 71: (1, {'@': 88}), 44: (1, {'@': 88}), 2: (1, {'@': 88}), 72: (1, {'@': 88}), 48: (1, {'@': 88}), 43: (1, {'@': 88}), 33: (1, {'@': 88}), 74: (1, {'@': 88}), 75: (1, {'@': 88}), 31: (1, {'@': 88}), 76: (1, {'@': 88}), 36: (1, {'@': 88}), 77: (1, {'@': 88}), 78: (1, {'@': 88}), 79: (1, {'@': 88}), 80: (1, {'@': 88}), 50: (1, {'@': 88}), 81: (1, {'@': 88}), 49: (1, {'@': 88}), 28: (1, {'@': 88}), 82: (1, {'@': 88}), 12: (1, {'@': 88})}, 21: {3: (0, 105), 2: (0, 2)}, 22: {15: (0, 15), 16: (0, 16), 14: (0, 106), 17: (0, 17), 18: (0, 18), 116: (0, 107), 20: (0, 20), 21: (0, 21), 22: (0, 22), 23: (0, 23), 24: (0, 24), 25: (0, 25), 26: (0, 26), 27: (0, 27), 28: (0, 28), 29: (0, 29), 19: (0, 19), 30: (0, 30), 31: (0, 31), 32: (0, 32), 12: (0, 12), 33: (0, 33), 45: (0, 108), 34: (0, 34), 35: (0, 35), 36: (0, 36), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40), 41: (0, 41), 42: (0, 42), 43: (0, 43), 2: (0, 2), 52: (0, 53), 44: (0, 44), 46: (0, 46), 47: (0, 47), 3: (0, 48), 48: (0, 49), 49: (0, 50), 50: (0, 51), 51: (0, 52)}, 23: {54: (1, {'@': 89}), 32: (1, {'@': 89}), 15: (1, {'@': 89}), 55: (1, {'@': 89}), 38: (1, {'@': 89}), 71: (1, {'@': 89}), 44: (1, {'@': 89}), 2: (1, {'@': 89}), 72: (1, {'@': 89}), 57: (1, {'@': 89}), 48: (1, {'@': 89}), 43: (1, {'@': 89}), 33: (1, {'@': 89}), 74: (1, {'@': 89}), 58: (1, {'@': 89}), 21: (1, {'@': 89}), 59: (1, {'@': 89}), 75: (1, {'@': 89}), 31: (1, {'@': 89}), 36: (1, {'@': 89}), 61: (1, {'@': 89}), 29: (1, {'@': 89}), 62: (1, {'@': 89}), 63: (1, {'@': 89}), 47: (1, {'@': 89}), 34: (1, {'@': 89}), 77: (1, {'@': 89}), 20: (1, {'@': 89}), 78: (1, {'@': 89}), 80: (1, {'@': 89}), 50: (1, {'@': 89}), 81: (1, {'@': 89}), 66: (1, {'@': 89}), 65: (1, {'@': 89}), 49: (1, {'@': 89}), 28: (1, {'@': 89}), 82: (1, {'@': 89}), 12: (1, {'@': 89}), 22: (1, {'@': 89}), 70: (1, {'@': 89}), 53: (0, 109), 117: (0, 110)}, 24: {54: (1, {'@': 90}), 32: (1, {'@': 90}), 15: (1, {'@': 90}), 38: (1, {'@': 90}), 71: (1, {'@': 90}), 44: (1, {'@': 90}), 2: (1, {'@': 90}), 57: (1, {'@': 90}), 48: (1, {'@': 90}), 43: (1, {'@': 90}), 33: (1, {'@': 90}), 74: (1, {'@': 90}), 58: (1, {'@': 90}), 21: (1, {'@': 90}), 31: (1, {'@': 90}), 36: (1, {'@': 90}), 61: (1, {'@': 90}), 29: (1, {'@': 90}), 62: (1, {'@': 90}), 63: (1, {'@': 90}), 47: (1, {'@': 90}), 34: (1, {'@': 90}), 77: (1, {'@': 90}), 20: (1, {'@': 90}), 50: (1, {'@': 90}), 66: (1, {'@': 90}), 65: (1, {'@': 90}), 49: (1, {'@': 90}), 28: (1, {'@': 90}), 12: (1, {'@': 90}), 22: (1, {'@': 90})}, 25: {53: (1, {'@': 91}), 54: (1, {'@': 91}), 15: (1, {'@': 91}), 55: (1, {'@': 91}), 38: (1, {'@': 91}), 57: (1, {'@': 91}), 58: (1, {'@': 91}), 21: (1, {'@': 91}), 59: (1, {'@': 91}), 60: (1, {'@': 91}), 61: (1, {'@': 91}), 29: (1, {'@': 91}), 62: (1, {'@': 91}), 63: (1, {'@': 91}), 47: (1, {'@': 91}), 34: (1, {'@': 91}), 20: (1, {'@': 91}), 65: (1, {'@': 91}), 66: (1, {'@': 91}), 69: (1, {'@': 91}), 22: (1, {'@': 91}), 70: (1, {'@': 91}), 32: (1, {'@': 91}), 71: (1, {'@': 91}), 44: (1, {'@': 91}), 2: (1, {'@': 91}), 72: (1, {'@': 91}), 48: (1, {'@': 91}), 43: (1, {'@': 91}), 33: (1, {'@': 91}), 74: (1, {'@': 91}), 75: (1, {'@': 91}), 31: (1, {'@': 91}), 36: (1, {'@': 91}), 77: (1, {'@': 91}), 78: (1, {'@': 91}), 80: (1, {'@': 91}), 50: (1, {'@': 91}), 81: (1, {'@': 91}), 49: (1, {'@': 91}), 28: (1, {'@': 91}), 82: (1, {'@': 91}), 12: (1, {'@': 91})}, 26: {53: (1, {'@': 92}), 54: (1, {'@': 92}), 32: (1, {'@': 92}), 15: (0, 15), 55: (1, {'@': 92}), 38: (0, 38), 71: (1, {'@': 92}), 44: (1, {'@': 92}), 2: (0, 2), 72: (1, {'@': 92}), 57: (1, {'@': 92}), 48: (1, {'@': 92}), 43: (0, 43), 33: (0, 33), 74: (1, {'@': 92}), 58: (1, {'@': 92}), 21: (1, {'@': 92}), 59: (1, {'@': 92}), 75: (1, {'@': 92}), 31: (1, {'@': 92}), 36: (0, 36), 61: (1, {'@': 92}), 29: (1, {'@': 92}), 62: (1, {'@': 92}), 63: (1, {'@': 92}), 47: (1, {'@': 92}), 34: (1, {'@': 92}), 77: (1, {'@': 92}), 20: (0, 20), 78: (1, {'@': 92}), 80: (1, {'@': 92}), 50: (1, {'@': 92}), 81: (1, {'@': 92}), 66: (1, {'@': 92}), 65: (1, {'@': 92}), 49: (1, {'@': 92}), 28: (1, {'@': 92}), 82: (1, {'@': 92}), 12: (1, {'@': 92}), 22: (0, 22), 70: (1, {'@': 92}), 52: (0, 111), 17: (0, 17), 18: (0, 18), 60: (0, 112), 25: (0, 25), 46: (0, 46), 30: (0, 30), 3: (0, 48)}, 27: {54: (1, {'@': 93}), 32: (1, {'@': 93}), 15: (1, {'@': 93}), 38: (1, {'@': 93}), 71: (1, {'@': 93}), 44: (1, {'@': 93}), 2: (1, {'@': 93}), 57: (1, {'@': 93}), 48: (1, {'@': 93}), 43: (1, {'@': 93}), 33: (1, {'@': 93}), 74: (1, {'@': 93}), 58: (1, {'@': 93}), 21: (1, {'@': 93}), 31: (1, {'@': 93}), 36: (1, {'@': 93}), 61: (1, {'@': 93}), 29: (1, {'@': 93}), 62: (1, {'@': 93}), 63: (1, {'@': 93}), 47: (1, {'@': 93}), 34: (1, {'@': 93}), 77: (1, {'@': 93}), 20: (1, {'@': 93}), 50: (1, {'@': 93}), 66: (1, {'@': 93}), 65: (1, {'@': 93}), 49: (1, {'@': 93}), 28: (1, {'@': 93}), 12: (1, {'@': 93}), 22: (1, {'@': 93}), 70: (0, 113), 59: (0, 114), 80: (0, 115), 82: (0, 116), 75: (0, 117), 55: (0, 118)}, 28: {32: (1, {'@': 94}), 15: (1, {'@': 94}), 38: (1, {'@': 94}), 71: (1, {'@': 94}), 44: (1, {'@': 94}), 2: (1, {'@': 94}), 57: (1, {'@': 94}), 48: (1, {'@': 94}), 43: (1, {'@': 94}), 33: (1, {'@': 94}), 74: (1, {'@': 94}), 58: (1, {'@': 94}), 21: (1, {'@': 94}), 31: (1, {'@': 94}), 36: (1, {'@': 94}), 61: (1, {'@': 94}), 29: (1, {'@': 94}), 62: (1, {'@': 94}), 63: (1, {'@': 94}), 47: (1, {'@': 94}), 34: (1, {'@': 94}), 77: (1, {'@': 94}), 20: (1, {'@': 94}), 50: (1, {'@': 94}), 66: (1, {'@': 94}), 65: (1, {'@': 94}), 49: (1, {'@': 94}), 28: (1, {'@': 94}), 12: (1, {'@': 94}), 22: (1, {'@': 94})}, 29: {15: (0, 15), 16: (0, 16), 17: (0, 17), 18: (0, 18), 20: (0, 20), 21: (0, 21), 22: (0, 22), 45: (0, 119), 23: (0, 23), 24: (0, 24), 25: (0, 25), 26: (0, 26), 27: (0, 27), 28: (0, 28), 29: (0, 29), 30: (0, 30), 19: (0, 19), 31: (0, 31), 32: (0, 32), 33: (0, 33), 34: (0, 34), 35: (0, 35), 36: (0, 36), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40), 41: (0, 41), 42: (0, 42), 43: (0, 43), 2: (0, 2), 52: (0, 53), 44: (0, 44), 46: (0, 46), 47: (0, 47), 3: (0, 48), 48: (0, 49), 49: (0, 50), 50: (0, 51), 51: (0, 52)}, 30: {53: (1, {'@': 95}), 54: (1, {'@': 95}), 15: (1, {'@': 95}), 55: (1, {'@': 95}), 38: (1, {'@': 95}), 57: (1, {'@': 95}), 58: (1, {'@': 95}), 21: (1, {'@': 95}), 59: (1, {'@': 95}), 60: (1, {'@': 95}), 61: (1, {'@': 95}), 29: (1, {'@': 95}), 62: (1, {'@': 95}), 63: (1, {'@': 95}), 47: (1, {'@': 95}), 34: (1, {'@': 95}), 20: (1, {'@': 95}), 65: (1, {'@': 95}), 66: (1, {'@': 95}), 69: (1, {'@': 95}), 22: (1, {'@': 95}), 70: (1, {'@': 95}), 32: (1, {'@': 95}), 71: (1, {'@': 95}), 44: (1, {'@': 95}), 2: (1, {'@': 95}), 72: (1, {'@': 95}), 48: (1, {'@': 95}), 43: (1, {'@': 95}), 33: (1, {'@': 95}), 74: (1, {'@': 95}), 75: (1, {'@': 95}), 31: (1, {'@': 95}), 36: (1, {'@': 95}), 77: (1, {'@': 95}), 78: (1, {'@': 95}), 80: (1, {'@': 95}), 50: (1, {'@': 95}), 81: (1, {'@': 95}), 49: (1, {'@': 95}), 28: (1, {'@': 95}), 82: (1, {'@': 95}), 12: (1, {'@': 95})}, 31: {15: (0, 15), 16: (0, 16), 14: (0, 120), 45: (0, 121), 17: (0, 17), 18: (0, 18), 19: (0, 19), 20: (0, 20), 21: (0, 21), 22: (0, 22), 23: (0, 23), 24: (0, 24), 25: (0, 25), 26: (0, 26), 27: (0, 27), 28: (0, 28), 29: (0, 29), 30: (0, 30), 31: (0, 31), 32: (0, 32), 12: (0, 12), 33: (0, 33), 118: (0, 122), 34: (0, 34), 35: (0, 35), 36: (0, 36), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40), 41: (0, 41), 42: (0, 42), 43: (0, 43), 2: (0, 2), 44: (0, 44), 46: (0, 46), 47: (0, 47), 3: (0, 48), 48: (0, 49), 49: (0, 50), 50: (0, 51), 51: (0, 52), 52: (0, 53)}, 32: {32: (1, {'@': 96}), 15: (1, {'@': 96}), 38: (1, {'@': 96}), 71: (1, {'@': 96}), 44: (1, {'@': 96}), 2: (1, {'@': 96}), 57: (1, {'@': 96}), 48: (1, {'@': 96}), 43: (1, {'@': 96}), 33: (1, {'@': 96}), 74: (1, {'@': 96}), 58: (1, {'@': 96}), 21: (1, {'@': 96}), 31: (1, {'@': 96}), 36: (1, {'@': 96}), 61: (1, {'@': 96}), 29: (1, {'@': 96}), 62: (1, {'@': 96}), 63: (1, {'@': 96}), 47: (1, {'@': 96}), 34: (1, {'@': 96}), 77: (1, {'@': 96}), 20: (1, {'@': 96}), 50: (1, {'@': 96}), 66: (1, {'@': 96}), 65: (1, {'@': 96}), 49: (1, {'@': 96}), 28: (1, {'@': 96}), 12: (1, {'@': 96}), 22: (1, {'@': 96})}, 33: {53: (1, {'@': 97}), 54: (1, {'@': 97}), 15: (1, {'@': 97}), 55: (1, {'@': 97}), 38: (1, {'@': 97}), 57: (1, {'@': 97}), 58: (1, {'@': 97}), 21: (1, {'@': 97}), 59: (1, {'@': 97}), 60: (1, {'@': 97}), 61: (1, {'@': 97}), 29: (1, {'@': 97}), 62: (1, {'@': 97}), 63: (1, {'@': 97}), 47: (1, {'@': 97}), 34: (1, {'@': 97}), 20: (1, {'@': 97}), 65: (1, {'@': 97}), 66: (1, {'@': 97}), 69: (1, {'@': 97}), 22: (1, {'@': 97}), 70: (1, {'@': 97}), 32: (1, {'@': 97}), 71: (1, {'@': 97}), 44: (1, {'@': 97}), 2: (1, {'@': 97}), 72: (1, {'@': 97}), 48: (1, {'@': 97}), 43: (1, {'@': 97}), 33: (1, {'@': 97}), 74: (1, {'@': 97}), 75: (1, {'@': 97}), 31: (1, {'@': 97}), 36: (1, {'@': 97}), 77: (1, {'@': 97}), 78: (1, {'@': 97}), 80: (1, {'@': 97}), 50: (1, {'@': 97}), 81: (1, {'@': 97}), 49: (1, {'@': 97}), 28: (1, {'@': 97}), 82: (1, {'@': 97}), 12: (1, {'@': 97})}, 34: {15: (0, 15), 16: (0, 16), 17: (0, 17), 18: (0, 18), 20: (0, 20), 21: (0, 21), 22: (0, 22), 23: (0, 23), 24: (0, 24), 25: (0, 25), 26: (0, 26), 27: (0, 27), 28: (0, 28), 29: (0, 29), 19: (0, 19), 30: (0, 30), 45: (0, 123), 31: (0, 31), 32: (0, 32), 33: (0, 33), 34: (0, 34), 35: (0, 35), 36: (0, 36), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40), 41: (0, 41), 42: (0, 42), 43: (0, 43), 2: (0, 2), 52: (0, 53), 44: (0, 44), 46: (0, 46), 47: (0, 47), 3: (0, 48), 48: (0, 49), 49: (0, 50), 50: (0, 51), 51: (0, 52)}, 35: {32: (0, 32), 15: (1, {'@': 98}), 38: (1, {'@': 98}), 71: (1, {'@': 98}), 44: (1, {'@': 98}), 2: (1, {'@': 98}), 57: (1, {'@': 98}), 48: (0, 49), 43: (1, {'@': 98}), 33: (1, {'@': 98}), 74: (1, {'@': 98}), 58: (1, {'@': 98}), 21: (1, {'@': 98}), 31: (1, {'@': 98}), 36: (1, {'@': 98}), 61: (1, {'@': 98}), 29: (1, {'@': 98}), 62: (1, {'@': 98}), 63: (1, {'@': 98}), 47: (0, 47), 34: (1, {'@': 98}), 77: (1, {'@': 98}), 20: (1, {'@': 98}), 50: (1, {'@': 98}), 66: (1, {'@': 98}), 65: (1, {'@': 98}), 49: (0, 50), 28: (0, 28), 12: (1, {'@': 98}), 22: (1, {'@': 98}), 42: (0, 124), 51: (0, 52), 40: (0, 40)}, 36: {15: (0, 15), 16: (0, 16), 17: (0, 17), 18: (0, 18), 20: (0, 20), 21: (0, 21), 22: (0, 22), 23: (0, 23), 24: (0, 24), 25: (0, 25), 26: (0, 26), 27: (0, 27), 28: (0, 28), 29: (0, 29), 19: (0, 19), 30: (0, 30), 45: (0, 125), 31: (0, 31), 32: (0, 32), 58: (0, 126), 33: (0, 33), 34: (0, 34), 35: (0, 35), 36: (0, 36), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40), 41: (0, 41), 42: (0, 42), 43: (0, 43), 2: (0, 2), 52: (0, 53), 44: (0, 44), 46: (0, 46), 47: (0, 47), 3: (0, 48), 48: (0, 49), 49: (0, 50), 50: (0, 51), 51: (0, 52)}, 37: {54: (1, {'@': 99}), 32: (1, {'@': 99}), 15: (1, {'@': 99}), 55: (1, {'@': 99}), 38: (1, {'@': 99}), 71: (1, {'@': 99}), 44: (1, {'@': 99}), 2: (1, {'@': 99}), 72: (1, {'@': 99}), 57: (1, {'@': 99}), 48: (1, {'@': 99}), 43: (1, {'@': 99}), 33: (1, {'@': 99}), 74: (1, {'@': 99}), 58: (1, {'@': 99}), 21: (1, {'@': 99}), 59: (1, {'@': 99}), 75: (1, {'@': 99}), 31: (1, {'@': 99}), 36: (1, {'@': 99}), 61: (1, {'@': 99}), 29: (1, {'@': 99}), 62: (1, {'@': 99}), 63: (1, {'@': 99}), 47: (1, {'@': 99}), 34: (1, {'@': 99}), 77: (1, {'@': 99}), 20: (1, {'@': 99}), 80: (1, {'@': 99}), 50: (1, {'@': 99}), 66: (1, {'@': 99}), 65: (1, {'@': 99}), 49: (1, {'@': 99}), 28: (1, {'@': 99}), 82: (1, {'@': 99}), 12: (1, {'@': 99}), 22: (1, {'@': 99}), 70: (1, {'@': 99}), 119: (0, 127), 78: (0, 128)}, 38: {53: (1, {'@': 100}), 54: (1, {'@': 100}), 15: (1, {'@': 100}), 55: (1, {'@': 100}), 38: (1, {'@': 100}), 57: (1, {'@': 100}), 58: (1, {'@': 100}), 21: (1, {'@': 100}), 59: (1, {'@': 100}), 60: (1, {'@': 100}), 61: (1, {'@': 100}), 29: (1, {'@': 100}), 62: (1, {'@': 100}), 63: (1, {'@': 100}), 47: (1, {'@': 100}), 34: (1, {'@': 100}), 20: (1, {'@': 100}), 65: (1, {'@': 100}), 66: (1, {'@': 100}), 69: (1, {'@': 100}), 22: (1, {'@': 100}), 70: (1, {'@': 100}), 32: (1, {'@': 100}), 71: (1, {'@': 100}), 44: (1, {'@': 100}), 2: (1, {'@': 100}), 72: (1, {'@': 100}), 48: (1, {'@': 100}), 43: (1, {'@': 100}), 33: (1, {'@': 100}), 74: (1, {'@': 100}), 75: (1, {'@': 100}), 31: (1, {'@': 100}), 36: (1, {'@': 100}), 77: (1, {'@': 100}), 78: (1, {'@': 100}), 80: (1, {'@': 100}), 50: (1, {'@': 100}), 81: (1, {'@': 100}), 49: (1, {'@': 100}), 28: (1, {'@': 100}), 82: (1, {'@': 100}), 12: (1, {'@': 100})}, 39: {54: (1, {'@': 101}), 32: (1, {'@': 101}), 15: (1, {'@': 101}), 55: (1, {'@': 101}), 38: (1, {'@': 101}), 71: (1, {'@': 101}), 44: (1, {'@': 101}), 2: (1, {'@': 101}), 57: (1, {'@': 101}), 48: (1, {'@': 101}), 43: (1, {'@': 101}), 33: (1, {'@': 101}), 74: (1, {'@': 101}), 58: (1, {'@': 101}), 21: (1, {'@': 101}), 59: (1, {'@': 101}), 75: (1, {'@': 101}), 31: (1, {'@': 101}), 36: (1, {'@': 101}), 61: (1, {'@': 101}), 29: (1, {'@': 101}), 62: (1, {'@': 101}), 63: (1, {'@': 101}), 47: (1, {'@': 101}), 34: (1, {'@': 101}), 77: (1, {'@': 101}), 20: (1, {'@': 101}), 80: (1, {'@': 101}), 50: (1, {'@': 101}), 66: (1, {'@': 101}), 65: (1, {'@': 101}), 49: (1, {'@': 101}), 28: (1, {'@': 101}), 82: (1, {'@': 101}), 12: (1, {'@': 101}), 22: (1, {'@': 101}), 70: (1, {'@': 101}), 120: (0, 129), 72: (0, 130)}, 40: {32: (1, {'@': 102}), 15: (1, {'@': 102}), 38: (1, {'@': 102}), 71: (1, {'@': 102}), 44: (1, {'@': 102}), 2: (1, {'@': 102}), 57: (1, {'@': 102}), 48: (1, {'@': 102}), 43: (1, {'@': 102}), 33: (1, {'@': 102}), 74: (1, {'@': 102}), 58: (1, {'@': 102}), 21: (1, {'@': 102}), 31: (1, {'@': 102}), 36: (1, {'@': 102}), 61: (1, {'@': 102}), 29: (1, {'@': 102}), 62: (1, {'@': 102}), 63: (1, {'@': 102}), 47: (1, {'@': 102}), 34: (1, {'@': 102}), 77: (1, {'@': 102}), 20: (1, {'@': 102}), 50: (1, {'@': 102}), 66: (1, {'@': 102}), 65: (1, {'@': 102}), 49: (1, {'@': 102}), 28: (1, {'@': 102}), 12: (1, {'@': 102}), 22: (1, {'@': 102})}, 41: {54: (1, {'@': 103}), 32: (1, {'@': 103}), 15: (1, {'@': 103}), 55: (1, {'@': 103}), 38: (1, {'@': 103}), 71: (1, {'@': 103}), 44: (0, 132), 2: (1, {'@': 103}), 57: (1, {'@': 103}), 48: (1, {'@': 103}), 43: (1, {'@': 103}), 33: (1, {'@': 103}), 74: (1, {'@': 103}), 58: (1, {'@': 103}), 21: (1, {'@': 103}), 59: (1, {'@': 103}), 75: (1, {'@': 103}), 31: (1, {'@': 103}), 36: (1, {'@': 103}), 61: (1, {'@': 103}), 29: (1, {'@': 103}), 62: (1, {'@': 103}), 63: (1, {'@': 103}), 47: (1, {'@': 103}), 34: (1, {'@': 103}), 77: (1, {'@': 103}), 20: (1, {'@': 103}), 80: (1, {'@': 103}), 50: (1, {'@': 103}), 66: (1, {'@': 103}), 65: (1, {'@': 103}), 49: (1, {'@': 103}), 28: (1, {'@': 103}), 82: (1, {'@': 103}), 12: (1, {'@': 103}), 22: (1, {'@': 103}), 70: (1, {'@': 103}), 121: (0, 131)}, 42: {41: (0, 41), 16: (0, 16), 15: (0, 15), 43: (0, 43), 2: (0, 2), 17: (0, 17), 18: (0, 18), 35: (0, 133), 19: (0, 19), 44: (0, 44), 20: (0, 20), 22: (0, 22), 36: (0, 36), 23: (0, 23), 27: (0, 27), 24: (0, 24), 25: (0, 25), 26: (0, 26), 46: (0, 46), 30: (0, 30), 37: (0, 37), 3: (0, 48), 33: (0, 33), 39: (0, 39), 38: (0, 38), 52: (0, 53)}, 43: {53: (1, {'@': 104}), 54: (1, {'@': 104}), 15: (1, {'@': 104}), 55: (1, {'@': 104}), 38: (1, {'@': 104}), 56: (1, {'@': 104}), 57: (1, {'@': 104}), 58: (1, {'@': 104}), 21: (1, {'@': 104}), 59: (1, {'@': 104}), 60: (1, {'@': 104}), 61: (1, {'@': 104}), 29: (1, {'@': 104}), 62: (1, {'@': 104}), 63: (1, {'@': 104}), 47: (1, {'@': 104}), 64: (1, {'@': 104}), 34: (1, {'@': 104}), 0: (1, {'@': 104}), 20: (1, {'@': 104}), 65: (1, {'@': 104}), 66: (1, {'@': 104}), 67: (1, {'@': 104}), 22: (1, {'@': 104}), 69: (1, {'@': 104}), 70: (1, {'@': 104}), 32: (1, {'@': 104}), 71: (1, {'@': 104}), 44: (1, {'@': 104}), 2: (1, {'@': 104}), 72: (1, {'@': 104}), 48: (1, {'@': 104}), 43: (1, {'@': 104}), 33: (1, {'@': 104}), 74: (1, {'@': 104}), 75: (1, {'@': 104}), 31: (1, {'@': 104}), 76: (1, {'@': 104}), 36: (1, {'@': 104}), 77: (1, {'@': 104}), 78: (1, {'@': 104}), 79: (1, {'@': 104}), 80: (1, {'@': 104}), 50: (1, {'@': 104}), 81: (1, {'@': 104}), 49: (1, {'@': 104}), 28: (1, {'@': 104}), 82: (1, {'@': 104}), 83: (1, {'@': 104}), 12: (1, {'@': 104})}, 44: {41: (0, 41), 15: (0, 15), 43: (0, 43), 2: (0, 2), 52: (0, 53), 17: (0, 17), 18: (0, 18), 20: (0, 20), 22: (0, 22), 36: (0, 36), 23: (0, 23), 25: (0, 25), 26: (0, 26), 46: (0, 46), 19: (0, 19), 30: (0, 30), 37: (0, 37), 3: (0, 48), 33: (0, 33), 39: (0, 39), 38: (0, 38), 16: (0, 134)}, 45: {61: (0, 135)}, 46: {53: (1, {'@': 105}), 54: (1, {'@': 105}), 15: (1, {'@': 105}), 55: (1, {'@': 105}), 38: (1, {'@': 105}), 57: (1, {'@': 105}), 58: (1, {'@': 105}), 21: (1, {'@': 105}), 59: (1, {'@': 105}), 60: (1, {'@': 105}), 61: (1, {'@': 105}), 29: (1, {'@': 105}), 62: (1, {'@': 105}), 63: (1, {'@': 105}), 47: (1, {'@': 105}), 34: (1, {'@': 105}), 20: (1, {'@': 105}), 65: (1, {'@': 105}), 66: (1, {'@': 105}), 69: (1, {'@': 105}), 22: (1, {'@': 105}), 70: (1, {'@': 105}), 32: (1, {'@': 105}), 71: (1, {'@': 105}), 44: (1, {'@': 105}), 2: (1, {'@': 105}), 72: (1, {'@': 105}), 48: (1, {'@': 105}), 43: (1, {'@': 105}), 33: (1, {'@': 105}), 74: (1, {'@': 105}), 75: (1, {'@': 105}), 31: (1, {'@': 105}), 36: (1, {'@': 105}), 77: (1, {'@': 105}), 78: (1, {'@': 105}), 80: (1, {'@': 105}), 50: (1, {'@': 105}), 81: (1, {'@': 105}), 49: (1, {'@': 105}), 28: (1, {'@': 105}), 82: (1, {'@': 105}), 12: (1, {'@': 105})}, 47: {32: (1, {'@': 106}), 15: (1, {'@': 106}), 38: (1, {'@': 106}), 71: (1, {'@': 106}), 44: (1, {'@': 106}), 2: (1, {'@': 106}), 57: (1, {'@': 106}), 48: (1, {'@': 106}), 43: (1, {'@': 106}), 33: (1, {'@': 106}), 74: (1, {'@': 106}), 58: (1, {'@': 106}), 21: (1, {'@': 106}), 31: (1, {'@': 106}), 36: (1, {'@': 106}), 61: (1, {'@': 106}), 29: (1, {'@': 106}), 62: (1, {'@': 106}), 63: (1, {'@': 106}), 47: (1, {'@': 106}), 34: (1, {'@': 106}), 77: (1, {'@': 106}), 20: (1, {'@': 106}), 50: (1, {'@': 106}), 66: (1, {'@': 106}), 65: (1, {'@': 106}), 49: (1, {'@': 106}), 28: (1, {'@': 106}), 12: (1, {'@': 106}), 22: (1, {'@': 106})}, 48: {53: (1, {'@': 107}), 54: (1, {'@': 107}), 15: (1, {'@': 107}), 55: (1, {'@': 107}), 38: (1, {'@': 107}), 57: (1, {'@': 107}), 58: (1, {'@': 107}), 21: (1, {'@': 107}), 59: (1, {'@': 107}), 60: (1, {'@': 107}), 61: (1, {'@': 107}), 29: (1, {'@': 107}), 62: (1, {'@': 107}), 63: (1, {'@': 107}), 47: (1, {'@': 107}), 34: (1, {'@': 107}), 20: (1, {'@': 107}), 65: (1, {'@': 107}), 66: (1, {'@': 107}), 69: (1, {'@': 107}), 22: (1, {'@': 107}), 70: (1, {'@': 107}), 32: (1, {'@': 107}), 71: (1, {'@': 107}), 44: (1, {'@': 107}), 2: (1, {'@': 107}), 72: (1, {'@': 107}), 48: (1, {'@': 107}), 43: (1, {'@': 107}), 33: (1, {'@': 107}), 74: (1, {'@': 107}), 75: (1, {'@': 107}), 31: (1, {'@': 107}), 36: (1, {'@': 107}), 77: (1, {'@': 107}), 78: (1, {'@': 107}), 80: (1, {'@': 107}), 50: (1, {'@': 107}), 81: (1, {'@': 107}), 49: (1, {'@': 107}), 28: (1, {'@': 107}), 82: (1, {'@': 107}), 12: (1, {'@': 107})}, 49: {32: (1, {'@': 108}), 15: (1, {'@': 108}), 38: (1, {'@': 108}), 71: (1, {'@': 108}), 44: (1, {'@': 108}), 2: (1, {'@': 108}), 57: (1, {'@': 108}), 48: (1, {'@': 108}), 43: (1, {'@': 108}), 33: (1, {'@': 108}), 74: (1, {'@': 108}), 58: (1, {'@': 108}), 21: (1, {'@': 108}), 31: (1, {'@': 108}), 36: (1, {'@': 108}), 61: (1, {'@': 108}), 29: (1, {'@': 108}), 62: (1, {'@': 108}), 63: (1, {'@': 108}), 47: (1, {'@': 108}), 34: (1, {'@': 108}), 77: (1, {'@': 108}), 20: (1, {'@': 108}), 50: (1, {'@': 108}), 66: (1, {'@': 108}), 65: (1, {'@': 108}), 49: (1, {'@': 108}), 28: (1, {'@': 108}), 12: (1, {'@': 108}), 22: (1, {'@': 108})}, 50: {32: (1, {'@': 109}), 15: (1, {'@': 109}), 38: (1, {'@': 109}), 71: (1, {'@': 109}), 44: (1, {'@': 109}), 2: (1, {'@': 109}), 57: (1, {'@': 109}), 48: (1, {'@': 109}), 43: (1, {'@': 109}), 33: (1, {'@': 109}), 74: (1, {'@': 109}), 58: (1, {'@': 109}), 21: (1, {'@': 109}), 31: (1, {'@': 109}), 36: (1, {'@': 109}), 61: (1, {'@': 109}), 29: (1, {'@': 109}), 62: (1, {'@': 109}), 63: (1, {'@': 109}), 47: (1, {'@': 109}), 34: (1, {'@': 109}), 77: (1, {'@': 109}), 20: (1, {'@': 109}), 50: (1, {'@': 109}), 66: (1, {'@': 109}), 65: (1, {'@': 109}), 49: (1, {'@': 109}), 28: (1, {'@': 109}), 12: (1, {'@': 109}), 22: (1, {'@': 109})}, 51: {15: (0, 15), 43: (0, 43), 2: (0, 2), 26: (0, 136), 17: (0, 17), 18: (0, 18), 33: (0, 33), 20: (0, 20), 22: (0, 22), 36: (0, 36), 25: (0, 25), 46: (0, 46), 30: (0, 30), 38: (0, 38), 52: (0, 53), 3: (0, 48)}, 52: {32: (0, 32), 15: (1, {'@': 110}), 38: (1, {'@': 110}), 71: (1, {'@': 110}), 44: (1, {'@': 110}), 2: (1, {'@': 110}), 57: (1, {'@': 110}), 48: (0, 49), 43: (1, {'@': 110}), 33: (1, {'@': 110}), 74: (1, {'@': 110}), 58: (1, {'@': 110}), 21: (1, {'@': 110}), 31: (1, {'@': 110}), 36: (1, {'@': 110}), 61: (1, {'@': 110}), 29: (1, {'@': 110}), 62: (1, {'@': 110}), 63: (1, {'@': 110}), 47: (0, 47), 34: (1, {'@': 110}), 77: (1, {'@': 110}), 20: (1, {'@': 110}), 50: (1, {'@': 110}), 66: (1, {'@': 110}), 65: (1, {'@': 110}), 49: (0, 50), 28: (0, 28), 12: (1, {'@': 110}), 22: (1, {'@': 110}), 40: (0, 137)}, 53: {53: (1, {'@': 111}), 54: (1, {'@': 111}), 15: (1, {'@': 111}), 55: (1, {'@': 111}), 38: (1, {'@': 111}), 57: (1, {'@': 111}), 58: (1, {'@': 111}), 21: (1, {'@': 111}), 59: (1, {'@': 111}), 60: (1, {'@': 111}), 61: (1, {'@': 111}), 29: (1, {'@': 111}), 62: (1, {'@': 111}), 63: (1, {'@': 111}), 47: (1, {'@': 111}), 34: (1, {'@': 111}), 20: (1, {'@': 111}), 65: (1, {'@': 111}), 66: (1, {'@': 111}), 22: (1, {'@': 111}), 69: (1, {'@': 111}), 70: (1, {'@': 111}), 32: (1, {'@': 111}), 71: (1, {'@': 111}), 44: (1, {'@': 111}), 2: (1, {'@': 111}), 72: (1, {'@': 111}), 48: (1, {'@': 111}), 43: (1, {'@': 111}), 33: (1, {'@': 111}), 74: (1, {'@': 111}), 75: (1, {'@': 111}), 31: (1, {'@': 111}), 36: (1, {'@': 111}), 77: (1, {'@': 111}), 78: (1, {'@': 111}), 80: (1, {'@': 111}), 50: (1, {'@': 111}), 81: (1, {'@': 111}), 49: (1, {'@': 111}), 28: (1, {'@': 111}), 82: (1, {'@': 111}), 12: (1, {'@': 111})}, 54: {77: (1, {'@': 112}), 112: (0, 95), 101: (0, 76), 43: (0, 43), 108: (0, 88), 2: (0, 2), 25: (0, 97), 122: (0, 138), 3: (0, 139), 103: (0, 81), 105: (0, 83), 110: (0, 140), 111: (0, 92), 123: (0, 141), 104: (0, 82), 22: (0, 142), 44: (0, 99)}, 55: {3: (0, 143), 2: (0, 2)}, 56: {0: (1, {'@': 77}), 6: (0, 6), 1: (0, 1), 2: (0, 2), 3: (0, 3), 4: (0, 4), 12: (0, 74), 5: (0, 5), 9: (0, 9), 7: (0, 7), 8: (0, 8), 10: (0, 10), 13: (0, 144)}, 57: {22: (0, 145)}, 58: {22: (0, 146)}, 59: {22: (0, 147)}, 60: {22: (0, 148)}, 61: {22: (0, 149)}, 62: {22: (0, 150)}, 63: {22: (0, 151)}, 64: {22: (0, 152)}, 65: {22: (0, 153)}, 66: {22: (0, 154)}, 67: {22: (0, 155)}, 68: {77: (1, {'@': 113}), 68: (1, {'@': 113}), 83: (1, {'@': 113}), 124: (0, 156), 63: (0, 157)}, 69: {68: (0, 158), 83: (0, 159)}, 70: {61: (0, 160)}, 71: {49: (0, 50), 28: (0, 28), 51: (0, 52), 32: (0, 32), 54: (0, 161), 42: (0, 162), 48: (0, 49), 47: (0, 47), 40: (0, 40)}, 72: {61: (0, 163)}, 73: {}, 74: {1: (1, {'@': 114}), 32: (1, {'@': 114}), 15: (1, {'@': 114}), 97: (1, {'@': 114}), 38: (1, {'@': 114}), 10: (1, {'@': 114}), 71: (1, {'@': 114}), 44: (1, {'@': 114}), 2: (1, {'@': 114}), 8: (1, {'@': 114}), 98: (1, {'@': 114}), 57: (1, {'@': 114}), 48: (1, {'@': 114}), 99: (1, {'@': 114}), 43: (1, {'@': 114}), 33: (1, {'@': 114}), 74: (1, {'@': 114}), 58: (1, {'@': 114}), 21: (1, {'@': 114}), 31: (1, {'@': 114}), 36: (1, {'@': 114}), 61: (1, {'@': 114}), 29: (1, {'@': 114}), 6: (1, {'@': 114}), 62: (1, {'@': 114}), 63: (1, {'@': 114}), 47: (1, {'@': 114}), 64: (1, {'@': 114}), 34: (1, {'@': 114}), 9: (1, {'@': 114}), 77: (1, {'@': 114}), 0: (1, {'@': 114}), 20: (1, {'@': 114}), 100: (1, {'@': 114}), 50: (1, {'@': 114}), 65: (1, {'@': 114}), 66: (1, {'@': 114}), 49: (1, {'@': 114}), 28: (1, {'@': 114}), 12: (1, {'@': 114}), 22: (1, {'@': 114})}, 75: {0: (1, {'@': 115})}, 76: {32: (1, {'@': 116}), 55: (1, {'@': 116}), 56: (1, {'@': 116}), 44: (1, {'@': 116}), 72: (1, {'@': 116}), 48: (1, {'@': 116}), 58: (1, {'@': 116}), 59: (1, {'@': 116}), 75: (1, {'@': 116}), 76: (1, {'@': 116}), 61: (1, {'@': 116}), 29: (1, {'@': 116}), 62: (1, {'@': 116}), 63: (1, {'@': 116}), 64: (1, {'@': 116}), 77: (1, {'@': 116}), 0: (1, {'@': 116}), 79: (1, {'@': 116}), 80: (1, {'@': 116}), 67: (1, {'@': 116}), 82: (1, {'@': 116}), 12: (1, {'@': 116}), 70: (1, {'@': 116}), 78: (0, 164), 125: (0, 165)}, 77: {32: (1, {'@': 117}), 55: (1, {'@': 117}), 56: (1, {'@': 117}), 44: (1, {'@': 117}), 72: (1, {'@': 117}), 48: (1, {'@': 117}), 58: (1, {'@': 117}), 59: (1, {'@': 117}), 75: (1, {'@': 117}), 76: (1, {'@': 117}), 61: (1, {'@': 117}), 29: (1, {'@': 117}), 62: (1, {'@': 117}), 63: (1, {'@': 117}), 64: (1, {'@': 117}), 77: (1, {'@': 117}), 0: (1, {'@': 117}), 78: (1, {'@': 117}), 79: (1, {'@': 117}), 80: (1, {'@': 117}), 81: (1, {'@': 117}), 67: (1, {'@': 117}), 82: (1, {'@': 117}), 83: (0, 55), 12: (1, {'@': 117}), 70: (1, {'@': 117}), 36: (0, 166), 22: (0, 167)}, 78: {62: (1, {'@': 118}), 79: (1, {'@': 118}), 48: (1, {'@': 118}), 32: (1, {'@': 118}), 64: (1, {'@': 118}), 77: (1, {'@': 118}), 67: (1, {'@': 118}), 56: (1, {'@': 118}), 0: (1, {'@': 118}), 76: (1, {'@': 118}), 12: (1, {'@': 118}), 29: (1, {'@': 118})}, 79: {2: (1, {'@': 119})}, 80: {62: (1, {'@': 120}), 77: (1, {'@': 120}), 56: (1, {'@': 120}), 0: (1, {'@': 120}), 76: (1, {'@': 120}), 12: (1, {'@': 120}), 64: (1, {'@': 120}), 29: (0, 168), 32: (0, 169), 79: (0, 170), 48: (0, 171), 67: (0, 172)}, 81: {32: (1, {'@': 121}), 55: (1, {'@': 121}), 56: (1, {'@': 121}), 44: (1, {'@': 121}), 72: (1, {'@': 121}), 48: (1, {'@': 121}), 58: (1, {'@': 121}), 59: (1, {'@': 121}), 75: (1, {'@': 121}), 76: (1, {'@': 121}), 61: (1, {'@': 121}), 29: (1, {'@': 121}), 62: (1, {'@': 121}), 63: (1, {'@': 121}), 64: (1, {'@': 121}), 77: (1, {'@': 121}), 0: (1, {'@': 121}), 78: (1, {'@': 121}), 79: (1, {'@': 121}), 80: (1, {'@': 121}), 67: (1, {'@': 121}), 82: (1, {'@': 121}), 12: (1, {'@': 121}), 70: (1, {'@': 121}), 126: (0, 173), 81: (0, 174), 83: (0, 175)}, 82: {32: (1, {'@': 122}), 55: (1, {'@': 122}), 56: (1, {'@': 122}), 44: (1, {'@': 122}), 72: (1, {'@': 122}), 48: (1, {'@': 122}), 58: (1, {'@': 122}), 59: (1, {'@': 122}), 75: (1, {'@': 122}), 76: (1, {'@': 122}), 61: (1, {'@': 122}), 29: (1, {'@': 122}), 62: (1, {'@': 122}), 63: (1, {'@': 122}), 64: (1, {'@': 122}), 77: (1, {'@': 122}), 0: (1, {'@': 122}), 78: (1, {'@': 122}), 79: (1, {'@': 122}), 80: (1, {'@': 122}), 81: (1, {'@': 122}), 67: (1, {'@': 122}), 82: (1, {'@': 122}), 83: (1, {'@': 122}), 12: (1, {'@': 122}), 70: (1, {'@': 122})}, 83: {32: (1, {'@': 123}), 55: (1, {'@': 123}), 56: (1, {'@': 123}), 44: (1, {'@': 123}), 48: (1, {'@': 123}), 58: (1, {'@': 123}), 59: (1, {'@': 123}), 75: (1, {'@': 123}), 76: (1, {'@': 123}), 61: (1, {'@': 123}), 29: (1, {'@': 123}), 62: (1, {'@': 123}), 63: (1, {'@': 123}), 64: (1, {'@': 123}), 77: (1, {'@': 123}), 0: (1, {'@': 123}), 79: (1, {'@': 123}), 80: (1, {'@': 123}), 67: (1, {'@': 123}), 82: (1, {'@': 123}), 12: (1, {'@': 123}), 70: (1, {'@': 123}), 127: (0, 176), 72: (0, 177)}, 84: {2: (1, {'@': 124})}, 85: {101: (0, 76), 30: (0, 78), 99: (0, 79), 20: (0, 20), 102: (0, 80), 103: (0, 81), 104: (0, 82), 105: (0, 83), 98: (0, 84), 22: (0, 85), 106: (0, 86), 107: (0, 87), 108: (0, 178), 29: (0, 89), 110: (0, 91), 111: (0, 92), 33: (0, 94), 112: (0, 95), 43: (0, 43), 49: (0, 96), 25: (0, 97), 2: (0, 2), 3: (0, 139), 97: (0, 98), 44: (0, 99), 109: (0, 179), 100: (0, 100), 113: (0, 101), 38: (0, 102)}, 86: {128: (0, 180), 2: (0, 2), 3: (0, 181)}, 87: {128: (0, 182), 2: (0, 2), 3: (0, 181)}, 88: {62: (1, {'@': 125}), 63: (1, {'@': 125}), 32: (1, {'@': 125}), 64: (1, {'@': 125}), 55: (1, {'@': 125}), 77: (1, {'@': 125}), 56: (1, {'@': 125}), 0: (1, {'@': 125}), 70: (1, {'@': 125}), 79: (1, {'@': 125}), 48: (1, {'@': 125}), 80: (1, {'@': 125}), 67: (1, {'@': 125}), 82: (1, {'@': 125}), 59: (1, {'@': 125}), 75: (1, {'@': 125}), 76: (1, {'@': 125}), 12: (1, {'@': 125}), 29: (1, {'@': 125})}, 89: {101: (0, 76), 30: (0, 78), 99: (0, 79), 20: (0, 20), 102: (0, 80), 103: (0, 81), 104: (0, 82), 105: (0, 83), 98: (0, 84), 22: (0, 85), 109: (0, 183), 106: (0, 86), 107: (0, 87), 108: (0, 88), 29: (0, 89), 110: (0, 91), 111: (0, 92), 33: (0, 94), 112: (0, 95), 43: (0, 43), 49: (0, 96), 2: (0, 2), 25: (0, 97), 3: (0, 139), 97: (0, 98), 44: (0, 99), 100: (0, 100), 113: (0, 101), 38: (0, 102)}, 90: {76: (0, 184), 64: (0, 185)}, 91: {62: (1, {'@': 126}), 79: (1, {'@': 126}), 48: (1, {'@': 126}), 32: (1, {'@': 126}), 64: (1, {'@': 126}), 77: (1, {'@': 126}), 67: (1, {'@': 126}), 56: (1, {'@': 126}), 0: (1, {'@': 126}), 76: (1, {'@': 126}), 12: (1, {'@': 126}), 29: (1, {'@': 126}), 75: (0, 186), 70: (0, 187), 80: (0, 188), 55: (0, 189), 59: (0, 190), 82: (0, 191)}, 92: {32: (1, {'@': 127}), 55: (1, {'@': 127}), 56: (1, {'@': 127}), 48: (1, {'@': 127}), 58: (1, {'@': 127}), 59: (1, {'@': 127}), 75: (1, {'@': 127}), 76: (1, {'@': 127}), 61: (1, {'@': 127}), 29: (1, {'@': 127}), 62: (1, {'@': 127}), 63: (1, {'@': 127}), 64: (1, {'@': 127}), 77: (1, {'@': 127}), 0: (1, {'@': 127}), 79: (1, {'@': 127}), 80: (1, {'@': 127}), 67: (1, {'@': 127}), 82: (1, {'@': 127}), 12: (1, {'@': 127}), 70: (1, {'@': 127}), 129: (0, 192), 44: (0, 193)}, 93: {64: (0, 194)}, 94: {62: (1, {'@': 128}), 79: (1, {'@': 128}), 48: (1, {'@': 128}), 32: (1, {'@': 128}), 64: (1, {'@': 128}), 77: (1, {'@': 128}), 67: (1, {'@': 128}), 56: (1, {'@': 128}), 0: (1, {'@': 128}), 76: (1, {'@': 128}), 12: (1, {'@': 128}), 29: (1, {'@': 128})}, 95: {32: (1, {'@': 129}), 55: (1, {'@': 129}), 56: (1, {'@': 129}), 48: (1, {'@': 129}), 58: (1, {'@': 129}), 59: (1, {'@': 129}), 75: (1, {'@': 129}), 76: (1, {'@': 129}), 61: (1, {'@': 129}), 29: (1, {'@': 129}), 62: (1, {'@': 129}), 63: (1, {'@': 129}), 64: (1, {'@': 129}), 77: (1, {'@': 129}), 0: (1, {'@': 129}), 79: (1, {'@': 129}), 80: (1, {'@': 129}), 67: (1, {'@': 129}), 82: (1, {'@': 129}), 12: (1, {'@': 129}), 70: (1, {'@': 129})}, 96: {101: (0, 76), 30: (0, 78), 99: (0, 79), 20: (0, 20), 102: (0, 80), 103: (0, 81), 104: (0, 82), 105: (0, 83), 98: (0, 84), 22: (0, 85), 106: (0, 86), 107: (0, 87), 108: (0, 88), 29: (0, 89), 110: (0, 91), 111: (0, 92), 33: (0, 94), 112: (0, 95), 43: (0, 43), 49: (0, 96), 2: (0, 2), 25: (0, 97), 3: (0, 139), 97: (0, 98), 44: (0, 99), 109: (0, 195), 100: (0, 100), 113: (0, 101), 38: (0, 102)}, 97: {32: (1, {'@': 130}), 55: (1, {'@': 130}), 56: (1, {'@': 130}), 44: (1, {'@': 130}), 72: (1, {'@': 130}), 48: (1, {'@': 130}), 58: (1, {'@': 130}), 59: (1, {'@': 130}), 75: (1, {'@': 130}), 76: (1, {'@': 130}), 61: (1, {'@': 130}), 29: (1, {'@': 130}), 62: (1, {'@': 130}), 63: (1, {'@': 130}), 64: (1, {'@': 130}), 77: (1, {'@': 130}), 0: (1, {'@': 130}), 78: (1, {'@': 130}), 79: (1, {'@': 130}), 80: (1, {'@': 130}), 81: (1, {'@': 130}), 67: (1, {'@': 130}), 82: (1, {'@': 130}), 83: (1, {'@': 130}), 12: (1, {'@': 130}), 70: (1, {'@': 130})}, 98: {2: (1, {'@': 131})}, 99: {104: (0, 82), 43: (0, 43), 25: (0, 97), 2: (0, 2), 103: (0, 196), 22: (0, 142), 44: (0, 99), 3: (0, 197)}, 100: {2: (1, {'@': 132})}, 101: {62: (1, {'@': 133}), 79: (1, {'@': 133}), 48: (1, {'@': 133}), 32: (1, {'@': 133}), 64: (1, {'@': 133}), 77: (1, {'@': 133}), 67: (1, {'@': 133}), 56: (1, {'@': 133}), 0: (1, {'@': 133}), 76: (1, {'@': 133}), 12: (1, {'@': 133}), 29: (1, {'@': 133})}, 102: {62: (1, {'@': 134}), 79: (1, {'@': 134}), 48: (1, {'@': 134}), 32: (1, {'@': 134}), 64: (1, {'@': 134}), 77: (1, {'@': 134}), 67: (1, {'@': 134}), 56: (1, {'@': 134}), 0: (1, {'@': 134}), 76: (1, {'@': 134}), 12: (1, {'@': 134}), 29: (1, {'@': 134})}, 103: {54: (1, {'@': 135}), 32: (1, {'@': 135}), 15: (1, {'@': 135}), 55: (1, {'@': 135}), 38: (1, {'@': 135}), 71: (1, {'@': 135}), 44: (1, {'@': 135}), 2: (1, {'@': 135}), 72: (1, {'@': 135}), 57: (1, {'@': 135}), 48: (1, {'@': 135}), 43: (1, {'@': 135}), 33: (1, {'@': 135}), 74: (1, {'@': 135}), 58: (1, {'@': 135}), 21: (1, {'@': 135}), 59: (1, {'@': 135}), 75: (1, {'@': 135}), 31: (1, {'@': 135}), 36: (1, {'@': 135}), 61: (1, {'@': 135}), 29: (1, {'@': 135}), 62: (1, {'@': 135}), 63: (1, {'@': 135}), 47: (1, {'@': 135}), 34: (1, {'@': 135}), 77: (1, {'@': 135}), 20: (1, {'@': 135}), 78: (1, {'@': 135}), 80: (1, {'@': 135}), 50: (1, {'@': 135}), 66: (1, {'@': 135}), 65: (1, {'@': 135}), 49: (1, {'@': 135}), 28: (1, {'@': 135}), 82: (1, {'@': 135}), 12: (1, {'@': 135}), 22: (1, {'@': 135}), 70: (1, {'@': 135}), 81: (0, 198)}, 104: {15: (0, 15), 43: (0, 43), 2: (0, 2), 17: (0, 17), 18: (0, 18), 20: (0, 20), 22: (0, 22), 36: (0, 36), 23: (0, 23), 25: (0, 25), 26: (0, 26), 46: (0, 46), 19: (0, 199), 30: (0, 30), 3: (0, 48), 12: (0, 12), 33: (0, 33), 14: (0, 200), 38: (0, 38), 52: (0, 53)}, 105: {54: (0, 201), 73: (0, 202)}, 106: {15: (0, 15), 16: (0, 16), 17: (0, 17), 18: (0, 18), 20: (0, 20), 21: (0, 21), 22: (0, 22), 23: (0, 23), 24: (0, 24), 25: (0, 25), 26: (0, 26), 27: (0, 27), 28: (0, 28), 29: (0, 29), 19: (0, 19), 30: (0, 30), 31: (0, 31), 32: (0, 32), 12: (0, 74), 33: (0, 33), 34: (0, 34), 35: (0, 35), 36: (0, 36), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40), 41: (0, 41), 42: (0, 42), 43: (0, 43), 2: (0, 2), 52: (0, 53), 44: (0, 44), 46: (0, 46), 47: (0, 47), 3: (0, 48), 48: (0, 49), 45: (0, 203), 49: (0, 50), 50: (0, 51), 51: (0, 52)}, 107: {15: (0, 15), 16: (0, 16), 17: (0, 17), 18: (0, 18), 20: (0, 20), 21: (0, 21), 22: (0, 22), 23: (0, 23), 24: (0, 24), 25: (0, 25), 26: (0, 26), 27: (0, 27), 28: (0, 28), 29: (0, 29), 19: (0, 19), 30: (0, 30), 77: (0, 204), 31: (0, 31), 32: (0, 32), 33: (0, 33), 34: (0, 34), 35: (0, 35), 36: (0, 36), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40), 41: (0, 41), 42: (0, 42), 43: (0, 43), 2: (0, 2), 52: (0, 53), 44: (0, 44), 46: (0, 46), 45: (0, 205), 47: (0, 47), 3: (0, 48), 48: (0, 49), 49: (0, 50), 50: (0, 51), 51: (0, 52)}, 108: {12: (0, 12), 63: (0, 206), 14: (0, 207), 77: (0, 208)}, 109: {15: (0, 15), 14: (0, 209), 43: (0, 43), 2: (0, 2), 17: (0, 17), 18: (0, 18), 20: (0, 20), 22: (0, 22), 36: (0, 36), 25: (0, 25), 26: (0, 26), 46: (0, 46), 30: (0, 30), 23: (0, 210), 3: (0, 48), 12: (0, 12), 33: (0, 33), 38: (0, 38), 52: (0, 53)}, 110: {54: (1, {'@': 136}), 32: (1, {'@': 136}), 15: (1, {'@': 136}), 55: (1, {'@': 136}), 38: (1, {'@': 136}), 71: (1, {'@': 136}), 44: (1, {'@': 136}), 2: (1, {'@': 136}), 72: (1, {'@': 136}), 57: (1, {'@': 136}), 48: (1, {'@': 136}), 43: (1, {'@': 136}), 33: (1, {'@': 136}), 74: (1, {'@': 136}), 58: (1, {'@': 136}), 21: (1, {'@': 136}), 59: (1, {'@': 136}), 75: (1, {'@': 136}), 31: (1, {'@': 136}), 36: (1, {'@': 136}), 61: (1, {'@': 136}), 29: (1, {'@': 136}), 62: (1, {'@': 136}), 63: (1, {'@': 136}), 47: (1, {'@': 136}), 34: (1, {'@': 136}), 77: (1, {'@': 136}), 20: (1, {'@': 136}), 78: (1, {'@': 136}), 80: (1, {'@': 136}), 50: (1, {'@': 136}), 81: (1, {'@': 136}), 66: (1, {'@': 136}), 65: (1, {'@': 136}), 49: (1, {'@': 136}), 28: (1, {'@': 136}), 82: (1, {'@': 136}), 12: (1, {'@': 136}), 22: (1, {'@': 136}), 70: (1, {'@': 136}), 53: (0, 211)}, 111: {53: (1, {'@': 137}), 54: (1, {'@': 137}), 15: (1, {'@': 137}), 55: (1, {'@': 137}), 38: (1, {'@': 137}), 57: (1, {'@': 137}), 58: (1, {'@': 137}), 21: (1, {'@': 137}), 59: (1, {'@': 137}), 60: (1, {'@': 137}), 61: (1, {'@': 137}), 29: (1, {'@': 137}), 62: (1, {'@': 137}), 63: (1, {'@': 137}), 47: (1, {'@': 137}), 34: (1, {'@': 137}), 20: (1, {'@': 137}), 65: (1, {'@': 137}), 66: (1, {'@': 137}), 22: (1, {'@': 137}), 69: (1, {'@': 137}), 70: (1, {'@': 137}), 32: (1, {'@': 137}), 71: (1, {'@': 137}), 44: (1, {'@': 137}), 2: (1, {'@': 137}), 72: (1, {'@': 137}), 48: (1, {'@': 137}), 43: (1, {'@': 137}), 33: (1, {'@': 137}), 74: (1, {'@': 137}), 75: (1, {'@': 137}), 31: (1, {'@': 137}), 36: (1, {'@': 137}), 77: (1, {'@': 137}), 78: (1, {'@': 137}), 80: (1, {'@': 137}), 50: (1, {'@': 137}), 81: (1, {'@': 137}), 49: (1, {'@': 137}), 28: (1, {'@': 137}), 82: (1, {'@': 137}), 12: (1, {'@': 137})}, 112: {15: (0, 15), 43: (0, 43), 2: (0, 2), 17: (0, 17), 18: (0, 18), 33: (0, 33), 20: (0, 20), 22: (0, 22), 36: (0, 36), 25: (0, 25), 26: (0, 212), 46: (0, 46), 3: (0, 48), 30: (0, 30), 38: (0, 38), 52: (0, 53)}, 113: {41: (0, 41), 16: (0, 16), 15: (0, 15), 43: (0, 43), 2: (0, 2), 52: (0, 53), 17: (0, 17), 18: (0, 18), 44: (0, 44), 20: (0, 20), 22: (0, 22), 36: (0, 36), 23: (0, 23), 25: (0, 25), 26: (0, 26), 46: (0, 46), 19: (0, 19), 30: (0, 30), 37: (0, 37), 3: (0, 48), 33: (0, 33), 39: (0, 39), 27: (0, 213), 38: (0, 38)}, 114: {41: (0, 41), 16: (0, 16), 15: (0, 15), 43: (0, 43), 2: (0, 2), 52: (0, 53), 17: (0, 17), 18: (0, 18), 44: (0, 44), 20: (0, 20), 22: (0, 22), 36: (0, 36), 23: (0, 23), 25: (0, 25), 26: (0, 26), 46: (0, 46), 19: (0, 19), 30: (0, 30), 37: (0, 37), 27: (0, 214), 3: (0, 48), 33: (0, 33), 39: (0, 39), 38: (0, 38)}, 115: {41: (0, 41), 16: (0, 16), 15: (0, 15), 43: (0, 43), 2: (0, 2), 52: (0, 53), 17: (0, 17), 18: (0, 18), 44: (0, 44), 20: (0, 20), 22: (0, 22), 36: (0, 36), 23: (0, 23), 25: (0, 25), 26: (0, 26), 46: (0, 46), 19: (0, 19), 30: (0, 30), 37: (0, 37), 3: (0, 48), 33: (0, 33), 39: (0, 39), 27: (0, 215), 38: (0, 38)}, 116: {41: (0, 41), 16: (0, 16), 15: (0, 15), 43: (0, 43), 2: (0, 2), 52: (0, 53), 17: (0, 17), 18: (0, 18), 44: (0, 44), 20: (0, 20), 22: (0, 22), 36: (0, 36), 23: (0, 23), 25: (0, 25), 26: (0, 26), 46: (0, 46), 19: (0, 19), 30: (0, 30), 37: (0, 37), 3: (0, 48), 33: (0, 33), 39: (0, 39), 27: (0, 216), 38: (0, 38)}, 117: {41: (0, 41), 16: (0, 16), 15: (0, 15), 43: (0, 43), 2: (0, 2), 52: (0, 53), 17: (0, 17), 18: (0, 18), 44: (0, 44), 20: (0, 20), 22: (0, 22), 36: (0, 36), 23: (0, 23), 25: (0, 25), 26: (0, 26), 46: (0, 46), 27: (0, 217), 19: (0, 19), 30: (0, 30), 37: (0, 37), 3: (0, 48), 33: (0, 33), 39: (0, 39), 38: (0, 38)}, 118: {41: (0, 41), 16: (0, 16), 15: (0, 15), 43: (0, 43), 2: (0, 2), 52: (0, 53), 17: (0, 17), 18: (0, 18), 44: (0, 44), 20: (0, 20), 22: (0, 22), 36: (0, 36), 23: (0, 23), 25: (0, 25), 26: (0, 26), 46: (0, 46), 19: (0, 19), 30: (0, 30), 37: (0, 37), 27: (0, 218), 3: (0, 48), 33: (0, 33), 39: (0, 39), 38: (0, 38)}, 119: {62: (0, 219)}, 120: {15: (0, 15), 16: (0, 16), 45: (0, 121), 17: (0, 17), 18: (0, 18), 19: (0, 19), 20: (0, 20), 21: (0, 21), 22: (0, 22), 23: (0, 23), 24: (0, 24), 25: (0, 25), 26: (0, 26), 27: (0, 27), 28: (0, 28), 29: (0, 29), 30: (0, 30), 118: (0, 220), 31: (0, 31), 32: (0, 32), 12: (0, 74), 33: (0, 33), 34: (0, 34), 35: (0, 35), 36: (0, 36), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40), 41: (0, 41), 42: (0, 42), 43: (0, 43), 2: (0, 2), 44: (0, 44), 46: (0, 46), 47: (0, 47), 3: (0, 48), 48: (0, 49), 49: (0, 50), 50: (0, 51), 51: (0, 52), 52: (0, 53)}, 121: {32: (1, {'@': 138}), 15: (1, {'@': 138}), 38: (1, {'@': 138}), 71: (1, {'@': 138}), 44: (1, {'@': 138}), 2: (1, {'@': 138}), 57: (1, {'@': 138}), 48: (1, {'@': 138}), 43: (1, {'@': 138}), 33: (1, {'@': 138}), 74: (1, {'@': 138}), 58: (1, {'@': 138}), 21: (1, {'@': 138}), 31: (1, {'@': 138}), 36: (1, {'@': 138}), 61: (1, {'@': 138}), 29: (1, {'@': 138}), 62: (1, {'@': 138}), 63: (1, {'@': 138}), 47: (1, {'@': 138}), 34: (1, {'@': 138}), 77: (1, {'@': 138}), 20: (1, {'@': 138}), 50: (1, {'@': 138}), 66: (1, {'@': 138}), 65: (1, {'@': 138}), 49: (1, {'@': 138}), 28: (1, {'@': 138}), 12: (0, 12), 22: (1, {'@': 138}), 14: (0, 221)}, 122: {32: (0, 32), 15: (0, 15), 38: (0, 38), 71: (1, {'@': 139}), 44: (0, 44), 2: (0, 2), 57: (1, {'@': 139}), 48: (0, 49), 43: (0, 43), 33: (0, 33), 74: (1, {'@': 139}), 58: (1, {'@': 139}), 21: (0, 21), 31: (0, 31), 36: (0, 36), 61: (1, {'@': 139}), 29: (0, 29), 62: (1, {'@': 139}), 63: (1, {'@': 139}), 47: (0, 47), 34: (0, 34), 77: (1, {'@': 139}), 20: (0, 20), 50: (0, 51), 66: (1, {'@': 139}), 65: (1, {'@': 139}), 49: (0, 50), 28: (0, 28), 12: (1, {'@': 139}), 22: (0, 22), 16: (0, 16), 17: (0, 17), 18: (0, 18), 23: (0, 23), 24: (0, 24), 25: (0, 25), 26: (0, 26), 27: (0, 27), 45: (0, 222), 19: (0, 19), 30: (0, 30), 35: (0, 35), 37: (0, 37), 39: (0, 39), 40: (0, 40), 41: (0, 41), 42: (0, 42), 52: (0, 53), 46: (0, 46), 3: (0, 48), 51: (0, 52)}, 123: {66: (0, 223)}, 124: {32: (1, {'@': 140}), 15: (0, 15), 38: (0, 38), 71: (1, {'@': 140}), 44: (0, 44), 2: (0, 2), 57: (1, {'@': 140}), 48: (1, {'@': 140}), 43: (0, 43), 33: (0, 33), 74: (1, {'@': 140}), 58: (1, {'@': 140}), 21: (1, {'@': 140}), 31: (1, {'@': 140}), 36: (0, 36), 61: (1, {'@': 140}), 29: (1, {'@': 140}), 62: (1, {'@': 140}), 63: (1, {'@': 140}), 47: (1, {'@': 140}), 34: (1, {'@': 140}), 77: (1, {'@': 140}), 20: (0, 20), 50: (1, {'@': 140}), 66: (1, {'@': 140}), 65: (1, {'@': 140}), 49: (1, {'@': 140}), 28: (1, {'@': 140}), 12: (1, {'@': 140}), 22: (0, 22), 41: (0, 41), 16: (0, 16), 17: (0, 17), 18: (0, 18), 19: (0, 19), 23: (0, 23), 27: (0, 27), 25: (0, 25), 26: (0, 26), 46: (0, 46), 30: (0, 30), 37: (0, 37), 3: (0, 48), 24: (0, 224), 39: (0, 39), 52: (0, 53)}, 125: {130: (0, 225), 58: (0, 226), 61: (0, 227), 63: (0, 228)}, 126: {53: (1, {'@': 141}), 54: (1, {'@': 141}), 15: (1, {'@': 141}), 55: (1, {'@': 141}), 38: (1, {'@': 141}), 57: (1, {'@': 141}), 58: (1, {'@': 141}), 21: (1, {'@': 141}), 59: (1, {'@': 141}), 60: (1, {'@': 141}), 61: (1, {'@': 141}), 29: (1, {'@': 141}), 62: (1, {'@': 141}), 63: (1, {'@': 141}), 47: (1, {'@': 141}), 34: (1, {'@': 141}), 20: (1, {'@': 141}), 65: (1, {'@': 141}), 66: (1, {'@': 141}), 69: (1, {'@': 141}), 22: (1, {'@': 141}), 70: (1, {'@': 141}), 32: (1, {'@': 141}), 71: (1, {'@': 141}), 44: (1, {'@': 141}), 2: (1, {'@': 141}), 72: (1, {'@': 141}), 48: (1, {'@': 141}), 43: (1, {'@': 141}), 33: (1, {'@': 141}), 74: (1, {'@': 141}), 75: (1, {'@': 141}), 31: (1, {'@': 141}), 36: (1, {'@': 141}), 77: (1, {'@': 141}), 78: (1, {'@': 141}), 80: (1, {'@': 141}), 50: (1, {'@': 141}), 81: (1, {'@': 141}), 49: (1, {'@': 141}), 28: (1, {'@': 141}), 82: (1, {'@': 141}), 12: (1, {'@': 141})}, 127: {54: (1, {'@': 142}), 32: (1, {'@': 142}), 15: (1, {'@': 142}), 55: (1, {'@': 142}), 38: (1, {'@': 142}), 71: (1, {'@': 142}), 44: (1, {'@': 142}), 2: (1, {'@': 142}), 72: (1, {'@': 142}), 57: (1, {'@': 142}), 48: (1, {'@': 142}), 43: (1, {'@': 142}), 33: (1, {'@': 142}), 74: (1, {'@': 142}), 58: (1, {'@': 142}), 21: (1, {'@': 142}), 59: (1, {'@': 142}), 75: (1, {'@': 142}), 31: (1, {'@': 142}), 36: (1, {'@': 142}), 61: (1, {'@': 142}), 29: (1, {'@': 142}), 62: (1, {'@': 142}), 63: (1, {'@': 142}), 47: (1, {'@': 142}), 34: (1, {'@': 142}), 77: (1, {'@': 142}), 20: (1, {'@': 142}), 80: (1, {'@': 142}), 50: (1, {'@': 142}), 66: (1, {'@': 142}), 65: (1, {'@': 142}), 49: (1, {'@': 142}), 28: (1, {'@': 142}), 82: (1, {'@': 142}), 12: (1, {'@': 142}), 22: (1, {'@': 142}), 70: (1, {'@': 142}), 78: (0, 229)}, 128: {15: (0, 15), 43: (0, 43), 2: (0, 2), 52: (0, 53), 17: (0, 17), 18: (0, 18), 14: (0, 230), 20: (0, 20), 22: (0, 22), 36: (0, 36), 23: (0, 23), 25: (0, 25), 26: (0, 26), 37: (0, 231), 46: (0, 46), 19: (0, 19), 30: (0, 30), 3: (0, 48), 12: (0, 12), 33: (0, 33), 38: (0, 38)}, 129: {54: (1, {'@': 143}), 32: (1, {'@': 143}), 15: (1, {'@': 143}), 55: (1, {'@': 143}), 38: (1, {'@': 143}), 71: (1, {'@': 143}), 44: (1, {'@': 143}), 2: (1, {'@': 143}), 57: (1, {'@': 143}), 48: (1, {'@': 143}), 43: (1, {'@': 143}), 33: (1, {'@': 143}), 74: (1, {'@': 143}), 58: (1, {'@': 143}), 21: (1, {'@': 143}), 59: (1, {'@': 143}), 75: (1, {'@': 143}), 31: (1, {'@': 143}), 36: (1, {'@': 143}), 61: (1, {'@': 143}), 29: (1, {'@': 143}), 62: (1, {'@': 143}), 63: (1, {'@': 143}), 47: (1, {'@': 143}), 34: (1, {'@': 143}), 77: (1, {'@': 143}), 20: (1, {'@': 143}), 80: (1, {'@': 143}), 50: (1, {'@': 143}), 66: (1, {'@': 143}), 65: (1, {'@': 143}), 49: (1, {'@': 143}), 28: (1, {'@': 143}), 82: (1, {'@': 143}), 12: (1, {'@': 143}), 22: (1, {'@': 143}), 70: (1, {'@': 143}), 72: (0, 232)}, 130: {15: (0, 15), 43: (0, 43), 2: (0, 2), 52: (0, 53), 17: (0, 17), 18: (0, 18), 20: (0, 20), 22: (0, 22), 36: (0, 36), 23: (0, 23), 25: (0, 25), 26: (0, 26), 46: (0, 46), 19: (0, 19), 30: (0, 30), 37: (0, 37), 3: (0, 48), 12: (0, 12), 39: (0, 233), 33: (0, 33), 14: (0, 234), 38: (0, 38)}, 131: {54: (1, {'@': 144}), 32: (1, {'@': 144}), 15: (1, {'@': 144}), 55: (1, {'@': 144}), 38: (1, {'@': 144}), 71: (1, {'@': 144}), 44: (0, 235), 2: (1, {'@': 144}), 57: (1, {'@': 144}), 48: (1, {'@': 144}), 43: (1, {'@': 144}), 33: (1, {'@': 144}), 74: (1, {'@': 144}), 58: (1, {'@': 144}), 21: (1, {'@': 144}), 59: (1, {'@': 144}), 75: (1, {'@': 144}), 31: (1, {'@': 144}), 36: (1, {'@': 144}), 61: (1, {'@': 144}), 29: (1, {'@': 144}), 62: (1, {'@': 144}), 63: (1, {'@': 144}), 47: (1, {'@': 144}), 34: (1, {'@': 144}), 77: (1, {'@': 144}), 20: (1, {'@': 144}), 80: (1, {'@': 144}), 50: (1, {'@': 144}), 66: (1, {'@': 144}), 65: (1, {'@': 144}), 49: (1, {'@': 144}), 28: (1, {'@': 144}), 82: (1, {'@': 144}), 12: (1, {'@': 144}), 22: (1, {'@': 144}), 70: (1, {'@': 144})}, 132: {15: (0, 15), 43: (0, 43), 2: (0, 2), 52: (0, 53), 17: (0, 17), 41: (0, 236), 18: (0, 18), 20: (0, 20), 22: (0, 22), 36: (0, 36), 23: (0, 23), 25: (0, 25), 26: (0, 26), 46: (0, 46), 19: (0, 19), 30: (0, 30), 37: (0, 37), 3: (0, 48), 12: (0, 12), 33: (0, 33), 39: (0, 39), 14: (0, 237), 38: (0, 38)}, 133: {32: (0, 32), 15: (1, {'@': 145}), 38: (1, {'@': 145}), 71: (1, {'@': 145}), 44: (1, {'@': 145}), 2: (1, {'@': 145}), 57: (1, {'@': 145}), 48: (0, 49), 43: (1, {'@': 145}), 33: (1, {'@': 145}), 74: (1, {'@': 145}), 58: (1, {'@': 145}), 21: (1, {'@': 145}), 31: (1, {'@': 145}), 36: (1, {'@': 145}), 61: (1, {'@': 145}), 29: (1, {'@': 145}), 62: (1, {'@': 145}), 63: (1, {'@': 145}), 47: (0, 47), 34: (1, {'@': 145}), 77: (1, {'@': 145}), 20: (1, {'@': 145}), 50: (1, {'@': 145}), 66: (1, {'@': 145}), 65: (1, {'@': 145}), 49: (0, 50), 28: (0, 28), 12: (1, {'@': 145}), 22: (1, {'@': 145}), 51: (0, 52), 42: (0, 162), 40: (0, 40)}, 134: {54: (1, {'@': 146}), 32: (1, {'@': 146}), 15: (1, {'@': 146}), 55: (1, {'@': 146}), 38: (1, {'@': 146}), 71: (1, {'@': 146}), 44: (1, {'@': 146}), 2: (1, {'@': 146}), 57: (1, {'@': 146}), 48: (1, {'@': 146}), 43: (1, {'@': 146}), 33: (1, {'@': 146}), 74: (1, {'@': 146}), 58: (1, {'@': 146}), 21: (1, {'@': 146}), 59: (1, {'@': 146}), 75: (1, {'@': 146}), 31: (1, {'@': 146}), 36: (1, {'@': 146}), 61: (1, {'@': 146}), 29: (1, {'@': 146}), 62: (1, {'@': 146}), 63: (1, {'@': 146}), 47: (1, {'@': 146}), 34: (1, {'@': 146}), 77: (1, {'@': 146}), 20: (1, {'@': 146}), 80: (1, {'@': 146}), 50: (1, {'@': 146}), 66: (1, {'@': 146}), 65: (1, {'@': 146}), 49: (1, {'@': 146}), 28: (1, {'@': 146}), 82: (1, {'@': 146}), 12: (1, {'@': 146}), 22: (1, {'@': 146}), 70: (1, {'@': 146})}, 135: {0: (1, {'@': 147}), 12: (1, {'@': 147}), 64: (1, {'@': 147})}, 136: {52: (0, 111), 15: (0, 15), 43: (0, 43), 2: (0, 2), 17: (0, 17), 18: (0, 18), 33: (0, 33), 20: (0, 20), 36: (0, 36), 22: (0, 22), 69: (0, 238), 25: (0, 25), 46: (0, 46), 30: (0, 30), 38: (0, 38), 3: (0, 48)}, 137: {32: (1, {'@': 148}), 15: (1, {'@': 148}), 38: (1, {'@': 148}), 71: (1, {'@': 148}), 44: (1, {'@': 148}), 2: (1, {'@': 148}), 57: (1, {'@': 148}), 48: (1, {'@': 148}), 43: (1, {'@': 148}), 33: (1, {'@': 148}), 74: (1, {'@': 148}), 58: (1, {'@': 148}), 21: (1, {'@': 148}), 31: (1, {'@': 148}), 36: (1, {'@': 148}), 61: (1, {'@': 148}), 29: (1, {'@': 148}), 62: (1, {'@': 148}), 63: (1, {'@': 148}), 47: (1, {'@': 148}), 34: (1, {'@': 148}), 77: (1, {'@': 148}), 20: (1, {'@': 148}), 50: (1, {'@': 148}), 66: (1, {'@': 148}), 65: (1, {'@': 148}), 49: (1, {'@': 148}), 28: (1, {'@': 148}), 12: (1, {'@': 148}), 22: (1, {'@': 148})}, 138: {77: (0, 239)}, 139: {32: (1, {'@': 117}), 55: (1, {'@': 117}), 56: (1, {'@': 117}), 44: (1, {'@': 117}), 72: (1, {'@': 117}), 48: (1, {'@': 117}), 58: (1, {'@': 117}), 59: (1, {'@': 117}), 75: (1, {'@': 117}), 76: (1, {'@': 117}), 61: (1, {'@': 117}), 29: (1, {'@': 117}), 62: (1, {'@': 117}), 63: (1, {'@': 117}), 64: (1, {'@': 117}), 77: (1, {'@': 117}), 0: (1, {'@': 117}), 78: (1, {'@': 117}), 79: (1, {'@': 117}), 80: (1, {'@': 117}), 81: (1, {'@': 117}), 67: (1, {'@': 117}), 82: (1, {'@': 117}), 83: (1, {'@': 117}), 12: (1, {'@': 117}), 70: (1, {'@': 117}), 22: (0, 240), 36: (0, 166)}, 140: {77: (1, {'@': 149}), 63: (1, {'@': 149})}, 141: {77: (1, {'@': 150}), 63: (0, 241), 131: (0, 242)}, 142: {112: (0, 95), 101: (0, 76), 43: (0, 43), 25: (0, 97), 2: (0, 2), 108: (0, 243), 44: (0, 99), 3: (0, 197), 105: (0, 83), 111: (0, 92), 103: (0, 81), 104: (0, 82), 22: (0, 142)}, 143: {22: (0, 244), 54: (0, 245)}, 144: {0: (1, {'@': 151})}, 145: {2: (0, 2), 3: (0, 181), 128: (0, 246)}, 146: {30: (0, 247), 20: (0, 20)}, 147: {30: (0, 248), 20: (0, 20)}, 148: {30: (0, 249), 20: (0, 20)}, 149: {30: (0, 250), 20: (0, 20)}, 150: {30: (0, 251), 20: (0, 20)}, 151: {3: (0, 252), 2: (0, 2)}, 152: {132: (0, 253), 133: (0, 254)}, 153: {2: (0, 2), 3: (0, 181), 128: (0, 255)}, 154: {30: (0, 256), 20: (0, 20)}, 155: {128: (0, 257), 2: (0, 2), 3: (0, 181)}, 156: {77: (1, {'@': 152}), 68: (1, {'@': 152}), 83: (1, {'@': 152}), 63: (0, 258)}, 157: {3: (0, 259), 2: (0, 2)}, 158: {3: (0, 260), 2: (0, 2)}, 159: {2: (0, 2), 3: (0, 261)}, 160: {12: (1, {'@': 153}), 64: (1, {'@': 153}), 0: (1, {'@': 153})}, 161: {15: (0, 15), 16: (0, 16), 17: (0, 17), 18: (0, 18), 19: (0, 19), 20: (0, 20), 21: (0, 21), 22: (0, 22), 23: (0, 23), 24: (0, 24), 25: (0, 25), 26: (0, 26), 27: (0, 27), 28: (0, 28), 29: (0, 29), 14: (0, 262), 30: (0, 30), 31: (0, 31), 32: (0, 32), 12: (0, 12), 33: (0, 33), 34: (0, 34), 35: (0, 35), 36: (0, 36), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40), 41: (0, 41), 42: (0, 42), 43: (0, 43), 2: (0, 2), 44: (0, 44), 46: (0, 46), 47: (0, 47), 3: (0, 48), 45: (0, 263), 48: (0, 49), 49: (0, 50), 50: (0, 51), 51: (0, 52), 52: (0, 53)}, 162: {41: (0, 41), 16: (0, 16), 15: (0, 15), 43: (0, 43), 2: (0, 2), 17: (0, 17), 18: (0, 18), 19: (0, 19), 44: (0, 44), 20: (0, 20), 22: (0, 22), 36: (0, 36), 23: (0, 23), 27: (0, 27), 25: (0, 25), 26: (0, 26), 46: (0, 46), 30: (0, 30), 37: (0, 37), 3: (0, 48), 33: (0, 33), 24: (0, 224), 39: (0, 39), 38: (0, 38), 52: (0, 53)}, 163: {0: (1, {'@': 154}), 12: (1, {'@': 154}), 64: (1, {'@': 154})}, 164: {14: (0, 264), 43: (0, 43), 25: (0, 97), 2: (0, 2), 12: (0, 12), 101: (0, 265), 3: (0, 197), 103: (0, 81), 104: (0, 82), 22: (0, 142), 44: (0, 99)}, 165: {32: (1, {'@': 155}), 55: (1, {'@': 155}), 56: (1, {'@': 155}), 44: (1, {'@': 155}), 72: (1, {'@': 155}), 48: (1, {'@': 155}), 58: (1, {'@': 155}), 59: (1, {'@': 155}), 75: (1, {'@': 155}), 76: (1, {'@': 155}), 61: (1, {'@': 155}), 29: (1, {'@': 155}), 62: (1, {'@': 155}), 63: (1, {'@': 155}), 64: (1, {'@': 155}), 77: (1, {'@': 155}), 0: (1, {'@': 155}), 79: (1, {'@': 155}), 80: (1, {'@': 155}), 67: (1, {'@': 155}), 82: (1, {'@': 155}), 12: (1, {'@': 155}), 70: (1, {'@': 155}), 78: (0, 266)}, 166: {112: (0, 95), 101: (0, 76), 43: (0, 43), 25: (0, 97), 2: (0, 2), 108: (0, 267), 44: (0, 99), 3: (0, 197), 105: (0, 83), 111: (0, 92), 103: (0, 81), 104: (0, 82), 22: (0, 142)}, 167: {77: (1, {'@': 112}), 112: (0, 95), 101: (0, 76), 43: (0, 43), 108: (0, 88), 2: (0, 2), 25: (0, 97), 122: (0, 268), 3: (0, 139), 103: (0, 81), 105: (0, 83), 110: (0, 140), 111: (0, 92), 123: (0, 141), 104: (0, 82), 22: (0, 142), 44: (0, 99)}, 168: {134: (0, 269)}, 169: {101: (0, 76), 109: (0, 270), 30: (0, 78), 99: (0, 79), 20: (0, 20), 102: (0, 80), 103: (0, 81), 104: (0, 82), 105: (0, 83), 98: (0, 84), 22: (0, 85), 106: (0, 86), 107: (0, 87), 108: (0, 88), 29: (0, 89), 12: (0, 12), 110: (0, 91), 14: (0, 271), 111: (0, 92), 33: (0, 94), 112: (0, 95), 43: (0, 43), 49: (0, 96), 2: (0, 2), 25: (0, 97), 3: (0, 139), 97: (0, 98), 44: (0, 99), 100: (0, 100), 113: (0, 101), 38: (0, 102)}, 170: {101: (0, 76), 30: (0, 78), 14: (0, 272), 99: (0, 79), 20: (0, 20), 102: (0, 80), 103: (0, 81), 104: (0, 82), 105: (0, 83), 98: (0, 84), 22: (0, 85), 106: (0, 86), 107: (0, 87), 108: (0, 88), 29: (0, 89), 12: (0, 12), 110: (0, 91), 111: (0, 92), 33: (0, 94), 112: (0, 95), 43: (0, 43), 49: (0, 96), 2: (0, 2), 25: (0, 97), 3: (0, 139), 97: (0, 98), 44: (0, 99), 109: (0, 273), 100: (0, 100), 113: (0, 101), 38: (0, 102)}, 171: {101: (0, 76), 30: (0, 78), 99: (0, 79), 20: (0, 20), 102: (0, 80), 103: (0, 81), 104: (0, 82), 105: (0, 83), 98: (0, 84), 109: (0, 274), 22: (0, 85), 106: (0, 86), 107: (0, 87), 108: (0, 88), 29: (0, 89), 12: (0, 12), 110: (0, 91), 111: (0, 92), 33: (0, 94), 112: (0, 95), 43: (0, 43), 49: (0, 96), 2: (0, 2), 25: (0, 97), 3: (0, 139), 97: (0, 98), 44: (0, 99), 100: (0, 100), 14: (0, 275), 113: (0, 101), 38: (0, 102)}, 172: {101: (0, 76), 30: (0, 78), 99: (0, 79), 20: (0, 20), 102: (0, 80), 103: (0, 81), 104: (0, 82), 105: (0, 83), 98: (0, 84), 22: (0, 85), 106: (0, 86), 107: (0, 87), 108: (0, 88), 29: (0, 89), 110: (0, 91), 111: (0, 92), 33: (0, 94), 112: (0, 95), 43: (0, 43), 49: (0, 96), 2: (0, 2), 25: (0, 97), 3: (0, 139), 97: (0, 98), 109: (0, 276), 44: (0, 99), 100: (0, 100), 113: (0, 101), 38: (0, 102)}, 173: {32: (1, {'@': 156}), 55: (1, {'@': 156}), 56: (1, {'@': 156}), 44: (1, {'@': 156}), 72: (1, {'@': 156}), 48: (1, {'@': 156}), 58: (1, {'@': 156}), 59: (1, {'@': 156}), 75: (1, {'@': 156}), 76: (1, {'@': 156}), 61: (1, {'@': 156}), 29: (1, {'@': 156}), 62: (1, {'@': 156}), 63: (1, {'@': 156}), 64: (1, {'@': 156}), 77: (1, {'@': 156}), 0: (1, {'@': 156}), 78: (1, {'@': 156}), 79: (1, {'@': 156}), 80: (1, {'@': 156}), 67: (1, {'@': 156}), 82: (1, {'@': 156}), 12: (1, {'@': 156}), 70: (1, {'@': 156}), 81: (0, 277)}, 174: {104: (0, 82), 43: (0, 43), 25: (0, 97), 14: (0, 278), 2: (0, 2), 12: (0, 12), 103: (0, 279), 22: (0, 142), 44: (0, 99), 3: (0, 197)}, 175: {3: (0, 280), 2: (0, 2)}, 176: {32: (1, {'@': 157}), 55: (1, {'@': 157}), 56: (1, {'@': 157}), 44: (1, {'@': 157}), 48: (1, {'@': 157}), 58: (1, {'@': 157}), 59: (1, {'@': 157}), 75: (1, {'@': 157}), 76: (1, {'@': 157}), 61: (1, {'@': 157}), 29: (1, {'@': 157}), 62: (1, {'@': 157}), 63: (1, {'@': 157}), 64: (1, {'@': 157}), 77: (1, {'@': 157}), 0: (1, {'@': 157}), 79: (1, {'@': 157}), 80: (1, {'@': 157}), 67: (1, {'@': 157}), 82: (1, {'@': 157}), 12: (1, {'@': 157}), 70: (1, {'@': 157}), 72: (0, 281)}, 177: {101: (0, 76), 43: (0, 43), 25: (0, 97), 2: (0, 2), 12: (0, 12), 44: (0, 99), 3: (0, 197), 14: (0, 282), 103: (0, 81), 104: (0, 82), 22: (0, 142), 105: (0, 283)}, 178: {62: (1, {'@': 125}), 63: (1, {'@': 125}), 32: (1, {'@': 125}), 64: (1, {'@': 125}), 55: (1, {'@': 125}), 77: (0, 284), 56: (1, {'@': 125}), 0: (1, {'@': 125}), 70: (1, {'@': 125}), 79: (1, {'@': 125}), 48: (1, {'@': 125}), 80: (1, {'@': 125}), 67: (1, {'@': 125}), 82: (1, {'@': 125}), 59: (1, {'@': 125}), 75: (1, {'@': 125}), 76: (1, {'@': 125}), 12: (1, {'@': 125}), 29: (1, {'@': 125})}, 179: {77: (0, 285), 76: (0, 184)}, 180: {61: (0, 286)}, 181: {77: (1, {'@': 158}), 63: (1, {'@': 158}), 61: (1, {'@': 158}), 83: (0, 287), 22: (0, 288)}, 182: {61: (0, 289)}, 183: {62: (0, 290), 76: (0, 184)}, 184: {101: (0, 76), 30: (0, 78), 99: (0, 79), 20: (0, 20), 102: (0, 80), 103: (0, 81), 104: (0, 82), 105: (0, 83), 98: (0, 84), 22: (0, 85), 106: (0, 86), 107: (0, 87), 108: (0, 88), 29: (0, 89), 12: (0, 12), 110: (0, 91), 111: (0, 92), 33: (0, 94), 112: (0, 95), 43: (0, 43), 49: (0, 96), 2: (0, 2), 25: (0, 97), 3: (0, 139), 109: (0, 291), 97: (0, 98), 14: (0, 292), 44: (0, 99), 100: (0, 100), 113: (0, 101), 38: (0, 102)}, 185: {53: (1, {'@': 159}), 54: (1, {'@': 159}), 15: (1, {'@': 159}), 55: (1, {'@': 159}), 38: (1, {'@': 159}), 57: (1, {'@': 159}), 58: (1, {'@': 159}), 21: (1, {'@': 159}), 59: (1, {'@': 159}), 60: (1, {'@': 159}), 61: (1, {'@': 159}), 29: (1, {'@': 159}), 62: (1, {'@': 159}), 63: (1, {'@': 159}), 47: (1, {'@': 159}), 34: (1, {'@': 159}), 20: (1, {'@': 159}), 65: (1, {'@': 159}), 66: (1, {'@': 159}), 22: (1, {'@': 159}), 69: (1, {'@': 159}), 70: (1, {'@': 159}), 32: (1, {'@': 159}), 71: (1, {'@': 159}), 44: (1, {'@': 159}), 2: (1, {'@': 159}), 72: (1, {'@': 159}), 48: (1, {'@': 159}), 43: (1, {'@': 159}), 33: (1, {'@': 159}), 74: (1, {'@': 159}), 75: (1, {'@': 159}), 31: (1, {'@': 159}), 36: (1, {'@': 159}), 77: (1, {'@': 159}), 78: (1, {'@': 159}), 80: (1, {'@': 159}), 50: (1, {'@': 159}), 81: (1, {'@': 159}), 49: (1, {'@': 159}), 28: (1, {'@': 159}), 82: (1, {'@': 159}), 12: (1, {'@': 159})}, 186: {112: (0, 95), 101: (0, 76), 108: (0, 88), 43: (0, 43), 2: (0, 2), 25: (0, 97), 3: (0, 139), 44: (0, 99), 105: (0, 83), 110: (0, 293), 103: (0, 81), 111: (0, 92), 104: (0, 82), 22: (0, 142)}, 187: {112: (0, 95), 101: (0, 76), 108: (0, 88), 43: (0, 43), 2: (0, 2), 25: (0, 97), 110: (0, 294), 3: (0, 139), 44: (0, 99), 105: (0, 83), 103: (0, 81), 111: (0, 92), 104: (0, 82), 22: (0, 142)}, 188: {112: (0, 95), 101: (0, 76), 108: (0, 88), 43: (0, 43), 2: (0, 2), 25: (0, 97), 3: (0, 139), 110: (0, 295), 44: (0, 99), 105: (0, 83), 103: (0, 81), 111: (0, 92), 104: (0, 82), 22: (0, 142)}, 189: {112: (0, 95), 101: (0, 76), 108: (0, 88), 43: (0, 43), 2: (0, 2), 25: (0, 97), 3: (0, 139), 44: (0, 99), 105: (0, 83), 103: (0, 81), 111: (0, 92), 104: (0, 82), 110: (0, 296), 22: (0, 142)}, 190: {112: (0, 95), 101: (0, 76), 108: (0, 88), 43: (0, 43), 2: (0, 2), 25: (0, 97), 3: (0, 139), 44: (0, 99), 110: (0, 297), 105: (0, 83), 103: (0, 81), 111: (0, 92), 104: (0, 82), 22: (0, 142)}, 191: {110: (0, 298), 112: (0, 95), 101: (0, 76), 108: (0, 88), 43: (0, 43), 2: (0, 2), 25: (0, 97), 3: (0, 139), 44: (0, 99), 105: (0, 83), 103: (0, 81), 111: (0, 92), 104: (0, 82), 22: (0, 142)}, 192: {32: (1, {'@': 160}), 55: (1, {'@': 160}), 56: (1, {'@': 160}), 48: (1, {'@': 160}), 58: (1, {'@': 160}), 59: (1, {'@': 160}), 75: (1, {'@': 160}), 76: (1, {'@': 160}), 61: (1, {'@': 160}), 29: (1, {'@': 160}), 62: (1, {'@': 160}), 63: (1, {'@': 160}), 64: (1, {'@': 160}), 77: (1, {'@': 160}), 0: (1, {'@': 160}), 79: (1, {'@': 160}), 80: (1, {'@': 160}), 67: (1, {'@': 160}), 82: (1, {'@': 160}), 12: (1, {'@': 160}), 70: (1, {'@': 160}), 44: (0, 299)}, 193: {101: (0, 76), 43: (0, 43), 25: (0, 97), 2: (0, 2), 12: (0, 12), 111: (0, 300), 14: (0, 301), 3: (0, 197), 103: (0, 81), 105: (0, 83), 104: (0, 82), 22: (0, 142), 44: (0, 99)}, 194: {53: (1, {'@': 161}), 54: (1, {'@': 161}), 15: (1, {'@': 161}), 55: (1, {'@': 161}), 38: (1, {'@': 161}), 57: (1, {'@': 161}), 58: (1, {'@': 161}), 21: (1, {'@': 161}), 59: (1, {'@': 161}), 60: (1, {'@': 161}), 61: (1, {'@': 161}), 29: (1, {'@': 161}), 62: (1, {'@': 161}), 63: (1, {'@': 161}), 47: (1, {'@': 161}), 34: (1, {'@': 161}), 20: (1, {'@': 161}), 65: (1, {'@': 161}), 66: (1, {'@': 161}), 22: (1, {'@': 161}), 69: (1, {'@': 161}), 70: (1, {'@': 161}), 32: (1, {'@': 161}), 71: (1, {'@': 161}), 44: (1, {'@': 161}), 2: (1, {'@': 161}), 72: (1, {'@': 161}), 48: (1, {'@': 161}), 43: (1, {'@': 161}), 33: (1, {'@': 161}), 74: (1, {'@': 161}), 75: (1, {'@': 161}), 31: (1, {'@': 161}), 36: (1, {'@': 161}), 77: (1, {'@': 161}), 78: (1, {'@': 161}), 80: (1, {'@': 161}), 50: (1, {'@': 161}), 81: (1, {'@': 161}), 49: (1, {'@': 161}), 28: (1, {'@': 161}), 82: (1, {'@': 161}), 12: (1, {'@': 161})}, 195: {62: (1, {'@': 162}), 77: (1, {'@': 162}), 56: (1, {'@': 162}), 0: (1, {'@': 162}), 76: (0, 184), 12: (1, {'@': 162}), 64: (1, {'@': 162})}, 196: {32: (1, {'@': 163}), 55: (1, {'@': 163}), 56: (1, {'@': 163}), 44: (1, {'@': 163}), 72: (1, {'@': 163}), 48: (1, {'@': 163}), 58: (1, {'@': 163}), 59: (1, {'@': 163}), 75: (1, {'@': 163}), 76: (1, {'@': 163}), 61: (1, {'@': 163}), 29: (1, {'@': 163}), 62: (1, {'@': 163}), 63: (1, {'@': 163}), 64: (1, {'@': 163}), 77: (1, {'@': 163}), 0: (1, {'@': 163}), 78: (1, {'@': 163}), 79: (1, {'@': 163}), 80: (1, {'@': 163}), 81: (1, {'@': 163}), 67: (1, {'@': 163}), 82: (1, {'@': 163}), 83: (0, 175), 12: (1, {'@': 163}), 70: (1, {'@': 163})}, 197: {32: (1, {'@': 117}), 55: (1, {'@': 117}), 56: (1, {'@': 117}), 44: (1, {'@': 117}), 72: (1, {'@': 117}), 48: (1, {'@': 117}), 58: (1, {'@': 117}), 59: (1, {'@': 117}), 75: (1, {'@': 117}), 76: (1, {'@': 117}), 61: (1, {'@': 117}), 29: (1, {'@': 117}), 62: (1, {'@': 117}), 63: (1, {'@': 117}), 64: (1, {'@': 117}), 77: (1, {'@': 117}), 0: (1, {'@': 117}), 78: (1, {'@': 117}), 79: (1, {'@': 117}), 80: (1, {'@': 117}), 81: (1, {'@': 117}), 67: (1, {'@': 117}), 82: (1, {'@': 117}), 83: (1, {'@': 117}), 12: (1, {'@': 117}), 70: (1, {'@': 117}), 22: (0, 240)}, 198: {15: (0, 15), 43: (0, 43), 2: (0, 2), 17: (0, 17), 18: (0, 18), 20: (0, 20), 19: (0, 302), 22: (0, 22), 36: (0, 36), 23: (0, 23), 25: (0, 25), 26: (0, 26), 14: (0, 303), 46: (0, 46), 30: (0, 30), 3: (0, 48), 12: (0, 12), 33: (0, 33), 38: (0, 38), 52: (0, 53)}, 199: {54: (1, {'@': 164}), 32: (1, {'@': 164}), 15: (1, {'@': 164}), 55: (1, {'@': 164}), 38: (1, {'@': 164}), 71: (1, {'@': 164}), 44: (1, {'@': 164}), 2: (1, {'@': 164}), 72: (1, {'@': 164}), 57: (1, {'@': 164}), 48: (1, {'@': 164}), 43: (1, {'@': 164}), 33: (1, {'@': 164}), 74: (1, {'@': 164}), 58: (1, {'@': 164}), 21: (1, {'@': 164}), 59: (1, {'@': 164}), 75: (1, {'@': 164}), 31: (1, {'@': 164}), 36: (1, {'@': 164}), 61: (1, {'@': 164}), 29: (1, {'@': 164}), 62: (1, {'@': 164}), 63: (1, {'@': 164}), 47: (1, {'@': 164}), 34: (1, {'@': 164}), 77: (1, {'@': 164}), 20: (1, {'@': 164}), 78: (1, {'@': 164}), 80: (1, {'@': 164}), 50: (1, {'@': 164}), 66: (1, {'@': 164}), 81: (1, {'@': 164}), 65: (1, {'@': 164}), 49: (1, {'@': 164}), 28: (1, {'@': 164}), 82: (1, {'@': 164}), 12: (1, {'@': 164}), 22: (1, {'@': 164}), 70: (1, {'@': 164})}, 200: {15: (0, 15), 43: (0, 43), 2: (0, 2), 17: (0, 17), 18: (0, 18), 20: (0, 20), 22: (0, 22), 36: (0, 36), 23: (0, 23), 25: (0, 25), 26: (0, 26), 46: (0, 46), 30: (0, 30), 3: (0, 48), 19: (0, 304), 12: (0, 74), 33: (0, 33), 38: (0, 38), 52: (0, 53)}, 201: {15: (0, 15), 16: (0, 16), 17: (0, 17), 18: (0, 18), 20: (0, 20), 14: (0, 305), 21: (0, 21), 22: (0, 22), 23: (0, 23), 24: (0, 24), 25: (0, 25), 26: (0, 26), 27: (0, 27), 28: (0, 28), 29: (0, 29), 19: (0, 19), 30: (0, 30), 31: (0, 31), 32: (0, 32), 12: (0, 12), 33: (0, 33), 34: (0, 34), 35: (0, 35), 36: (0, 36), 45: (0, 306), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40), 41: (0, 41), 42: (0, 42), 43: (0, 43), 2: (0, 2), 52: (0, 53), 44: (0, 44), 46: (0, 46), 47: (0, 47), 3: (0, 48), 48: (0, 49), 49: (0, 50), 50: (0, 51), 51: (0, 52)}, 202: {15: (0, 15), 18: (0, 307), 12: (0, 12), 14: (0, 308)}, 203: {14: (0, 309), 12: (0, 12), 77: (0, 310)}, 204: {53: (1, {'@': 165}), 54: (1, {'@': 165}), 15: (1, {'@': 165}), 55: (1, {'@': 165}), 38: (1, {'@': 165}), 57: (1, {'@': 165}), 58: (1, {'@': 165}), 21: (1, {'@': 165}), 59: (1, {'@': 165}), 60: (1, {'@': 165}), 61: (1, {'@': 165}), 29: (1, {'@': 165}), 62: (1, {'@': 165}), 63: (1, {'@': 165}), 47: (1, {'@': 165}), 34: (1, {'@': 165}), 20: (1, {'@': 165}), 65: (1, {'@': 165}), 66: (1, {'@': 165}), 69: (1, {'@': 165}), 22: (1, {'@': 165}), 70: (1, {'@': 165}), 32: (1, {'@': 165}), 71: (1, {'@': 165}), 44: (1, {'@': 165}), 2: (1, {'@': 165}), 72: (1, {'@': 165}), 48: (1, {'@': 165}), 43: (1, {'@': 165}), 33: (1, {'@': 165}), 74: (1, {'@': 165}), 75: (1, {'@': 165}), 31: (1, {'@': 165}), 36: (1, {'@': 165}), 77: (1, {'@': 165}), 78: (1, {'@': 165}), 80: (1, {'@': 165}), 50: (1, {'@': 165}), 81: (1, {'@': 165}), 49: (1, {'@': 165}), 28: (1, {'@': 165}), 82: (1, {'@': 165}), 12: (1, {'@': 165})}, 205: {63: (0, 311), 77: (0, 312)}, 206: {47: (1, {'@': 166}), 32: (1, {'@': 166}), 15: (1, {'@': 166}), 34: (1, {'@': 166}), 38: (1, {'@': 166}), 77: (1, {'@': 166}), 20: (1, {'@': 166}), 44: (1, {'@': 166}), 2: (1, {'@': 166}), 48: (1, {'@': 166}), 50: (1, {'@': 166}), 43: (1, {'@': 166}), 33: (1, {'@': 166}), 49: (1, {'@': 166}), 21: (1, {'@': 166}), 28: (1, {'@': 166}), 31: (1, {'@': 166}), 36: (1, {'@': 166}), 22: (1, {'@': 166}), 29: (1, {'@': 166})}, 207: {77: (0, 313), 12: (0, 74)}, 208: {53: (1, {'@': 167}), 54: (1, {'@': 167}), 15: (1, {'@': 167}), 55: (1, {'@': 167}), 38: (1, {'@': 167}), 57: (1, {'@': 167}), 58: (1, {'@': 167}), 21: (1, {'@': 167}), 59: (1, {'@': 167}), 60: (1, {'@': 167}), 61: (1, {'@': 167}), 29: (1, {'@': 167}), 62: (1, {'@': 167}), 63: (1, {'@': 167}), 47: (1, {'@': 167}), 34: (1, {'@': 167}), 20: (1, {'@': 167}), 65: (1, {'@': 167}), 66: (1, {'@': 167}), 69: (1, {'@': 167}), 22: (1, {'@': 167}), 70: (1, {'@': 167}), 32: (1, {'@': 167}), 71: (1, {'@': 167}), 44: (1, {'@': 167}), 2: (1, {'@': 167}), 72: (1, {'@': 167}), 48: (1, {'@': 167}), 43: (1, {'@': 167}), 33: (1, {'@': 167}), 74: (1, {'@': 167}), 75: (1, {'@': 167}), 31: (1, {'@': 167}), 36: (1, {'@': 167}), 77: (1, {'@': 167}), 78: (1, {'@': 167}), 80: (1, {'@': 167}), 50: (1, {'@': 167}), 81: (1, {'@': 167}), 49: (1, {'@': 167}), 28: (1, {'@': 167}), 82: (1, {'@': 167}), 12: (1, {'@': 167})}, 209: {15: (0, 15), 43: (0, 43), 2: (0, 2), 17: (0, 17), 12: (0, 74), 26: (0, 26), 18: (0, 18), 33: (0, 33), 20: (0, 20), 22: (0, 22), 23: (0, 314), 36: (0, 36), 25: (0, 25), 46: (0, 46), 30: (0, 30), 38: (0, 38), 52: (0, 53), 3: (0, 48)}, 210: {53: (1, {'@': 168}), 54: (1, {'@': 168}), 32: (1, {'@': 168}), 15: (1, {'@': 168}), 55: (1, {'@': 168}), 38: (1, {'@': 168}), 71: (1, {'@': 168}), 44: (1, {'@': 168}), 2: (1, {'@': 168}), 72: (1, {'@': 168}), 57: (1, {'@': 168}), 48: (1, {'@': 168}), 43: (1, {'@': 168}), 33: (1, {'@': 168}), 74: (1, {'@': 168}), 58: (1, {'@': 168}), 21: (1, {'@': 168}), 59: (1, {'@': 168}), 75: (1, {'@': 168}), 31: (1, {'@': 168}), 36: (1, {'@': 168}), 61: (1, {'@': 168}), 29: (1, {'@': 168}), 62: (1, {'@': 168}), 63: (1, {'@': 168}), 47: (1, {'@': 168}), 34: (1, {'@': 168}), 77: (1, {'@': 168}), 20: (1, {'@': 168}), 78: (1, {'@': 168}), 80: (1, {'@': 168}), 50: (1, {'@': 168}), 81: (1, {'@': 168}), 66: (1, {'@': 168}), 65: (1, {'@': 168}), 49: (1, {'@': 168}), 28: (1, {'@': 168}), 82: (1, {'@': 168}), 12: (1, {'@': 168}), 22: (1, {'@': 168}), 70: (1, {'@': 168})}, 211: {15: (0, 15), 43: (0, 43), 2: (0, 2), 17: (0, 17), 18: (0, 18), 20: (0, 20), 22: (0, 22), 36: (0, 36), 23: (0, 315), 25: (0, 25), 26: (0, 26), 46: (0, 46), 30: (0, 30), 3: (0, 48), 12: (0, 12), 33: (0, 33), 14: (0, 316), 38: (0, 38), 52: (0, 53)}, 212: {53: (1, {'@': 169}), 54: (1, {'@': 169}), 32: (1, {'@': 169}), 15: (0, 15), 55: (1, {'@': 169}), 38: (0, 38), 71: (1, {'@': 169}), 44: (1, {'@': 169}), 2: (0, 2), 72: (1, {'@': 169}), 57: (1, {'@': 169}), 48: (1, {'@': 169}), 43: (0, 43), 33: (0, 33), 74: (1, {'@': 169}), 58: (1, {'@': 169}), 21: (1, {'@': 169}), 59: (1, {'@': 169}), 75: (1, {'@': 169}), 31: (1, {'@': 169}), 36: (0, 36), 61: (1, {'@': 169}), 29: (1, {'@': 169}), 62: (1, {'@': 169}), 63: (1, {'@': 169}), 47: (1, {'@': 169}), 34: (1, {'@': 169}), 77: (1, {'@': 169}), 20: (0, 20), 78: (1, {'@': 169}), 80: (1, {'@': 169}), 50: (1, {'@': 169}), 81: (1, {'@': 169}), 66: (1, {'@': 169}), 65: (1, {'@': 169}), 49: (1, {'@': 169}), 28: (1, {'@': 169}), 82: (1, {'@': 169}), 12: (1, {'@': 169}), 22: (0, 22), 70: (1, {'@': 169}), 52: (0, 111), 17: (0, 17), 18: (0, 18), 25: (0, 25), 46: (0, 46), 30: (0, 30), 3: (0, 48)}, 213: {54: (1, {'@': 170}), 32: (1, {'@': 170}), 15: (1, {'@': 170}), 38: (1, {'@': 170}), 71: (1, {'@': 170}), 44: (1, {'@': 170}), 2: (1, {'@': 170}), 57: (1, {'@': 170}), 48: (1, {'@': 170}), 43: (1, {'@': 170}), 33: (1, {'@': 170}), 74: (1, {'@': 170}), 58: (1, {'@': 170}), 21: (1, {'@': 170}), 31: (1, {'@': 170}), 36: (1, {'@': 170}), 61: (1, {'@': 170}), 29: (1, {'@': 170}), 62: (1, {'@': 170}), 63: (1, {'@': 170}), 47: (1, {'@': 170}), 34: (1, {'@': 170}), 77: (1, {'@': 170}), 20: (1, {'@': 170}), 50: (1, {'@': 170}), 66: (1, {'@': 170}), 65: (1, {'@': 170}), 49: (1, {'@': 170}), 28: (1, {'@': 170}), 12: (1, {'@': 170}), 22: (1, {'@': 170})}, 214: {54: (1, {'@': 171}), 32: (1, {'@': 171}), 15: (1, {'@': 171}), 38: (1, {'@': 171}), 71: (1, {'@': 171}), 44: (1, {'@': 171}), 2: (1, {'@': 171}), 57: (1, {'@': 171}), 48: (1, {'@': 171}), 43: (1, {'@': 171}), 33: (1, {'@': 171}), 74: (1, {'@': 171}), 58: (1, {'@': 171}), 21: (1, {'@': 171}), 31: (1, {'@': 171}), 36: (1, {'@': 171}), 61: (1, {'@': 171}), 29: (1, {'@': 171}), 62: (1, {'@': 171}), 63: (1, {'@': 171}), 47: (1, {'@': 171}), 34: (1, {'@': 171}), 77: (1, {'@': 171}), 20: (1, {'@': 171}), 50: (1, {'@': 171}), 66: (1, {'@': 171}), 65: (1, {'@': 171}), 49: (1, {'@': 171}), 28: (1, {'@': 171}), 12: (1, {'@': 171}), 22: (1, {'@': 171})}, 215: {54: (1, {'@': 172}), 32: (1, {'@': 172}), 15: (1, {'@': 172}), 38: (1, {'@': 172}), 71: (1, {'@': 172}), 44: (1, {'@': 172}), 2: (1, {'@': 172}), 57: (1, {'@': 172}), 48: (1, {'@': 172}), 43: (1, {'@': 172}), 33: (1, {'@': 172}), 74: (1, {'@': 172}), 58: (1, {'@': 172}), 21: (1, {'@': 172}), 31: (1, {'@': 172}), 36: (1, {'@': 172}), 61: (1, {'@': 172}), 29: (1, {'@': 172}), 62: (1, {'@': 172}), 63: (1, {'@': 172}), 47: (1, {'@': 172}), 34: (1, {'@': 172}), 77: (1, {'@': 172}), 20: (1, {'@': 172}), 50: (1, {'@': 172}), 66: (1, {'@': 172}), 65: (1, {'@': 172}), 49: (1, {'@': 172}), 28: (1, {'@': 172}), 12: (1, {'@': 172}), 22: (1, {'@': 172})}, 216: {54: (1, {'@': 173}), 32: (1, {'@': 173}), 15: (1, {'@': 173}), 38: (1, {'@': 173}), 71: (1, {'@': 173}), 44: (1, {'@': 173}), 2: (1, {'@': 173}), 57: (1, {'@': 173}), 48: (1, {'@': 173}), 43: (1, {'@': 173}), 33: (1, {'@': 173}), 74: (1, {'@': 173}), 58: (1, {'@': 173}), 21: (1, {'@': 173}), 31: (1, {'@': 173}), 36: (1, {'@': 173}), 61: (1, {'@': 173}), 29: (1, {'@': 173}), 62: (1, {'@': 173}), 63: (1, {'@': 173}), 47: (1, {'@': 173}), 34: (1, {'@': 173}), 77: (1, {'@': 173}), 20: (1, {'@': 173}), 50: (1, {'@': 173}), 66: (1, {'@': 173}), 65: (1, {'@': 173}), 49: (1, {'@': 173}), 28: (1, {'@': 173}), 12: (1, {'@': 173}), 22: (1, {'@': 173})}, 217: {54: (1, {'@': 174}), 32: (1, {'@': 174}), 15: (1, {'@': 174}), 38: (1, {'@': 174}), 71: (1, {'@': 174}), 44: (1, {'@': 174}), 2: (1, {'@': 174}), 57: (1, {'@': 174}), 48: (1, {'@': 174}), 43: (1, {'@': 174}), 33: (1, {'@': 174}), 74: (1, {'@': 174}), 58: (1, {'@': 174}), 21: (1, {'@': 174}), 31: (1, {'@': 174}), 36: (1, {'@': 174}), 61: (1, {'@': 174}), 29: (1, {'@': 174}), 62: (1, {'@': 174}), 63: (1, {'@': 174}), 47: (1, {'@': 174}), 34: (1, {'@': 174}), 77: (1, {'@': 174}), 20: (1, {'@': 174}), 50: (1, {'@': 174}), 66: (1, {'@': 174}), 65: (1, {'@': 174}), 49: (1, {'@': 174}), 28: (1, {'@': 174}), 12: (1, {'@': 174}), 22: (1, {'@': 174})}, 218: {54: (1, {'@': 175}), 32: (1, {'@': 175}), 15: (1, {'@': 175}), 38: (1, {'@': 175}), 71: (1, {'@': 175}), 44: (1, {'@': 175}), 2: (1, {'@': 175}), 57: (1, {'@': 175}), 48: (1, {'@': 175}), 43: (1, {'@': 175}), 33: (1, {'@': 175}), 74: (1, {'@': 175}), 58: (1, {'@': 175}), 21: (1, {'@': 175}), 31: (1, {'@': 175}), 36: (1, {'@': 175}), 61: (1, {'@': 175}), 29: (1, {'@': 175}), 62: (1, {'@': 175}), 63: (1, {'@': 175}), 47: (1, {'@': 175}), 34: (1, {'@': 175}), 77: (1, {'@': 175}), 20: (1, {'@': 175}), 50: (1, {'@': 175}), 66: (1, {'@': 175}), 65: (1, {'@': 175}), 49: (1, {'@': 175}), 28: (1, {'@': 175}), 12: (1, {'@': 175}), 22: (1, {'@': 175})}, 219: {15: (0, 15), 16: (0, 16), 17: (0, 17), 18: (0, 18), 20: (0, 20), 21: (0, 21), 22: (0, 22), 23: (0, 23), 24: (0, 24), 25: (0, 25), 26: (0, 26), 27: (0, 27), 28: (0, 28), 29: (0, 29), 19: (0, 19), 30: (0, 30), 31: (0, 31), 32: (0, 32), 12: (0, 12), 33: (0, 33), 34: (0, 34), 35: (0, 35), 36: (0, 36), 14: (0, 317), 45: (0, 318), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40), 41: (0, 41), 42: (0, 42), 43: (0, 43), 2: (0, 2), 52: (0, 53), 44: (0, 44), 46: (0, 46), 47: (0, 47), 3: (0, 48), 48: (0, 49), 49: (0, 50), 50: (0, 51), 51: (0, 52)}, 220: {32: (0, 32), 15: (0, 15), 38: (0, 38), 71: (1, {'@': 176}), 44: (0, 44), 2: (0, 2), 57: (1, {'@': 176}), 48: (0, 49), 43: (0, 43), 33: (0, 33), 74: (1, {'@': 176}), 58: (1, {'@': 176}), 21: (0, 21), 31: (0, 31), 36: (0, 36), 61: (1, {'@': 176}), 29: (0, 29), 62: (1, {'@': 176}), 63: (1, {'@': 176}), 47: (0, 47), 34: (0, 34), 77: (1, {'@': 176}), 20: (0, 20), 50: (0, 51), 66: (1, {'@': 176}), 65: (1, {'@': 176}), 49: (0, 50), 28: (0, 28), 12: (1, {'@': 176}), 22: (0, 22), 16: (0, 16), 17: (0, 17), 18: (0, 18), 23: (0, 23), 24: (0, 24), 25: (0, 25), 26: (0, 26), 27: (0, 27), 45: (0, 222), 19: (0, 19), 30: (0, 30), 35: (0, 35), 37: (0, 37), 39: (0, 39), 40: (0, 40), 41: (0, 41), 42: (0, 42), 52: (0, 53), 46: (0, 46), 3: (0, 48), 51: (0, 52)}, 221: {32: (1, {'@': 177}), 15: (1, {'@': 177}), 38: (1, {'@': 177}), 71: (1, {'@': 177}), 44: (1, {'@': 177}), 2: (1, {'@': 177}), 57: (1, {'@': 177}), 48: (1, {'@': 177}), 43: (1, {'@': 177}), 33: (1, {'@': 177}), 74: (1, {'@': 177}), 58: (1, {'@': 177}), 21: (1, {'@': 177}), 31: (1, {'@': 177}), 36: (1, {'@': 177}), 61: (1, {'@': 177}), 29: (1, {'@': 177}), 62: (1, {'@': 177}), 63: (1, {'@': 177}), 47: (1, {'@': 177}), 34: (1, {'@': 177}), 77: (1, {'@': 177}), 20: (1, {'@': 177}), 50: (1, {'@': 177}), 66: (1, {'@': 177}), 65: (1, {'@': 177}), 49: (1, {'@': 177}), 28: (1, {'@': 177}), 12: (0, 74), 22: (1, {'@': 177})}, 222: {32: (1, {'@': 178}), 15: (1, {'@': 178}), 38: (1, {'@': 178}), 71: (1, {'@': 178}), 44: (1, {'@': 178}), 2: (1, {'@': 178}), 57: (1, {'@': 178}), 48: (1, {'@': 178}), 43: (1, {'@': 178}), 33: (1, {'@': 178}), 74: (1, {'@': 178}), 58: (1, {'@': 178}), 21: (1, {'@': 178}), 31: (1, {'@': 178}), 36: (1, {'@': 178}), 61: (1, {'@': 178}), 29: (1, {'@': 178}), 62: (1, {'@': 178}), 63: (1, {'@': 178}), 47: (1, {'@': 178}), 34: (1, {'@': 178}), 77: (1, {'@': 178}), 20: (1, {'@': 178}), 50: (1, {'@': 178}), 66: (1, {'@': 178}), 65: (1, {'@': 178}), 49: (1, {'@': 178}), 28: (1, {'@': 178}), 12: (0, 12), 22: (1, {'@': 178}), 14: (0, 319)}, 223: {135: (0, 320), 71: (0, 321), 12: (0, 12), 14: (0, 322), 136: (0, 323)}, 224: {54: (1, {'@': 179}), 32: (1, {'@': 179}), 15: (1, {'@': 179}), 38: (1, {'@': 179}), 71: (1, {'@': 179}), 44: (1, {'@': 179}), 2: (1, {'@': 179}), 57: (1, {'@': 179}), 48: (1, {'@': 179}), 43: (1, {'@': 179}), 33: (1, {'@': 179}), 74: (1, {'@': 179}), 58: (1, {'@': 179}), 21: (1, {'@': 179}), 31: (1, {'@': 179}), 36: (1, {'@': 179}), 61: (1, {'@': 179}), 29: (1, {'@': 179}), 62: (1, {'@': 179}), 63: (1, {'@': 179}), 47: (1, {'@': 179}), 34: (1, {'@': 179}), 77: (1, {'@': 179}), 20: (1, {'@': 179}), 50: (1, {'@': 179}), 66: (1, {'@': 179}), 65: (1, {'@': 179}), 49: (1, {'@': 179}), 28: (1, {'@': 179}), 12: (1, {'@': 179}), 22: (1, {'@': 179})}, 225: {58: (0, 324), 63: (0, 325)}, 226: {53: (1, {'@': 180}), 54: (1, {'@': 180}), 15: (1, {'@': 180}), 55: (1, {'@': 180}), 38: (1, {'@': 180}), 57: (1, {'@': 180}), 58: (1, {'@': 180}), 21: (1, {'@': 180}), 59: (1, {'@': 180}), 60: (1, {'@': 180}), 61: (1, {'@': 180}), 29: (1, {'@': 180}), 62: (1, {'@': 180}), 63: (1, {'@': 180}), 47: (1, {'@': 180}), 34: (1, {'@': 180}), 20: (1, {'@': 180}), 65: (1, {'@': 180}), 66: (1, {'@': 180}), 69: (1, {'@': 180}), 22: (1, {'@': 180}), 70: (1, {'@': 180}), 32: (1, {'@': 180}), 71: (1, {'@': 180}), 44: (1, {'@': 180}), 2: (1, {'@': 180}), 72: (1, {'@': 180}), 48: (1, {'@': 180}), 43: (1, {'@': 180}), 33: (1, {'@': 180}), 74: (1, {'@': 180}), 75: (1, {'@': 180}), 31: (1, {'@': 180}), 36: (1, {'@': 180}), 77: (1, {'@': 180}), 78: (1, {'@': 180}), 80: (1, {'@': 180}), 50: (1, {'@': 180}), 81: (1, {'@': 180}), 49: (1, {'@': 180}), 28: (1, {'@': 180}), 82: (1, {'@': 180}), 12: (1, {'@': 180})}, 227: {61: (0, 326)}, 228: {15: (0, 15), 16: (0, 16), 17: (0, 17), 18: (0, 18), 19: (0, 19), 20: (0, 20), 21: (0, 21), 22: (0, 22), 23: (0, 23), 24: (0, 24), 25: (0, 25), 26: (0, 26), 27: (0, 27), 28: (0, 28), 29: (0, 29), 30: (0, 30), 31: (0, 31), 32: (0, 32), 33: (0, 33), 34: (0, 34), 35: (0, 35), 36: (0, 36), 37: (0, 37), 38: (0, 38), 39: (0, 39), 45: (0, 327), 40: (0, 40), 41: (0, 41), 42: (0, 42), 43: (0, 43), 2: (0, 2), 44: (0, 44), 46: (0, 46), 47: (0, 47), 3: (0, 48), 48: (0, 49), 49: (0, 50), 50: (0, 51), 51: (0, 52), 52: (0, 53)}, 229: {15: (0, 15), 43: (0, 43), 2: (0, 2), 52: (0, 53), 17: (0, 17), 14: (0, 328), 18: (0, 18), 20: (0, 20), 22: (0, 22), 36: (0, 36), 23: (0, 23), 25: (0, 25), 26: (0, 26), 46: (0, 46), 19: (0, 19), 30: (0, 30), 37: (0, 329), 3: (0, 48), 12: (0, 12), 33: (0, 33), 38: (0, 38)}, 230: {15: (0, 15), 43: (0, 43), 2: (0, 2), 52: (0, 53), 17: (0, 17), 18: (0, 18), 19: (0, 19), 20: (0, 20), 22: (0, 22), 36: (0, 36), 23: (0, 23), 25: (0, 25), 26: (0, 26), 46: (0, 46), 30: (0, 30), 3: (0, 48), 12: (0, 74), 33: (0, 33), 38: (0, 38), 37: (0, 330)}, 231: {54: (1, {'@': 181}), 32: (1, {'@': 181}), 15: (1, {'@': 181}), 55: (1, {'@': 181}), 38: (1, {'@': 181}), 71: (1, {'@': 181}), 44: (1, {'@': 181}), 2: (1, {'@': 181}), 72: (1, {'@': 181}), 57: (1, {'@': 181}), 48: (1, {'@': 181}), 43: (1, {'@': 181}), 33: (1, {'@': 181}), 74: (1, {'@': 181}), 58: (1, {'@': 181}), 21: (1, {'@': 181}), 59: (1, {'@': 181}), 75: (1, {'@': 181}), 31: (1, {'@': 181}), 36: (1, {'@': 181}), 61: (1, {'@': 181}), 29: (1, {'@': 181}), 62: (1, {'@': 181}), 63: (1, {'@': 181}), 47: (1, {'@': 181}), 34: (1, {'@': 181}), 77: (1, {'@': 181}), 20: (1, {'@': 181}), 78: (1, {'@': 181}), 80: (1, {'@': 181}), 50: (1, {'@': 181}), 66: (1, {'@': 181}), 65: (1, {'@': 181}), 49: (1, {'@': 181}), 28: (1, {'@': 181}), 82: (1, {'@': 181}), 12: (1, {'@': 181}), 22: (1, {'@': 181}), 70: (1, {'@': 181})}, 232: {15: (0, 15), 43: (0, 43), 2: (0, 2), 52: (0, 53), 17: (0, 17), 18: (0, 18), 20: (0, 20), 22: (0, 22), 36: (0, 36), 23: (0, 23), 25: (0, 25), 26: (0, 26), 46: (0, 46), 19: (0, 19), 30: (0, 30), 37: (0, 37), 39: (0, 331), 3: (0, 48), 12: (0, 12), 33: (0, 33), 14: (0, 332), 38: (0, 38)}, 233: {54: (1, {'@': 182}), 32: (1, {'@': 182}), 15: (1, {'@': 182}), 55: (1, {'@': 182}), 38: (1, {'@': 182}), 71: (1, {'@': 182}), 44: (1, {'@': 182}), 2: (1, {'@': 182}), 72: (1, {'@': 182}), 57: (1, {'@': 182}), 48: (1, {'@': 182}), 43: (1, {'@': 182}), 33: (1, {'@': 182}), 74: (1, {'@': 182}), 58: (1, {'@': 182}), 21: (1, {'@': 182}), 59: (1, {'@': 182}), 75: (1, {'@': 182}), 31: (1, {'@': 182}), 36: (1, {'@': 182}), 61: (1, {'@': 182}), 29: (1, {'@': 182}), 62: (1, {'@': 182}), 63: (1, {'@': 182}), 47: (1, {'@': 182}), 34: (1, {'@': 182}), 77: (1, {'@': 182}), 20: (1, {'@': 182}), 80: (1, {'@': 182}), 50: (1, {'@': 182}), 66: (1, {'@': 182}), 65: (1, {'@': 182}), 49: (1, {'@': 182}), 28: (1, {'@': 182}), 82: (1, {'@': 182}), 12: (1, {'@': 182}), 22: (1, {'@': 182}), 70: (1, {'@': 182})}, 234: {15: (0, 15), 43: (0, 43), 2: (0, 2), 52: (0, 53), 17: (0, 17), 18: (0, 18), 20: (0, 20), 22: (0, 22), 36: (0, 36), 23: (0, 23), 39: (0, 333), 25: (0, 25), 26: (0, 26), 46: (0, 46), 19: (0, 19), 30: (0, 30), 37: (0, 37), 3: (0, 48), 12: (0, 74), 33: (0, 33), 38: (0, 38)}, 235: {15: (0, 15), 43: (0, 43), 2: (0, 2), 52: (0, 53), 17: (0, 17), 18: (0, 18), 20: (0, 20), 22: (0, 22), 36: (0, 36), 23: (0, 23), 25: (0, 25), 26: (0, 26), 46: (0, 46), 19: (0, 19), 30: (0, 30), 41: (0, 334), 37: (0, 37), 3: (0, 48), 12: (0, 12), 33: (0, 33), 39: (0, 39), 14: (0, 335), 38: (0, 38)}, 236: {54: (1, {'@': 183}), 32: (1, {'@': 183}), 15: (1, {'@': 183}), 55: (1, {'@': 183}), 38: (1, {'@': 183}), 71: (1, {'@': 183}), 44: (1, {'@': 183}), 2: (1, {'@': 183}), 57: (1, {'@': 183}), 48: (1, {'@': 183}), 43: (1, {'@': 183}), 33: (1, {'@': 183}), 74: (1, {'@': 183}), 58: (1, {'@': 183}), 21: (1, {'@': 183}), 59: (1, {'@': 183}), 75: (1, {'@': 183}), 31: (1, {'@': 183}), 36: (1, {'@': 183}), 61: (1, {'@': 183}), 29: (1, {'@': 183}), 62: (1, {'@': 183}), 63: (1, {'@': 183}), 47: (1, {'@': 183}), 34: (1, {'@': 183}), 77: (1, {'@': 183}), 20: (1, {'@': 183}), 80: (1, {'@': 183}), 50: (1, {'@': 183}), 66: (1, {'@': 183}), 65: (1, {'@': 183}), 49: (1, {'@': 183}), 28: (1, {'@': 183}), 82: (1, {'@': 183}), 12: (1, {'@': 183}), 22: (1, {'@': 183}), 70: (1, {'@': 183})}, 237: {15: (0, 15), 43: (0, 43), 2: (0, 2), 52: (0, 53), 17: (0, 17), 18: (0, 18), 20: (0, 20), 41: (0, 336), 22: (0, 22), 36: (0, 36), 23: (0, 23), 25: (0, 25), 26: (0, 26), 46: (0, 46), 19: (0, 19), 30: (0, 30), 37: (0, 37), 3: (0, 48), 12: (0, 74), 33: (0, 33), 39: (0, 39), 38: (0, 38)}, 238: {15: (0, 15), 16: (0, 16), 17: (0, 17), 18: (0, 18), 19: (0, 19), 20: (0, 20), 21: (0, 21), 22: (0, 22), 23: (0, 23), 24: (0, 24), 25: (0, 25), 26: (0, 26), 27: (0, 27), 28: (0, 28), 29: (0, 29), 30: (0, 30), 31: (0, 31), 32: (0, 32), 12: (0, 12), 33: (0, 33), 34: (0, 34), 35: (0, 35), 36: (0, 36), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40), 41: (0, 41), 42: (0, 42), 43: (0, 43), 14: (0, 337), 2: (0, 2), 44: (0, 44), 46: (0, 46), 47: (0, 47), 3: (0, 48), 45: (0, 338), 48: (0, 49), 49: (0, 50), 50: (0, 51), 51: (0, 52), 52: (0, 53)}, 239: {54: (0, 339)}, 240: {77: (1, {'@': 112}), 112: (0, 95), 101: (0, 76), 43: (0, 43), 108: (0, 88), 2: (0, 2), 25: (0, 97), 122: (0, 340), 3: (0, 139), 44: (0, 99), 105: (0, 83), 110: (0, 140), 103: (0, 81), 111: (0, 92), 123: (0, 141), 104: (0, 82), 22: (0, 142)}, 241: {112: (0, 95), 101: (0, 76), 108: (0, 88), 43: (0, 43), 2: (0, 2), 25: (0, 97), 3: (0, 139), 123: (0, 341), 44: (0, 99), 105: (0, 83), 110: (0, 140), 103: (0, 81), 111: (0, 92), 104: (0, 82), 22: (0, 142)}, 242: {77: (1, {'@': 184}), 63: (0, 342)}, 243: {77: (0, 284)}, 244: {77: (1, {'@': 112}), 122: (0, 343), 112: (0, 95), 101: (0, 76), 43: (0, 43), 108: (0, 88), 2: (0, 2), 25: (0, 97), 3: (0, 139), 103: (0, 81), 105: (0, 83), 110: (0, 140), 111: (0, 92), 123: (0, 141), 104: (0, 82), 22: (0, 142), 44: (0, 99)}, 245: {101: (0, 76), 30: (0, 78), 99: (0, 79), 20: (0, 20), 102: (0, 80), 103: (0, 81), 104: (0, 82), 105: (0, 83), 98: (0, 84), 22: (0, 85), 106: (0, 86), 107: (0, 87), 108: (0, 88), 29: (0, 89), 12: (0, 12), 110: (0, 91), 109: (0, 344), 111: (0, 92), 33: (0, 94), 14: (0, 345), 112: (0, 95), 43: (0, 43), 49: (0, 96), 2: (0, 2), 25: (0, 97), 3: (0, 139), 97: (0, 98), 44: (0, 99), 100: (0, 100), 113: (0, 101), 38: (0, 102)}, 246: {63: (0, 346)}, 247: {63: (0, 347)}, 248: {63: (0, 348)}, 249: {77: (0, 349)}, 250: {63: (0, 350)}, 251: {63: (0, 351)}, 252: {77: (0, 352)}, 253: {63: (1, {'@': 185})}, 254: {63: (0, 353)}, 255: {63: (0, 354)}, 256: {77: (0, 355)}, 257: {63: (0, 356)}, 258: {3: (0, 357), 2: (0, 2)}, 259: {77: (1, {'@': 186}), 68: (1, {'@': 186}), 63: (1, {'@': 186}), 83: (1, {'@': 186})}, 260: {61: (1, {'@': 187}), 22: (0, 358)}, 261: {61: (1, {'@': 188}), 22: (0, 359)}, 262: {15: (0, 15), 16: (0, 16), 17: (0, 17), 18: (0, 18), 19: (0, 19), 20: (0, 20), 21: (0, 21), 22: (0, 22), 23: (0, 23), 24: (0, 24), 25: (0, 25), 26: (0, 26), 27: (0, 27), 28: (0, 28), 29: (0, 29), 30: (0, 30), 31: (0, 31), 32: (0, 32), 12: (0, 74), 33: (0, 33), 34: (0, 34), 35: (0, 35), 36: (0, 36), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40), 41: (0, 41), 42: (0, 42), 43: (0, 43), 2: (0, 2), 44: (0, 44), 46: (0, 46), 47: (0, 47), 3: (0, 48), 45: (0, 360), 48: (0, 49), 49: (0, 50), 50: (0, 51), 51: (0, 52), 52: (0, 53)}, 263: {61: (0, 361)}, 264: {104: (0, 82), 101: (0, 362), 43: (0, 43), 25: (0, 97), 2: (0, 2), 103: (0, 81), 22: (0, 142), 12: (0, 74), 44: (0, 99), 3: (0, 197)}, 265: {62: (1, {'@': 189}), 63: (1, {'@': 189}), 32: (1, {'@': 189}), 64: (1, {'@': 189}), 55: (1, {'@': 189}), 29: (1, {'@': 189}), 77: (1, {'@': 189}), 56: (1, {'@': 189}), 0: (1, {'@': 189}), 44: (1, {'@': 189}), 78: (1, {'@': 189}), 72: (1, {'@': 189}), 79: (1, {'@': 189}), 48: (1, {'@': 189}), 80: (1, {'@': 189}), 67: (1, {'@': 189}), 82: (1, {'@': 189}), 58: (1, {'@': 189}), 59: (1, {'@': 189}), 75: (1, {'@': 189}), 76: (1, {'@': 189}), 12: (1, {'@': 189}), 61: (1, {'@': 189}), 70: (1, {'@': 189})}, 266: {43: (0, 43), 25: (0, 97), 2: (0, 2), 12: (0, 12), 44: (0, 99), 3: (0, 197), 103: (0, 81), 104: (0, 82), 14: (0, 363), 101: (0, 364), 22: (0, 142)}, 267: {61: (0, 365), 58: (0, 366)}, 268: {77: (0, 367)}, 269: {137: (0, 368)}, 270: {62: (1, {'@': 190}), 77: (1, {'@': 190}), 56: (1, {'@': 190}), 0: (1, {'@': 190}), 76: (0, 184), 12: (1, {'@': 190}), 64: (1, {'@': 190})}, 271: {101: (0, 76), 30: (0, 78), 99: (0, 79), 20: (0, 20), 102: (0, 80), 103: (0, 81), 104: (0, 82), 105: (0, 83), 98: (0, 84), 22: (0, 85), 106: (0, 86), 107: (0, 87), 108: (0, 88), 29: (0, 89), 12: (0, 74), 110: (0, 91), 111: (0, 92), 33: (0, 94), 112: (0, 95), 43: (0, 43), 49: (0, 96), 2: (0, 2), 25: (0, 97), 3: (0, 139), 97: (0, 98), 109: (0, 369), 44: (0, 99), 100: (0, 100), 113: (0, 101), 38: (0, 102)}, 272: {101: (0, 76), 30: (0, 78), 99: (0, 79), 20: (0, 20), 102: (0, 80), 103: (0, 81), 104: (0, 82), 105: (0, 83), 98: (0, 84), 22: (0, 85), 106: (0, 86), 107: (0, 87), 108: (0, 88), 29: (0, 89), 12: (0, 74), 110: (0, 91), 111: (0, 92), 33: (0, 94), 109: (0, 370), 112: (0, 95), 43: (0, 43), 49: (0, 96), 2: (0, 2), 25: (0, 97), 3: (0, 139), 97: (0, 98), 44: (0, 99), 100: (0, 100), 113: (0, 101), 38: (0, 102)}, 273: {62: (1, {'@': 191}), 77: (1, {'@': 191}), 56: (1, {'@': 191}), 0: (1, {'@': 191}), 76: (0, 184), 12: (1, {'@': 191}), 64: (1, {'@': 191})}, 274: {62: (1, {'@': 192}), 77: (1, {'@': 192}), 56: (1, {'@': 192}), 0: (1, {'@': 192}), 76: (0, 184), 12: (1, {'@': 192}), 64: (1, {'@': 192})}, 275: {101: (0, 76), 30: (0, 78), 99: (0, 79), 20: (0, 20), 102: (0, 80), 103: (0, 81), 104: (0, 82), 105: (0, 83), 98: (0, 84), 22: (0, 85), 109: (0, 371), 106: (0, 86), 107: (0, 87), 108: (0, 88), 29: (0, 89), 12: (0, 74), 110: (0, 91), 111: (0, 92), 33: (0, 94), 112: (0, 95), 43: (0, 43), 49: (0, 96), 2: (0, 2), 25: (0, 97), 3: (0, 139), 97: (0, 98), 44: (0, 99), 100: (0, 100), 113: (0, 101), 38: (0, 102)}, 276: {62: (1, {'@': 193}), 77: (1, {'@': 193}), 56: (1, {'@': 193}), 0: (1, {'@': 193}), 76: (0, 184), 12: (1, {'@': 193}), 64: (1, {'@': 193})}, 277: {104: (0, 82), 43: (0, 43), 25: (0, 97), 2: (0, 2), 12: (0, 12), 103: (0, 372), 14: (0, 373), 22: (0, 142), 44: (0, 99), 3: (0, 197)}, 278: {104: (0, 82), 43: (0, 43), 103: (0, 374), 25: (0, 97), 2: (0, 2), 22: (0, 142), 12: (0, 74), 44: (0, 99), 3: (0, 197)}, 279: {32: (1, {'@': 194}), 55: (1, {'@': 194}), 56: (1, {'@': 194}), 44: (1, {'@': 194}), 72: (1, {'@': 194}), 48: (1, {'@': 194}), 58: (1, {'@': 194}), 59: (1, {'@': 194}), 75: (1, {'@': 194}), 76: (1, {'@': 194}), 61: (1, {'@': 194}), 29: (1, {'@': 194}), 62: (1, {'@': 194}), 63: (1, {'@': 194}), 64: (1, {'@': 194}), 77: (1, {'@': 194}), 0: (1, {'@': 194}), 78: (1, {'@': 194}), 79: (1, {'@': 194}), 80: (1, {'@': 194}), 81: (1, {'@': 194}), 67: (1, {'@': 194}), 82: (1, {'@': 194}), 12: (1, {'@': 194}), 70: (1, {'@': 194}), 83: (0, 175)}, 280: {32: (1, {'@': 195}), 55: (1, {'@': 195}), 56: (1, {'@': 195}), 44: (1, {'@': 195}), 72: (1, {'@': 195}), 48: (1, {'@': 195}), 58: (1, {'@': 195}), 59: (1, {'@': 195}), 75: (1, {'@': 195}), 76: (1, {'@': 195}), 61: (1, {'@': 195}), 29: (1, {'@': 195}), 62: (1, {'@': 195}), 63: (1, {'@': 195}), 64: (1, {'@': 195}), 77: (1, {'@': 195}), 0: (1, {'@': 195}), 78: (1, {'@': 195}), 79: (1, {'@': 195}), 80: (1, {'@': 195}), 81: (1, {'@': 195}), 67: (1, {'@': 195}), 82: (1, {'@': 195}), 83: (1, {'@': 195}), 12: (1, {'@': 195}), 70: (1, {'@': 195}), 22: (0, 375)}, 281: {14: (0, 376), 101: (0, 76), 43: (0, 43), 25: (0, 97), 2: (0, 2), 12: (0, 12), 44: (0, 99), 3: (0, 197), 103: (0, 81), 104: (0, 82), 105: (0, 377), 22: (0, 142)}, 282: {101: (0, 76), 43: (0, 43), 25: (0, 97), 2: (0, 2), 12: (0, 74), 44: (0, 99), 3: (0, 197), 103: (0, 81), 104: (0, 82), 22: (0, 142), 105: (0, 378)}, 283: {62: (1, {'@': 196}), 63: (1, {'@': 196}), 32: (1, {'@': 196}), 64: (1, {'@': 196}), 55: (1, {'@': 196}), 77: (1, {'@': 196}), 56: (1, {'@': 196}), 0: (1, {'@': 196}), 44: (1, {'@': 196}), 70: (1, {'@': 196}), 72: (1, {'@': 196}), 79: (1, {'@': 196}), 48: (1, {'@': 196}), 80: (1, {'@': 196}), 67: (1, {'@': 196}), 82: (1, {'@': 196}), 58: (1, {'@': 196}), 59: (1, {'@': 196}), 75: (1, {'@': 196}), 76: (1, {'@': 196}), 12: (1, {'@': 196}), 61: (1, {'@': 196}), 29: (1, {'@': 196})}, 284: {32: (1, {'@': 197}), 55: (1, {'@': 197}), 56: (1, {'@': 197}), 44: (1, {'@': 197}), 72: (1, {'@': 197}), 48: (1, {'@': 197}), 58: (1, {'@': 197}), 59: (1, {'@': 197}), 75: (1, {'@': 197}), 76: (1, {'@': 197}), 61: (1, {'@': 197}), 29: (1, {'@': 197}), 62: (1, {'@': 197}), 63: (1, {'@': 197}), 64: (1, {'@': 197}), 77: (1, {'@': 197}), 0: (1, {'@': 197}), 78: (1, {'@': 197}), 79: (1, {'@': 197}), 80: (1, {'@': 197}), 81: (1, {'@': 197}), 67: (1, {'@': 197}), 82: (1, {'@': 197}), 83: (1, {'@': 197}), 12: (1, {'@': 197}), 70: (1, {'@': 197})}, 285: {62: (1, {'@': 198}), 79: (1, {'@': 198}), 48: (1, {'@': 198}), 32: (1, {'@': 198}), 64: (1, {'@': 198}), 77: (1, {'@': 198}), 67: (1, {'@': 198}), 56: (1, {'@': 198}), 0: (1, {'@': 198}), 76: (1, {'@': 198}), 12: (1, {'@': 198}), 29: (1, {'@': 198})}, 286: {101: (0, 76), 30: (0, 78), 99: (0, 79), 20: (0, 20), 102: (0, 80), 103: (0, 81), 104: (0, 82), 105: (0, 83), 98: (0, 84), 22: (0, 85), 106: (0, 86), 107: (0, 87), 108: (0, 88), 29: (0, 89), 12: (0, 12), 110: (0, 91), 111: (0, 92), 33: (0, 94), 112: (0, 95), 43: (0, 43), 49: (0, 96), 2: (0, 2), 25: (0, 97), 3: (0, 139), 97: (0, 98), 109: (0, 379), 14: (0, 380), 44: (0, 99), 100: (0, 100), 113: (0, 101), 38: (0, 102)}, 287: {3: (0, 381), 2: (0, 2)}, 288: {3: (0, 68), 95: (0, 382), 2: (0, 2)}, 289: {101: (0, 76), 30: (0, 78), 99: (0, 79), 109: (0, 383), 20: (0, 20), 102: (0, 80), 103: (0, 81), 104: (0, 82), 105: (0, 83), 98: (0, 84), 22: (0, 85), 106: (0, 86), 107: (0, 87), 108: (0, 88), 29: (0, 89), 12: (0, 12), 110: (0, 91), 111: (0, 92), 33: (0, 94), 14: (0, 384), 112: (0, 95), 43: (0, 43), 49: (0, 96), 2: (0, 2), 25: (0, 97), 3: (0, 139), 97: (0, 98), 44: (0, 99), 100: (0, 100), 113: (0, 101), 38: (0, 102)}, 290: {101: (0, 76), 30: (0, 78), 99: (0, 79), 20: (0, 20), 102: (0, 80), 14: (0, 385), 103: (0, 81), 104: (0, 82), 105: (0, 83), 98: (0, 84), 109: (0, 386), 22: (0, 85), 106: (0, 86), 107: (0, 87), 108: (0, 88), 29: (0, 89), 12: (0, 12), 110: (0, 91), 111: (0, 92), 33: (0, 94), 112: (0, 95), 43: (0, 43), 49: (0, 96), 2: (0, 2), 25: (0, 97), 3: (0, 139), 97: (0, 98), 44: (0, 99), 100: (0, 100), 113: (0, 101), 38: (0, 102)}, 291: {62: (1, {'@': 199}), 77: (1, {'@': 199}), 56: (1, {'@': 199}), 0: (1, {'@': 199}), 76: (0, 184), 12: (1, {'@': 199}), 64: (1, {'@': 199})}, 292: {101: (0, 76), 30: (0, 78), 99: (0, 79), 20: (0, 20), 102: (0, 80), 103: (0, 81), 104: (0, 82), 105: (0, 83), 98: (0, 84), 22: (0, 85), 106: (0, 86), 107: (0, 87), 108: (0, 88), 29: (0, 89), 109: (0, 387), 12: (0, 74), 110: (0, 91), 111: (0, 92), 33: (0, 94), 112: (0, 95), 43: (0, 43), 49: (0, 96), 2: (0, 2), 25: (0, 97), 3: (0, 139), 97: (0, 98), 44: (0, 99), 100: (0, 100), 113: (0, 101), 38: (0, 102)}, 293: {62: (1, {'@': 200}), 32: (1, {'@': 200}), 64: (1, {'@': 200}), 77: (1, {'@': 200}), 56: (1, {'@': 200}), 0: (1, {'@': 200}), 79: (1, {'@': 200}), 48: (1, {'@': 200}), 67: (1, {'@': 200}), 76: (1, {'@': 200}), 12: (1, {'@': 200}), 29: (1, {'@': 200})}, 294: {62: (1, {'@': 201}), 32: (1, {'@': 201}), 64: (1, {'@': 201}), 77: (1, {'@': 201}), 56: (1, {'@': 201}), 0: (1, {'@': 201}), 79: (1, {'@': 201}), 48: (1, {'@': 201}), 67: (1, {'@': 201}), 76: (1, {'@': 201}), 12: (1, {'@': 201}), 29: (1, {'@': 201})}, 295: {62: (1, {'@': 202}), 32: (1, {'@': 202}), 64: (1, {'@': 202}), 77: (1, {'@': 202}), 56: (1, {'@': 202}), 0: (1, {'@': 202}), 79: (1, {'@': 202}), 48: (1, {'@': 202}), 67: (1, {'@': 202}), 76: (1, {'@': 202}), 12: (1, {'@': 202}), 29: (1, {'@': 202})}, 296: {62: (1, {'@': 203}), 32: (1, {'@': 203}), 64: (1, {'@': 203}), 77: (1, {'@': 203}), 56: (1, {'@': 203}), 0: (1, {'@': 203}), 79: (1, {'@': 203}), 48: (1, {'@': 203}), 67: (1, {'@': 203}), 76: (1, {'@': 203}), 12: (1, {'@': 203}), 29: (1, {'@': 203})}, 297: {62: (1, {'@': 204}), 32: (1, {'@': 204}), 64: (1, {'@': 204}), 77: (1, {'@': 204}), 56: (1, {'@': 204}), 0: (1, {'@': 204}), 79: (1, {'@': 204}), 48: (1, {'@': 204}), 67: (1, {'@': 204}), 76: (1, {'@': 204}), 12: (1, {'@': 204}), 29: (1, {'@': 204})}, 298: {62: (1, {'@': 205}), 32: (1, {'@': 205}), 64: (1, {'@': 205}), 77: (1, {'@': 205}), 56: (1, {'@': 205}), 0: (1, {'@': 205}), 79: (1, {'@': 205}), 48: (1, {'@': 205}), 67: (1, {'@': 205}), 76: (1, {'@': 205}), 12: (1, {'@': 205}), 29: (1, {'@': 205})}, 299: {101: (0, 76), 43: (0, 43), 25: (0, 97), 2: (0, 2), 12: (0, 12), 14: (0, 388), 3: (0, 197), 103: (0, 81), 105: (0, 83), 104: (0, 82), 111: (0, 389), 22: (0, 142), 44: (0, 99)}, 300: {32: (1, {'@': 206}), 55: (1, {'@': 206}), 56: (1, {'@': 206}), 44: (1, {'@': 206}), 48: (1, {'@': 206}), 58: (1, {'@': 206}), 59: (1, {'@': 206}), 75: (1, {'@': 206}), 76: (1, {'@': 206}), 61: (1, {'@': 206}), 29: (1, {'@': 206}), 62: (1, {'@': 206}), 63: (1, {'@': 206}), 64: (1, {'@': 206}), 77: (1, {'@': 206}), 0: (1, {'@': 206}), 79: (1, {'@': 206}), 80: (1, {'@': 206}), 67: (1, {'@': 206}), 82: (1, {'@': 206}), 12: (1, {'@': 206}), 70: (1, {'@': 206})}, 301: {101: (0, 76), 43: (0, 43), 25: (0, 97), 2: (0, 2), 12: (0, 74), 3: (0, 197), 103: (0, 81), 105: (0, 83), 104: (0, 82), 111: (0, 390), 22: (0, 142), 44: (0, 99)}, 302: {54: (1, {'@': 207}), 32: (1, {'@': 207}), 15: (1, {'@': 207}), 55: (1, {'@': 207}), 38: (1, {'@': 207}), 71: (1, {'@': 207}), 44: (1, {'@': 207}), 2: (1, {'@': 207}), 72: (1, {'@': 207}), 57: (1, {'@': 207}), 48: (1, {'@': 207}), 43: (1, {'@': 207}), 33: (1, {'@': 207}), 74: (1, {'@': 207}), 58: (1, {'@': 207}), 21: (1, {'@': 207}), 59: (1, {'@': 207}), 75: (1, {'@': 207}), 31: (1, {'@': 207}), 36: (1, {'@': 207}), 61: (1, {'@': 207}), 29: (1, {'@': 207}), 62: (1, {'@': 207}), 63: (1, {'@': 207}), 47: (1, {'@': 207}), 34: (1, {'@': 207}), 77: (1, {'@': 207}), 20: (1, {'@': 207}), 78: (1, {'@': 207}), 80: (1, {'@': 207}), 50: (1, {'@': 207}), 66: (1, {'@': 207}), 81: (1, {'@': 207}), 65: (1, {'@': 207}), 49: (1, {'@': 207}), 28: (1, {'@': 207}), 82: (1, {'@': 207}), 12: (1, {'@': 207}), 22: (1, {'@': 207}), 70: (1, {'@': 207})}, 303: {15: (0, 15), 43: (0, 43), 19: (0, 391), 2: (0, 2), 17: (0, 17), 18: (0, 18), 20: (0, 20), 22: (0, 22), 36: (0, 36), 23: (0, 23), 25: (0, 25), 26: (0, 26), 46: (0, 46), 30: (0, 30), 3: (0, 48), 12: (0, 74), 33: (0, 33), 38: (0, 38), 52: (0, 53)}, 304: {54: (1, {'@': 208}), 32: (1, {'@': 208}), 15: (1, {'@': 208}), 55: (1, {'@': 208}), 38: (1, {'@': 208}), 71: (1, {'@': 208}), 44: (1, {'@': 208}), 2: (1, {'@': 208}), 72: (1, {'@': 208}), 57: (1, {'@': 208}), 48: (1, {'@': 208}), 43: (1, {'@': 208}), 33: (1, {'@': 208}), 74: (1, {'@': 208}), 58: (1, {'@': 208}), 21: (1, {'@': 208}), 59: (1, {'@': 208}), 75: (1, {'@': 208}), 31: (1, {'@': 208}), 36: (1, {'@': 208}), 61: (1, {'@': 208}), 29: (1, {'@': 208}), 62: (1, {'@': 208}), 63: (1, {'@': 208}), 47: (1, {'@': 208}), 34: (1, {'@': 208}), 77: (1, {'@': 208}), 20: (1, {'@': 208}), 78: (1, {'@': 208}), 80: (1, {'@': 208}), 50: (1, {'@': 208}), 66: (1, {'@': 208}), 81: (1, {'@': 208}), 65: (1, {'@': 208}), 49: (1, {'@': 208}), 28: (1, {'@': 208}), 82: (1, {'@': 208}), 12: (1, {'@': 208}), 22: (1, {'@': 208}), 70: (1, {'@': 208})}, 305: {15: (0, 15), 16: (0, 16), 17: (0, 17), 18: (0, 18), 20: (0, 20), 21: (0, 21), 22: (0, 22), 23: (0, 23), 24: (0, 24), 25: (0, 25), 26: (0, 26), 27: (0, 27), 28: (0, 28), 29: (0, 29), 45: (0, 392), 19: (0, 19), 30: (0, 30), 31: (0, 31), 32: (0, 32), 12: (0, 74), 33: (0, 33), 34: (0, 34), 35: (0, 35), 36: (0, 36), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40), 41: (0, 41), 42: (0, 42), 43: (0, 43), 2: (0, 2), 52: (0, 53), 44: (0, 44), 46: (0, 46), 47: (0, 47), 3: (0, 48), 48: (0, 49), 49: (0, 50), 50: (0, 51), 51: (0, 52)}, 306: {12: (0, 12), 14: (0, 393), 57: (0, 394)}, 307: {14: (0, 395), 57: (0, 396), 12: (0, 12)}, 308: {18: (0, 397), 15: (0, 15), 12: (0, 74)}, 309: {77: (0, 398), 12: (0, 74)}, 310: {53: (1, {'@': 209}), 54: (1, {'@': 209}), 15: (1, {'@': 209}), 55: (1, {'@': 209}), 38: (1, {'@': 209}), 57: (1, {'@': 209}), 58: (1, {'@': 209}), 21: (1, {'@': 209}), 59: (1, {'@': 209}), 60: (1, {'@': 209}), 61: (1, {'@': 209}), 29: (1, {'@': 209}), 62: (1, {'@': 209}), 63: (1, {'@': 209}), 47: (1, {'@': 209}), 34: (1, {'@': 209}), 20: (1, {'@': 209}), 65: (1, {'@': 209}), 66: (1, {'@': 209}), 69: (1, {'@': 209}), 22: (1, {'@': 209}), 70: (1, {'@': 209}), 32: (1, {'@': 209}), 71: (1, {'@': 209}), 44: (1, {'@': 209}), 2: (1, {'@': 209}), 72: (1, {'@': 209}), 48: (1, {'@': 209}), 43: (1, {'@': 209}), 33: (1, {'@': 209}), 74: (1, {'@': 209}), 75: (1, {'@': 209}), 31: (1, {'@': 209}), 36: (1, {'@': 209}), 77: (1, {'@': 209}), 78: (1, {'@': 209}), 80: (1, {'@': 209}), 50: (1, {'@': 209}), 81: (1, {'@': 209}), 49: (1, {'@': 209}), 28: (1, {'@': 209}), 82: (1, {'@': 209}), 12: (1, {'@': 209})}, 311: {47: (1, {'@': 210}), 32: (1, {'@': 210}), 15: (1, {'@': 210}), 34: (1, {'@': 210}), 38: (1, {'@': 210}), 77: (1, {'@': 210}), 20: (1, {'@': 210}), 44: (1, {'@': 210}), 2: (1, {'@': 210}), 48: (1, {'@': 210}), 50: (1, {'@': 210}), 43: (1, {'@': 210}), 33: (1, {'@': 210}), 49: (1, {'@': 210}), 21: (1, {'@': 210}), 28: (1, {'@': 210}), 31: (1, {'@': 210}), 36: (1, {'@': 210}), 22: (1, {'@': 210}), 29: (1, {'@': 210})}, 312: {53: (1, {'@': 211}), 54: (1, {'@': 211}), 15: (1, {'@': 211}), 55: (1, {'@': 211}), 38: (1, {'@': 211}), 57: (1, {'@': 211}), 58: (1, {'@': 211}), 21: (1, {'@': 211}), 59: (1, {'@': 211}), 60: (1, {'@': 211}), 61: (1, {'@': 211}), 29: (1, {'@': 211}), 62: (1, {'@': 211}), 63: (1, {'@': 211}), 47: (1, {'@': 211}), 34: (1, {'@': 211}), 20: (1, {'@': 211}), 65: (1, {'@': 211}), 66: (1, {'@': 211}), 69: (1, {'@': 211}), 22: (1, {'@': 211}), 70: (1, {'@': 211}), 32: (1, {'@': 211}), 71: (1, {'@': 211}), 44: (1, {'@': 211}), 2: (1, {'@': 211}), 72: (1, {'@': 211}), 48: (1, {'@': 211}), 43: (1, {'@': 211}), 33: (1, {'@': 211}), 74: (1, {'@': 211}), 75: (1, {'@': 211}), 31: (1, {'@': 211}), 36: (1, {'@': 211}), 77: (1, {'@': 211}), 78: (1, {'@': 211}), 80: (1, {'@': 211}), 50: (1, {'@': 211}), 81: (1, {'@': 211}), 49: (1, {'@': 211}), 28: (1, {'@': 211}), 82: (1, {'@': 211}), 12: (1, {'@': 211})}, 313: {53: (1, {'@': 212}), 54: (1, {'@': 212}), 15: (1, {'@': 212}), 55: (1, {'@': 212}), 38: (1, {'@': 212}), 57: (1, {'@': 212}), 58: (1, {'@': 212}), 21: (1, {'@': 212}), 59: (1, {'@': 212}), 60: (1, {'@': 212}), 61: (1, {'@': 212}), 29: (1, {'@': 212}), 62: (1, {'@': 212}), 63: (1, {'@': 212}), 47: (1, {'@': 212}), 34: (1, {'@': 212}), 20: (1, {'@': 212}), 65: (1, {'@': 212}), 66: (1, {'@': 212}), 69: (1, {'@': 212}), 22: (1, {'@': 212}), 70: (1, {'@': 212}), 32: (1, {'@': 212}), 71: (1, {'@': 212}), 44: (1, {'@': 212}), 2: (1, {'@': 212}), 72: (1, {'@': 212}), 48: (1, {'@': 212}), 43: (1, {'@': 212}), 33: (1, {'@': 212}), 74: (1, {'@': 212}), 75: (1, {'@': 212}), 31: (1, {'@': 212}), 36: (1, {'@': 212}), 77: (1, {'@': 212}), 78: (1, {'@': 212}), 80: (1, {'@': 212}), 50: (1, {'@': 212}), 81: (1, {'@': 212}), 49: (1, {'@': 212}), 28: (1, {'@': 212}), 82: (1, {'@': 212}), 12: (1, {'@': 212})}, 314: {53: (1, {'@': 213}), 54: (1, {'@': 213}), 32: (1, {'@': 213}), 15: (1, {'@': 213}), 55: (1, {'@': 213}), 38: (1, {'@': 213}), 71: (1, {'@': 213}), 44: (1, {'@': 213}), 2: (1, {'@': 213}), 72: (1, {'@': 213}), 57: (1, {'@': 213}), 48: (1, {'@': 213}), 43: (1, {'@': 213}), 33: (1, {'@': 213}), 74: (1, {'@': 213}), 58: (1, {'@': 213}), 21: (1, {'@': 213}), 59: (1, {'@': 213}), 75: (1, {'@': 213}), 31: (1, {'@': 213}), 36: (1, {'@': 213}), 61: (1, {'@': 213}), 29: (1, {'@': 213}), 62: (1, {'@': 213}), 63: (1, {'@': 213}), 47: (1, {'@': 213}), 34: (1, {'@': 213}), 77: (1, {'@': 213}), 20: (1, {'@': 213}), 78: (1, {'@': 213}), 80: (1, {'@': 213}), 50: (1, {'@': 213}), 81: (1, {'@': 213}), 66: (1, {'@': 213}), 65: (1, {'@': 213}), 49: (1, {'@': 213}), 28: (1, {'@': 213}), 82: (1, {'@': 213}), 12: (1, {'@': 213}), 22: (1, {'@': 213}), 70: (1, {'@': 213})}, 315: {53: (1, {'@': 214}), 54: (1, {'@': 214}), 32: (1, {'@': 214}), 15: (1, {'@': 214}), 55: (1, {'@': 214}), 38: (1, {'@': 214}), 71: (1, {'@': 214}), 44: (1, {'@': 214}), 2: (1, {'@': 214}), 72: (1, {'@': 214}), 57: (1, {'@': 214}), 48: (1, {'@': 214}), 43: (1, {'@': 214}), 33: (1, {'@': 214}), 74: (1, {'@': 214}), 58: (1, {'@': 214}), 21: (1, {'@': 214}), 59: (1, {'@': 214}), 75: (1, {'@': 214}), 31: (1, {'@': 214}), 36: (1, {'@': 214}), 61: (1, {'@': 214}), 29: (1, {'@': 214}), 62: (1, {'@': 214}), 63: (1, {'@': 214}), 47: (1, {'@': 214}), 34: (1, {'@': 214}), 77: (1, {'@': 214}), 20: (1, {'@': 214}), 78: (1, {'@': 214}), 80: (1, {'@': 214}), 50: (1, {'@': 214}), 81: (1, {'@': 214}), 66: (1, {'@': 214}), 65: (1, {'@': 214}), 49: (1, {'@': 214}), 28: (1, {'@': 214}), 82: (1, {'@': 214}), 12: (1, {'@': 214}), 22: (1, {'@': 214}), 70: (1, {'@': 214})}, 316: {15: (0, 15), 43: (0, 43), 2: (0, 2), 17: (0, 17), 12: (0, 74), 26: (0, 26), 18: (0, 18), 33: (0, 33), 20: (0, 20), 22: (0, 22), 36: (0, 36), 25: (0, 25), 46: (0, 46), 30: (0, 30), 38: (0, 38), 52: (0, 53), 23: (0, 399), 3: (0, 48)}, 317: {15: (0, 15), 16: (0, 16), 17: (0, 17), 18: (0, 18), 20: (0, 20), 21: (0, 21), 22: (0, 22), 23: (0, 23), 24: (0, 24), 25: (0, 25), 26: (0, 26), 27: (0, 27), 28: (0, 28), 29: (0, 29), 19: (0, 19), 30: (0, 30), 31: (0, 31), 32: (0, 32), 12: (0, 74), 45: (0, 400), 33: (0, 33), 34: (0, 34), 35: (0, 35), 36: (0, 36), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40), 41: (0, 41), 42: (0, 42), 43: (0, 43), 2: (0, 2), 52: (0, 53), 44: (0, 44), 46: (0, 46), 47: (0, 47), 3: (0, 48), 48: (0, 49), 49: (0, 50), 50: (0, 51), 51: (0, 52)}, 318: {14: (0, 401), 74: (0, 402), 12: (0, 12)}, 319: {32: (1, {'@': 215}), 15: (1, {'@': 215}), 38: (1, {'@': 215}), 71: (1, {'@': 215}), 44: (1, {'@': 215}), 2: (1, {'@': 215}), 57: (1, {'@': 215}), 48: (1, {'@': 215}), 43: (1, {'@': 215}), 33: (1, {'@': 215}), 74: (1, {'@': 215}), 58: (1, {'@': 215}), 21: (1, {'@': 215}), 31: (1, {'@': 215}), 36: (1, {'@': 215}), 61: (1, {'@': 215}), 29: (1, {'@': 215}), 62: (1, {'@': 215}), 63: (1, {'@': 215}), 47: (1, {'@': 215}), 34: (1, {'@': 215}), 77: (1, {'@': 215}), 20: (1, {'@': 215}), 50: (1, {'@': 215}), 66: (1, {'@': 215}), 65: (1, {'@': 215}), 49: (1, {'@': 215}), 28: (1, {'@': 215}), 12: (0, 74), 22: (1, {'@': 215})}, 320: {71: (0, 321), 65: (0, 403), 12: (0, 12), 14: (0, 404), 136: (0, 405)}, 321: {30: (0, 406), 138: (0, 407), 43: (0, 43), 2: (0, 2), 20: (0, 20), 22: (0, 408), 36: (0, 409), 3: (0, 410), 25: (0, 411)}, 322: {135: (0, 412), 71: (0, 321), 136: (0, 323), 12: (0, 74)}, 323: {12: (1, {'@': 216}), 65: (1, {'@': 216}), 71: (1, {'@': 216})}, 324: {53: (1, {'@': 217}), 54: (1, {'@': 217}), 15: (1, {'@': 217}), 55: (1, {'@': 217}), 38: (1, {'@': 217}), 57: (1, {'@': 217}), 58: (1, {'@': 217}), 21: (1, {'@': 217}), 59: (1, {'@': 217}), 60: (1, {'@': 217}), 61: (1, {'@': 217}), 29: (1, {'@': 217}), 62: (1, {'@': 217}), 63: (1, {'@': 217}), 47: (1, {'@': 217}), 34: (1, {'@': 217}), 20: (1, {'@': 217}), 65: (1, {'@': 217}), 66: (1, {'@': 217}), 69: (1, {'@': 217}), 22: (1, {'@': 217}), 70: (1, {'@': 217}), 32: (1, {'@': 217}), 71: (1, {'@': 217}), 44: (1, {'@': 217}), 2: (1, {'@': 217}), 72: (1, {'@': 217}), 48: (1, {'@': 217}), 43: (1, {'@': 217}), 33: (1, {'@': 217}), 74: (1, {'@': 217}), 75: (1, {'@': 217}), 31: (1, {'@': 217}), 36: (1, {'@': 217}), 77: (1, {'@': 217}), 78: (1, {'@': 217}), 80: (1, {'@': 217}), 50: (1, {'@': 217}), 81: (1, {'@': 217}), 49: (1, {'@': 217}), 28: (1, {'@': 217}), 82: (1, {'@': 217}), 12: (1, {'@': 217})}, 325: {15: (0, 15), 16: (0, 16), 17: (0, 17), 18: (0, 18), 19: (0, 19), 20: (0, 20), 21: (0, 21), 22: (0, 22), 23: (0, 23), 24: (0, 24), 25: (0, 25), 26: (0, 26), 27: (0, 27), 28: (0, 28), 29: (0, 29), 30: (0, 30), 31: (0, 31), 32: (0, 32), 33: (0, 33), 34: (0, 34), 35: (0, 35), 36: (0, 36), 37: (0, 37), 45: (0, 413), 38: (0, 38), 39: (0, 39), 40: (0, 40), 41: (0, 41), 42: (0, 42), 43: (0, 43), 2: (0, 2), 44: (0, 44), 46: (0, 46), 47: (0, 47), 3: (0, 48), 48: (0, 49), 49: (0, 50), 50: (0, 51), 51: (0, 52), 52: (0, 53)}, 326: {15: (0, 15), 16: (0, 16), 17: (0, 17), 18: (0, 18), 19: (0, 19), 20: (0, 20), 21: (0, 21), 22: (0, 22), 23: (0, 23), 24: (0, 24), 25: (0, 25), 26: (0, 26), 27: (0, 27), 45: (0, 414), 28: (0, 28), 29: (0, 29), 30: (0, 30), 31: (0, 31), 61: (0, 415), 32: (0, 32), 33: (0, 33), 34: (0, 34), 35: (0, 35), 36: (0, 36), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40), 41: (0, 41), 42: (0, 42), 43: (0, 43), 2: (0, 2), 44: (0, 44), 46: (0, 46), 47: (0, 47), 3: (0, 48), 48: (0, 49), 49: (0, 50), 50: (0, 51), 51: (0, 52), 52: (0, 53)}, 327: {63: (1, {'@': 218}), 58: (1, {'@': 218})}, 328: {15: (0, 15), 43: (0, 43), 2: (0, 2), 52: (0, 53), 17: (0, 17), 18: (0, 18), 20: (0, 20), 22: (0, 22), 36: (0, 36), 23: (0, 23), 25: (0, 25), 26: (0, 26), 46: (0, 46), 19: (0, 19), 30: (0, 30), 3: (0, 48), 12: (0, 74), 33: (0, 33), 38: (0, 38), 37: (0, 416)}, 329: {54: (1, {'@': 219}), 32: (1, {'@': 219}), 15: (1, {'@': 219}), 55: (1, {'@': 219}), 38: (1, {'@': 219}), 71: (1, {'@': 219}), 44: (1, {'@': 219}), 2: (1, {'@': 219}), 72: (1, {'@': 219}), 57: (1, {'@': 219}), 48: (1, {'@': 219}), 43: (1, {'@': 219}), 33: (1, {'@': 219}), 74: (1, {'@': 219}), 58: (1, {'@': 219}), 21: (1, {'@': 219}), 59: (1, {'@': 219}), 75: (1, {'@': 219}), 31: (1, {'@': 219}), 36: (1, {'@': 219}), 61: (1, {'@': 219}), 29: (1, {'@': 219}), 62: (1, {'@': 219}), 63: (1, {'@': 219}), 47: (1, {'@': 219}), 34: (1, {'@': 219}), 77: (1, {'@': 219}), 20: (1, {'@': 219}), 78: (1, {'@': 219}), 80: (1, {'@': 219}), 50: (1, {'@': 219}), 66: (1, {'@': 219}), 65: (1, {'@': 219}), 49: (1, {'@': 219}), 28: (1, {'@': 219}), 82: (1, {'@': 219}), 12: (1, {'@': 219}), 22: (1, {'@': 219}), 70: (1, {'@': 219})}, 330: {54: (1, {'@': 220}), 32: (1, {'@': 220}), 15: (1, {'@': 220}), 55: (1, {'@': 220}), 38: (1, {'@': 220}), 71: (1, {'@': 220}), 44: (1, {'@': 220}), 2: (1, {'@': 220}), 72: (1, {'@': 220}), 57: (1, {'@': 220}), 48: (1, {'@': 220}), 43: (1, {'@': 220}), 33: (1, {'@': 220}), 74: (1, {'@': 220}), 58: (1, {'@': 220}), 21: (1, {'@': 220}), 59: (1, {'@': 220}), 75: (1, {'@': 220}), 31: (1, {'@': 220}), 36: (1, {'@': 220}), 61: (1, {'@': 220}), 29: (1, {'@': 220}), 62: (1, {'@': 220}), 63: (1, {'@': 220}), 47: (1, {'@': 220}), 34: (1, {'@': 220}), 77: (1, {'@': 220}), 20: (1, {'@': 220}), 78: (1, {'@': 220}), 80: (1, {'@': 220}), 50: (1, {'@': 220}), 66: (1, {'@': 220}), 65: (1, {'@': 220}), 49: (1, {'@': 220}), 28: (1, {'@': 220}), 82: (1, {'@': 220}), 12: (1, {'@': 220}), 22: (1, {'@': 220}), 70: (1, {'@': 220})}, 331: {54: (1, {'@': 221}), 32: (1, {'@': 221}), 15: (1, {'@': 221}), 55: (1, {'@': 221}), 38: (1, {'@': 221}), 71: (1, {'@': 221}), 44: (1, {'@': 221}), 2: (1, {'@': 221}), 72: (1, {'@': 221}), 57: (1, {'@': 221}), 48: (1, {'@': 221}), 43: (1, {'@': 221}), 33: (1, {'@': 221}), 74: (1, {'@': 221}), 58: (1, {'@': 221}), 21: (1, {'@': 221}), 59: (1, {'@': 221}), 75: (1, {'@': 221}), 31: (1, {'@': 221}), 36: (1, {'@': 221}), 61: (1, {'@': 221}), 29: (1, {'@': 221}), 62: (1, {'@': 221}), 63: (1, {'@': 221}), 47: (1, {'@': 221}), 34: (1, {'@': 221}), 77: (1, {'@': 221}), 20: (1, {'@': 221}), 80: (1, {'@': 221}), 50: (1, {'@': 221}), 66: (1, {'@': 221}), 65: (1, {'@': 221}), 49: (1, {'@': 221}), 28: (1, {'@': 221}), 82: (1, {'@': 221}), 12: (1, {'@': 221}), 22: (1, {'@': 221}), 70: (1, {'@': 221})}, 332: {15: (0, 15), 43: (0, 43), 2: (0, 2), 52: (0, 53), 17: (0, 17), 18: (0, 18), 20: (0, 20), 22: (0, 22), 36: (0, 36), 23: (0, 23), 25: (0, 25), 26: (0, 26), 46: (0, 46), 19: (0, 19), 30: (0, 30), 37: (0, 37), 3: (0, 48), 39: (0, 417), 12: (0, 74), 33: (0, 33), 38: (0, 38)}, 333: {54: (1, {'@': 222}), 32: (1, {'@': 222}), 15: (1, {'@': 222}), 55: (1, {'@': 222}), 38: (1, {'@': 222}), 71: (1, {'@': 222}), 44: (1, {'@': 222}), 2: (1, {'@': 222}), 72: (1, {'@': 222}), 57: (1, {'@': 222}), 48: (1, {'@': 222}), 43: (1, {'@': 222}), 33: (1, {'@': 222}), 74: (1, {'@': 222}), 58: (1, {'@': 222}), 21: (1, {'@': 222}), 59: (1, {'@': 222}), 75: (1, {'@': 222}), 31: (1, {'@': 222}), 36: (1, {'@': 222}), 61: (1, {'@': 222}), 29: (1, {'@': 222}), 62: (1, {'@': 222}), 63: (1, {'@': 222}), 47: (1, {'@': 222}), 34: (1, {'@': 222}), 77: (1, {'@': 222}), 20: (1, {'@': 222}), 80: (1, {'@': 222}), 50: (1, {'@': 222}), 66: (1, {'@': 222}), 65: (1, {'@': 222}), 49: (1, {'@': 222}), 28: (1, {'@': 222}), 82: (1, {'@': 222}), 12: (1, {'@': 222}), 22: (1, {'@': 222}), 70: (1, {'@': 222})}, 334: {54: (1, {'@': 223}), 32: (1, {'@': 223}), 15: (1, {'@': 223}), 55: (1, {'@': 223}), 38: (1, {'@': 223}), 71: (1, {'@': 223}), 44: (1, {'@': 223}), 2: (1, {'@': 223}), 57: (1, {'@': 223}), 48: (1, {'@': 223}), 43: (1, {'@': 223}), 33: (1, {'@': 223}), 74: (1, {'@': 223}), 58: (1, {'@': 223}), 21: (1, {'@': 223}), 59: (1, {'@': 223}), 75: (1, {'@': 223}), 31: (1, {'@': 223}), 36: (1, {'@': 223}), 61: (1, {'@': 223}), 29: (1, {'@': 223}), 62: (1, {'@': 223}), 63: (1, {'@': 223}), 47: (1, {'@': 223}), 34: (1, {'@': 223}), 77: (1, {'@': 223}), 20: (1, {'@': 223}), 80: (1, {'@': 223}), 50: (1, {'@': 223}), 66: (1, {'@': 223}), 65: (1, {'@': 223}), 49: (1, {'@': 223}), 28: (1, {'@': 223}), 82: (1, {'@': 223}), 12: (1, {'@': 223}), 22: (1, {'@': 223}), 70: (1, {'@': 223})}, 335: {41: (0, 418), 15: (0, 15), 43: (0, 43), 2: (0, 2), 52: (0, 53), 17: (0, 17), 18: (0, 18), 20: (0, 20), 22: (0, 22), 36: (0, 36), 23: (0, 23), 25: (0, 25), 26: (0, 26), 46: (0, 46), 19: (0, 19), 30: (0, 30), 37: (0, 37), 3: (0, 48), 12: (0, 74), 33: (0, 33), 39: (0, 39), 38: (0, 38)}, 336: {54: (1, {'@': 224}), 32: (1, {'@': 224}), 15: (1, {'@': 224}), 55: (1, {'@': 224}), 38: (1, {'@': 224}), 71: (1, {'@': 224}), 44: (1, {'@': 224}), 2: (1, {'@': 224}), 57: (1, {'@': 224}), 48: (1, {'@': 224}), 43: (1, {'@': 224}), 33: (1, {'@': 224}), 74: (1, {'@': 224}), 58: (1, {'@': 224}), 21: (1, {'@': 224}), 59: (1, {'@': 224}), 75: (1, {'@': 224}), 31: (1, {'@': 224}), 36: (1, {'@': 224}), 61: (1, {'@': 224}), 29: (1, {'@': 224}), 62: (1, {'@': 224}), 63: (1, {'@': 224}), 47: (1, {'@': 224}), 34: (1, {'@': 224}), 77: (1, {'@': 224}), 20: (1, {'@': 224}), 80: (1, {'@': 224}), 50: (1, {'@': 224}), 66: (1, {'@': 224}), 65: (1, {'@': 224}), 49: (1, {'@': 224}), 28: (1, {'@': 224}), 82: (1, {'@': 224}), 12: (1, {'@': 224}), 22: (1, {'@': 224}), 70: (1, {'@': 224})}, 337: {15: (0, 15), 16: (0, 16), 17: (0, 17), 18: (0, 18), 19: (0, 19), 20: (0, 20), 21: (0, 21), 22: (0, 22), 23: (0, 23), 24: (0, 24), 25: (0, 25), 26: (0, 26), 27: (0, 27), 28: (0, 28), 29: (0, 29), 30: (0, 30), 31: (0, 31), 32: (0, 32), 12: (0, 74), 33: (0, 33), 34: (0, 34), 35: (0, 35), 36: (0, 36), 45: (0, 419), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40), 41: (0, 41), 42: (0, 42), 43: (0, 43), 2: (0, 2), 44: (0, 44), 46: (0, 46), 47: (0, 47), 3: (0, 48), 48: (0, 49), 49: (0, 50), 50: (0, 51), 51: (0, 52), 52: (0, 53)}, 338: {32: (1, {'@': 225}), 15: (1, {'@': 225}), 38: (1, {'@': 225}), 71: (1, {'@': 225}), 44: (1, {'@': 225}), 2: (1, {'@': 225}), 57: (1, {'@': 225}), 48: (1, {'@': 225}), 43: (1, {'@': 225}), 33: (1, {'@': 225}), 74: (1, {'@': 225}), 58: (1, {'@': 225}), 21: (1, {'@': 225}), 31: (1, {'@': 225}), 36: (1, {'@': 225}), 61: (1, {'@': 225}), 29: (1, {'@': 225}), 62: (1, {'@': 225}), 63: (1, {'@': 225}), 47: (1, {'@': 225}), 34: (1, {'@': 225}), 77: (1, {'@': 225}), 20: (1, {'@': 225}), 50: (1, {'@': 225}), 66: (1, {'@': 225}), 65: (1, {'@': 225}), 49: (1, {'@': 225}), 28: (1, {'@': 225}), 12: (1, {'@': 225}), 22: (1, {'@': 225})}, 339: {101: (0, 76), 30: (0, 78), 99: (0, 79), 20: (0, 20), 102: (0, 80), 103: (0, 81), 104: (0, 82), 105: (0, 83), 98: (0, 84), 22: (0, 85), 106: (0, 86), 14: (0, 420), 107: (0, 87), 108: (0, 88), 29: (0, 89), 12: (0, 12), 110: (0, 91), 111: (0, 92), 33: (0, 94), 112: (0, 95), 43: (0, 43), 49: (0, 96), 2: (0, 2), 25: (0, 97), 3: (0, 139), 97: (0, 98), 44: (0, 99), 109: (0, 421), 100: (0, 100), 113: (0, 101), 38: (0, 102)}, 340: {77: (0, 422)}, 341: {77: (1, {'@': 226}), 63: (1, {'@': 226})}, 342: {123: (0, 423), 112: (0, 95), 101: (0, 76), 108: (0, 88), 43: (0, 43), 2: (0, 2), 25: (0, 97), 3: (0, 139), 44: (0, 99), 105: (0, 83), 110: (0, 140), 103: (0, 81), 111: (0, 92), 104: (0, 82), 22: (0, 142)}, 343: {77: (0, 424)}, 344: {0: (1, {'@': 227}), 12: (1, {'@': 227}), 64: (1, {'@': 227}), 76: (0, 184)}, 345: {101: (0, 76), 30: (0, 78), 99: (0, 79), 20: (0, 20), 102: (0, 80), 103: (0, 81), 104: (0, 82), 105: (0, 83), 98: (0, 84), 22: (0, 85), 106: (0, 86), 107: (0, 87), 108: (0, 88), 29: (0, 89), 12: (0, 74), 110: (0, 91), 111: (0, 92), 33: (0, 94), 112: (0, 95), 43: (0, 43), 49: (0, 96), 2: (0, 2), 25: (0, 97), 3: (0, 139), 97: (0, 98), 44: (0, 99), 109: (0, 425), 100: (0, 100), 113: (0, 101), 38: (0, 102)}, 346: {128: (0, 426), 2: (0, 2), 3: (0, 181)}, 347: {20: (0, 20), 30: (0, 427)}, 348: {20: (0, 20), 30: (0, 428)}, 349: {12: (1, {'@': 228}), 64: (1, {'@': 228}), 0: (1, {'@': 228})}, 350: {3: (0, 429), 2: (0, 2)}, 351: {3: (0, 430), 2: (0, 2)}, 352: {12: (1, {'@': 229}), 64: (1, {'@': 229}), 0: (1, {'@': 229})}, 353: {2: (0, 2), 3: (0, 431)}, 354: {15: (0, 432), 139: (0, 433)}, 355: {12: (1, {'@': 230}), 64: (1, {'@': 230}), 0: (1, {'@': 230})}, 356: {3: (0, 181), 2: (0, 2), 128: (0, 434)}, 357: {77: (1, {'@': 231}), 68: (1, {'@': 231}), 63: (1, {'@': 231}), 83: (1, {'@': 231})}, 358: {3: (0, 68), 95: (0, 435), 2: (0, 2)}, 359: {3: (0, 68), 95: (0, 436), 2: (0, 2)}, 360: {61: (0, 437)}, 361: {0: (1, {'@': 232}), 12: (1, {'@': 232}), 64: (1, {'@': 232})}, 362: {62: (1, {'@': 233}), 63: (1, {'@': 233}), 32: (1, {'@': 233}), 64: (1, {'@': 233}), 55: (1, {'@': 233}), 29: (1, {'@': 233}), 77: (1, {'@': 233}), 56: (1, {'@': 233}), 0: (1, {'@': 233}), 44: (1, {'@': 233}), 78: (1, {'@': 233}), 72: (1, {'@': 233}), 79: (1, {'@': 233}), 48: (1, {'@': 233}), 80: (1, {'@': 233}), 67: (1, {'@': 233}), 82: (1, {'@': 233}), 58: (1, {'@': 233}), 59: (1, {'@': 233}), 75: (1, {'@': 233}), 76: (1, {'@': 233}), 12: (1, {'@': 233}), 61: (1, {'@': 233}), 70: (1, {'@': 233})}, 363: {104: (0, 82), 101: (0, 438), 43: (0, 43), 25: (0, 97), 2: (0, 2), 103: (0, 81), 22: (0, 142), 12: (0, 74), 44: (0, 99), 3: (0, 197)}, 364: {62: (1, {'@': 234}), 63: (1, {'@': 234}), 32: (1, {'@': 234}), 64: (1, {'@': 234}), 55: (1, {'@': 234}), 29: (1, {'@': 234}), 77: (1, {'@': 234}), 56: (1, {'@': 234}), 0: (1, {'@': 234}), 44: (1, {'@': 234}), 78: (1, {'@': 234}), 72: (1, {'@': 234}), 79: (1, {'@': 234}), 48: (1, {'@': 234}), 80: (1, {'@': 234}), 67: (1, {'@': 234}), 82: (1, {'@': 234}), 58: (1, {'@': 234}), 59: (1, {'@': 234}), 75: (1, {'@': 234}), 76: (1, {'@': 234}), 12: (1, {'@': 234}), 61: (1, {'@': 234}), 70: (1, {'@': 234})}, 365: {61: (0, 439)}, 366: {62: (1, {'@': 235}), 63: (1, {'@': 235}), 32: (1, {'@': 235}), 64: (1, {'@': 235}), 55: (1, {'@': 235}), 77: (1, {'@': 235}), 56: (1, {'@': 235}), 0: (1, {'@': 235}), 70: (1, {'@': 235}), 79: (1, {'@': 235}), 48: (1, {'@': 235}), 80: (1, {'@': 235}), 67: (1, {'@': 235}), 82: (1, {'@': 235}), 59: (1, {'@': 235}), 75: (1, {'@': 235}), 76: (1, {'@': 235}), 12: (1, {'@': 235}), 29: (1, {'@': 235})}, 367: {32: (1, {'@': 236}), 55: (1, {'@': 236}), 56: (1, {'@': 236}), 44: (1, {'@': 236}), 72: (1, {'@': 236}), 48: (1, {'@': 236}), 58: (1, {'@': 236}), 59: (1, {'@': 236}), 75: (1, {'@': 236}), 76: (1, {'@': 236}), 61: (1, {'@': 236}), 29: (1, {'@': 236}), 62: (1, {'@': 236}), 63: (1, {'@': 236}), 64: (1, {'@': 236}), 77: (1, {'@': 236}), 0: (1, {'@': 236}), 78: (1, {'@': 236}), 79: (1, {'@': 236}), 80: (1, {'@': 236}), 81: (1, {'@': 236}), 67: (1, {'@': 236}), 82: (1, {'@': 236}), 83: (1, {'@': 236}), 12: (1, {'@': 236}), 70: (1, {'@': 236}), 54: (0, 339)}, 368: {29: (0, 440)}, 369: {62: (1, {'@': 237}), 77: (1, {'@': 237}), 56: (1, {'@': 237}), 0: (1, {'@': 237}), 76: (0, 184), 12: (1, {'@': 237}), 64: (1, {'@': 237})}, 370: {62: (1, {'@': 238}), 77: (1, {'@': 238}), 56: (1, {'@': 238}), 0: (1, {'@': 238}), 76: (0, 184), 12: (1, {'@': 238}), 64: (1, {'@': 238})}, 371: {62: (1, {'@': 239}), 77: (1, {'@': 239}), 56: (1, {'@': 239}), 0: (1, {'@': 239}), 76: (0, 184), 12: (1, {'@': 239}), 64: (1, {'@': 239})}, 372: {32: (1, {'@': 240}), 55: (1, {'@': 240}), 56: (1, {'@': 240}), 44: (1, {'@': 240}), 72: (1, {'@': 240}), 48: (1, {'@': 240}), 58: (1, {'@': 240}), 59: (1, {'@': 240}), 75: (1, {'@': 240}), 76: (1, {'@': 240}), 61: (1, {'@': 240}), 29: (1, {'@': 240}), 62: (1, {'@': 240}), 63: (1, {'@': 240}), 64: (1, {'@': 240}), 77: (1, {'@': 240}), 0: (1, {'@': 240}), 78: (1, {'@': 240}), 79: (1, {'@': 240}), 80: (1, {'@': 240}), 81: (1, {'@': 240}), 67: (1, {'@': 240}), 82: (1, {'@': 240}), 12: (1, {'@': 240}), 70: (1, {'@': 240}), 83: (0, 175)}, 373: {103: (0, 441), 104: (0, 82), 43: (0, 43), 25: (0, 97), 2: (0, 2), 22: (0, 142), 12: (0, 74), 44: (0, 99), 3: (0, 197)}, 374: {32: (1, {'@': 241}), 55: (1, {'@': 241}), 56: (1, {'@': 241}), 44: (1, {'@': 241}), 72: (1, {'@': 241}), 48: (1, {'@': 241}), 58: (1, {'@': 241}), 59: (1, {'@': 241}), 75: (1, {'@': 241}), 76: (1, {'@': 241}), 61: (1, {'@': 241}), 29: (1, {'@': 241}), 62: (1, {'@': 241}), 63: (1, {'@': 241}), 64: (1, {'@': 241}), 77: (1, {'@': 241}), 0: (1, {'@': 241}), 78: (1, {'@': 241}), 79: (1, {'@': 241}), 80: (1, {'@': 241}), 81: (1, {'@': 241}), 67: (1, {'@': 241}), 82: (1, {'@': 241}), 12: (1, {'@': 241}), 70: (1, {'@': 241}), 83: (0, 175)}, 375: {77: (1, {'@': 112}), 112: (0, 95), 101: (0, 76), 43: (0, 43), 108: (0, 88), 2: (0, 2), 25: (0, 97), 3: (0, 139), 44: (0, 99), 105: (0, 83), 110: (0, 140), 103: (0, 81), 111: (0, 92), 123: (0, 141), 104: (0, 82), 22: (0, 142), 122: (0, 442)}, 376: {101: (0, 76), 43: (0, 43), 25: (0, 97), 2: (0, 2), 12: (0, 74), 44: (0, 99), 3: (0, 197), 103: (0, 81), 104: (0, 82), 105: (0, 443), 22: (0, 142)}, 377: {62: (1, {'@': 242}), 63: (1, {'@': 242}), 32: (1, {'@': 242}), 64: (1, {'@': 242}), 55: (1, {'@': 242}), 77: (1, {'@': 242}), 56: (1, {'@': 242}), 0: (1, {'@': 242}), 44: (1, {'@': 242}), 70: (1, {'@': 242}), 72: (1, {'@': 242}), 79: (1, {'@': 242}), 48: (1, {'@': 242}), 80: (1, {'@': 242}), 67: (1, {'@': 242}), 82: (1, {'@': 242}), 58: (1, {'@': 242}), 59: (1, {'@': 242}), 75: (1, {'@': 242}), 76: (1, {'@': 242}), 12: (1, {'@': 242}), 61: (1, {'@': 242}), 29: (1, {'@': 242})}, 378: {62: (1, {'@': 243}), 63: (1, {'@': 243}), 32: (1, {'@': 243}), 64: (1, {'@': 243}), 55: (1, {'@': 243}), 77: (1, {'@': 243}), 56: (1, {'@': 243}), 0: (1, {'@': 243}), 44: (1, {'@': 243}), 70: (1, {'@': 243}), 72: (1, {'@': 243}), 79: (1, {'@': 243}), 48: (1, {'@': 243}), 80: (1, {'@': 243}), 67: (1, {'@': 243}), 82: (1, {'@': 243}), 58: (1, {'@': 243}), 59: (1, {'@': 243}), 75: (1, {'@': 243}), 76: (1, {'@': 243}), 12: (1, {'@': 243}), 61: (1, {'@': 243}), 29: (1, {'@': 243})}, 379: {62: (1, {'@': 244}), 77: (1, {'@': 244}), 56: (1, {'@': 244}), 0: (1, {'@': 244}), 76: (0, 184), 12: (1, {'@': 244}), 64: (1, {'@': 244})}, 380: {101: (0, 76), 30: (0, 78), 99: (0, 79), 20: (0, 20), 102: (0, 80), 103: (0, 81), 104: (0, 82), 105: (0, 83), 98: (0, 84), 22: (0, 85), 106: (0, 86), 107: (0, 87), 108: (0, 88), 29: (0, 89), 12: (0, 74), 110: (0, 91), 111: (0, 92), 33: (0, 94), 112: (0, 95), 43: (0, 43), 49: (0, 96), 2: (0, 2), 25: (0, 97), 3: (0, 139), 97: (0, 98), 109: (0, 444), 44: (0, 99), 100: (0, 100), 113: (0, 101), 38: (0, 102)}, 381: {77: (1, {'@': 245}), 63: (1, {'@': 245}), 61: (1, {'@': 245}), 22: (0, 445)}, 382: {77: (0, 446)}, 383: {62: (1, {'@': 246}), 77: (1, {'@': 246}), 56: (1, {'@': 246}), 0: (1, {'@': 246}), 76: (0, 184), 12: (1, {'@': 246}), 64: (1, {'@': 246})}, 384: {101: (0, 76), 30: (0, 78), 99: (0, 79), 20: (0, 20), 102: (0, 80), 103: (0, 81), 104: (0, 82), 105: (0, 83), 98: (0, 84), 22: (0, 85), 106: (0, 86), 107: (0, 87), 108: (0, 88), 29: (0, 89), 12: (0, 74), 110: (0, 91), 111: (0, 92), 33: (0, 94), 112: (0, 95), 43: (0, 43), 49: (0, 96), 2: (0, 2), 25: (0, 97), 3: (0, 139), 97: (0, 98), 44: (0, 99), 109: (0, 447), 100: (0, 100), 113: (0, 101), 38: (0, 102)}, 385: {101: (0, 76), 30: (0, 78), 99: (0, 79), 20: (0, 20), 102: (0, 80), 103: (0, 81), 104: (0, 82), 105: (0, 83), 98: (0, 84), 22: (0, 85), 106: (0, 86), 107: (0, 87), 108: (0, 88), 29: (0, 89), 12: (0, 74), 110: (0, 91), 111: (0, 92), 33: (0, 94), 109: (0, 448), 112: (0, 95), 43: (0, 43), 49: (0, 96), 2: (0, 2), 25: (0, 97), 3: (0, 139), 97: (0, 98), 44: (0, 99), 100: (0, 100), 113: (0, 101), 38: (0, 102)}, 386: {62: (1, {'@': 247}), 77: (1, {'@': 247}), 56: (0, 449), 0: (1, {'@': 247}), 76: (0, 184), 12: (1, {'@': 247}), 64: (1, {'@': 247})}, 387: {62: (1, {'@': 248}), 77: (1, {'@': 248}), 56: (1, {'@': 248}), 0: (1, {'@': 248}), 76: (0, 184), 12: (1, {'@': 248}), 64: (1, {'@': 248})}, 388: {101: (0, 76), 43: (0, 43), 25: (0, 97), 2: (0, 2), 12: (0, 74), 3: (0, 197), 103: (0, 81), 105: (0, 83), 104: (0, 82), 22: (0, 142), 111: (0, 450), 44: (0, 99)}, 389: {32: (1, {'@': 249}), 55: (1, {'@': 249}), 56: (1, {'@': 249}), 44: (1, {'@': 249}), 48: (1, {'@': 249}), 58: (1, {'@': 249}), 59: (1, {'@': 249}), 75: (1, {'@': 249}), 76: (1, {'@': 249}), 61: (1, {'@': 249}), 29: (1, {'@': 249}), 62: (1, {'@': 249}), 63: (1, {'@': 249}), 64: (1, {'@': 249}), 77: (1, {'@': 249}), 0: (1, {'@': 249}), 79: (1, {'@': 249}), 80: (1, {'@': 249}), 67: (1, {'@': 249}), 82: (1, {'@': 249}), 12: (1, {'@': 249}), 70: (1, {'@': 249})}, 390: {32: (1, {'@': 250}), 55: (1, {'@': 250}), 56: (1, {'@': 250}), 44: (1, {'@': 250}), 48: (1, {'@': 250}), 58: (1, {'@': 250}), 59: (1, {'@': 250}), 75: (1, {'@': 250}), 76: (1, {'@': 250}), 61: (1, {'@': 250}), 29: (1, {'@': 250}), 62: (1, {'@': 250}), 63: (1, {'@': 250}), 64: (1, {'@': 250}), 77: (1, {'@': 250}), 0: (1, {'@': 250}), 79: (1, {'@': 250}), 80: (1, {'@': 250}), 67: (1, {'@': 250}), 82: (1, {'@': 250}), 12: (1, {'@': 250}), 70: (1, {'@': 250})}, 391: {54: (1, {'@': 251}), 32: (1, {'@': 251}), 15: (1, {'@': 251}), 55: (1, {'@': 251}), 38: (1, {'@': 251}), 71: (1, {'@': 251}), 44: (1, {'@': 251}), 2: (1, {'@': 251}), 72: (1, {'@': 251}), 57: (1, {'@': 251}), 48: (1, {'@': 251}), 43: (1, {'@': 251}), 33: (1, {'@': 251}), 74: (1, {'@': 251}), 58: (1, {'@': 251}), 21: (1, {'@': 251}), 59: (1, {'@': 251}), 75: (1, {'@': 251}), 31: (1, {'@': 251}), 36: (1, {'@': 251}), 61: (1, {'@': 251}), 29: (1, {'@': 251}), 62: (1, {'@': 251}), 63: (1, {'@': 251}), 47: (1, {'@': 251}), 34: (1, {'@': 251}), 77: (1, {'@': 251}), 20: (1, {'@': 251}), 78: (1, {'@': 251}), 80: (1, {'@': 251}), 50: (1, {'@': 251}), 66: (1, {'@': 251}), 81: (1, {'@': 251}), 65: (1, {'@': 251}), 49: (1, {'@': 251}), 28: (1, {'@': 251}), 82: (1, {'@': 251}), 12: (1, {'@': 251}), 22: (1, {'@': 251}), 70: (1, {'@': 251})}, 392: {14: (0, 451), 57: (0, 452), 12: (0, 12)}, 393: {57: (0, 453), 12: (0, 74)}, 394: {15: (0, 15), 16: (0, 16), 17: (0, 17), 18: (0, 18), 19: (0, 19), 20: (0, 20), 21: (0, 21), 22: (0, 22), 23: (0, 23), 24: (0, 24), 25: (0, 25), 26: (0, 26), 27: (0, 27), 28: (0, 28), 29: (0, 29), 30: (0, 30), 31: (0, 31), 32: (0, 32), 12: (0, 12), 33: (0, 33), 34: (0, 34), 35: (0, 35), 36: (0, 36), 45: (0, 454), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40), 41: (0, 41), 42: (0, 42), 43: (0, 43), 2: (0, 2), 44: (0, 44), 46: (0, 46), 14: (0, 455), 47: (0, 47), 3: (0, 48), 48: (0, 49), 49: (0, 50), 50: (0, 51), 51: (0, 52), 52: (0, 53)}, 395: {57: (0, 456), 12: (0, 74)}, 396: {15: (0, 15), 16: (0, 16), 17: (0, 17), 18: (0, 18), 19: (0, 19), 20: (0, 20), 21: (0, 21), 22: (0, 22), 23: (0, 23), 24: (0, 24), 14: (0, 457), 25: (0, 25), 26: (0, 26), 27: (0, 27), 28: (0, 28), 29: (0, 29), 30: (0, 30), 31: (0, 31), 32: (0, 32), 12: (0, 12), 33: (0, 33), 34: (0, 34), 35: (0, 35), 36: (0, 36), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40), 41: (0, 41), 42: (0, 42), 43: (0, 43), 2: (0, 2), 45: (0, 458), 44: (0, 44), 46: (0, 46), 47: (0, 47), 3: (0, 48), 48: (0, 49), 49: (0, 50), 50: (0, 51), 51: (0, 52), 52: (0, 53)}, 397: {14: (0, 459), 12: (0, 12), 57: (0, 460)}, 398: {53: (1, {'@': 252}), 54: (1, {'@': 252}), 15: (1, {'@': 252}), 55: (1, {'@': 252}), 38: (1, {'@': 252}), 57: (1, {'@': 252}), 58: (1, {'@': 252}), 21: (1, {'@': 252}), 59: (1, {'@': 252}), 60: (1, {'@': 252}), 61: (1, {'@': 252}), 29: (1, {'@': 252}), 62: (1, {'@': 252}), 63: (1, {'@': 252}), 47: (1, {'@': 252}), 34: (1, {'@': 252}), 20: (1, {'@': 252}), 65: (1, {'@': 252}), 66: (1, {'@': 252}), 69: (1, {'@': 252}), 22: (1, {'@': 252}), 70: (1, {'@': 252}), 32: (1, {'@': 252}), 71: (1, {'@': 252}), 44: (1, {'@': 252}), 2: (1, {'@': 252}), 72: (1, {'@': 252}), 48: (1, {'@': 252}), 43: (1, {'@': 252}), 33: (1, {'@': 252}), 74: (1, {'@': 252}), 75: (1, {'@': 252}), 31: (1, {'@': 252}), 36: (1, {'@': 252}), 77: (1, {'@': 252}), 78: (1, {'@': 252}), 80: (1, {'@': 252}), 50: (1, {'@': 252}), 81: (1, {'@': 252}), 49: (1, {'@': 252}), 28: (1, {'@': 252}), 82: (1, {'@': 252}), 12: (1, {'@': 252})}, 399: {53: (1, {'@': 253}), 54: (1, {'@': 253}), 32: (1, {'@': 253}), 15: (1, {'@': 253}), 55: (1, {'@': 253}), 38: (1, {'@': 253}), 71: (1, {'@': 253}), 44: (1, {'@': 253}), 2: (1, {'@': 253}), 72: (1, {'@': 253}), 57: (1, {'@': 253}), 48: (1, {'@': 253}), 43: (1, {'@': 253}), 33: (1, {'@': 253}), 74: (1, {'@': 253}), 58: (1, {'@': 253}), 21: (1, {'@': 253}), 59: (1, {'@': 253}), 75: (1, {'@': 253}), 31: (1, {'@': 253}), 36: (1, {'@': 253}), 61: (1, {'@': 253}), 29: (1, {'@': 253}), 62: (1, {'@': 253}), 63: (1, {'@': 253}), 47: (1, {'@': 253}), 34: (1, {'@': 253}), 77: (1, {'@': 253}), 20: (1, {'@': 253}), 78: (1, {'@': 253}), 80: (1, {'@': 253}), 50: (1, {'@': 253}), 81: (1, {'@': 253}), 66: (1, {'@': 253}), 65: (1, {'@': 253}), 49: (1, {'@': 253}), 28: (1, {'@': 253}), 82: (1, {'@': 253}), 12: (1, {'@': 253}), 22: (1, {'@': 253}), 70: (1, {'@': 253})}, 400: {74: (0, 461), 14: (0, 462), 12: (0, 12)}, 401: {74: (0, 463), 12: (0, 74)}, 402: {14: (0, 464), 15: (0, 15), 16: (0, 16), 17: (0, 17), 18: (0, 18), 19: (0, 19), 20: (0, 20), 21: (0, 21), 22: (0, 22), 23: (0, 23), 24: (0, 24), 25: (0, 25), 26: (0, 26), 27: (0, 27), 28: (0, 28), 29: (0, 29), 30: (0, 30), 31: (0, 31), 32: (0, 32), 12: (0, 12), 33: (0, 33), 34: (0, 34), 35: (0, 35), 36: (0, 36), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40), 41: (0, 41), 42: (0, 42), 43: (0, 43), 2: (0, 2), 44: (0, 44), 46: (0, 46), 47: (0, 47), 45: (0, 465), 3: (0, 48), 48: (0, 49), 49: (0, 50), 50: (0, 51), 51: (0, 52), 52: (0, 53)}, 403: {32: (1, {'@': 254}), 15: (1, {'@': 254}), 38: (1, {'@': 254}), 71: (1, {'@': 254}), 44: (1, {'@': 254}), 2: (1, {'@': 254}), 57: (1, {'@': 254}), 48: (1, {'@': 254}), 43: (1, {'@': 254}), 33: (1, {'@': 254}), 74: (1, {'@': 254}), 58: (1, {'@': 254}), 21: (1, {'@': 254}), 31: (1, {'@': 254}), 36: (1, {'@': 254}), 61: (1, {'@': 254}), 29: (1, {'@': 254}), 62: (1, {'@': 254}), 63: (1, {'@': 254}), 47: (1, {'@': 254}), 34: (1, {'@': 254}), 77: (1, {'@': 254}), 20: (1, {'@': 254}), 50: (1, {'@': 254}), 66: (1, {'@': 254}), 65: (1, {'@': 254}), 49: (1, {'@': 254}), 28: (1, {'@': 254}), 12: (0, 12), 22: (1, {'@': 254}), 14: (0, 466)}, 404: {65: (0, 467), 12: (0, 74)}, 405: {12: (1, {'@': 255}), 65: (1, {'@': 255}), 71: (1, {'@': 255})}, 406: {77: (1, {'@': 256}), 63: (1, {'@': 256}), 58: (1, {'@': 256}), 60: (1, {'@': 256}), 69: (1, {'@': 256})}, 407: {69: (0, 468), 60: (0, 469)}, 408: {140: (0, 470), 30: (0, 406), 43: (0, 43), 2: (0, 2), 20: (0, 20), 22: (0, 408), 36: (0, 409), 3: (0, 410), 138: (0, 471), 25: (0, 411)}, 409: {30: (0, 406), 43: (0, 43), 36: (0, 409), 138: (0, 472), 2: (0, 2), 3: (0, 410), 58: (0, 473), 20: (0, 20), 25: (0, 411), 22: (0, 408)}, 410: {77: (1, {'@': 257}), 63: (1, {'@': 257}), 58: (1, {'@': 257}), 60: (1, {'@': 257}), 69: (1, {'@': 257})}, 411: {77: (1, {'@': 258}), 63: (1, {'@': 258}), 58: (1, {'@': 258}), 60: (1, {'@': 258}), 69: (1, {'@': 258})}, 412: {71: (0, 321), 12: (0, 12), 14: (0, 474), 65: (0, 475), 136: (0, 405)}, 413: {63: (1, {'@': 259}), 58: (1, {'@': 259})}, 414: {58: (0, 476)}, 415: {15: (0, 15), 16: (0, 16), 17: (0, 17), 18: (0, 18), 19: (0, 19), 20: (0, 20), 21: (0, 21), 22: (0, 22), 23: (0, 23), 24: (0, 24), 25: (0, 25), 26: (0, 26), 27: (0, 27), 28: (0, 28), 29: (0, 29), 30: (0, 30), 31: (0, 31), 32: (0, 32), 33: (0, 33), 34: (0, 34), 35: (0, 35), 36: (0, 36), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40), 41: (0, 41), 42: (0, 42), 43: (0, 43), 2: (0, 2), 44: (0, 44), 46: (0, 46), 47: (0, 47), 3: (0, 48), 48: (0, 49), 45: (0, 477), 49: (0, 50), 50: (0, 51), 51: (0, 52), 52: (0, 53)}, 416: {54: (1, {'@': 260}), 32: (1, {'@': 260}), 15: (1, {'@': 260}), 55: (1, {'@': 260}), 38: (1, {'@': 260}), 71: (1, {'@': 260}), 44: (1, {'@': 260}), 2: (1, {'@': 260}), 72: (1, {'@': 260}), 57: (1, {'@': 260}), 48: (1, {'@': 260}), 43: (1, {'@': 260}), 33: (1, {'@': 260}), 74: (1, {'@': 260}), 58: (1, {'@': 260}), 21: (1, {'@': 260}), 59: (1, {'@': 260}), 75: (1, {'@': 260}), 31: (1, {'@': 260}), 36: (1, {'@': 260}), 61: (1, {'@': 260}), 29: (1, {'@': 260}), 62: (1, {'@': 260}), 63: (1, {'@': 260}), 47: (1, {'@': 260}), 34: (1, {'@': 260}), 77: (1, {'@': 260}), 20: (1, {'@': 260}), 78: (1, {'@': 260}), 80: (1, {'@': 260}), 50: (1, {'@': 260}), 66: (1, {'@': 260}), 65: (1, {'@': 260}), 49: (1, {'@': 260}), 28: (1, {'@': 260}), 82: (1, {'@': 260}), 12: (1, {'@': 260}), 22: (1, {'@': 260}), 70: (1, {'@': 260})}, 417: {54: (1, {'@': 261}), 32: (1, {'@': 261}), 15: (1, {'@': 261}), 55: (1, {'@': 261}), 38: (1, {'@': 261}), 71: (1, {'@': 261}), 44: (1, {'@': 261}), 2: (1, {'@': 261}), 72: (1, {'@': 261}), 57: (1, {'@': 261}), 48: (1, {'@': 261}), 43: (1, {'@': 261}), 33: (1, {'@': 261}), 74: (1, {'@': 261}), 58: (1, {'@': 261}), 21: (1, {'@': 261}), 59: (1, {'@': 261}), 75: (1, {'@': 261}), 31: (1, {'@': 261}), 36: (1, {'@': 261}), 61: (1, {'@': 261}), 29: (1, {'@': 261}), 62: (1, {'@': 261}), 63: (1, {'@': 261}), 47: (1, {'@': 261}), 34: (1, {'@': 261}), 77: (1, {'@': 261}), 20: (1, {'@': 261}), 80: (1, {'@': 261}), 50: (1, {'@': 261}), 66: (1, {'@': 261}), 65: (1, {'@': 261}), 49: (1, {'@': 261}), 28: (1, {'@': 261}), 82: (1, {'@': 261}), 12: (1, {'@': 261}), 22: (1, {'@': 261}), 70: (1, {'@': 261})}, 418: {54: (1, {'@': 262}), 32: (1, {'@': 262}), 15: (1, {'@': 262}), 55: (1, {'@': 262}), 38: (1, {'@': 262}), 71: (1, {'@': 262}), 44: (1, {'@': 262}), 2: (1, {'@': 262}), 57: (1, {'@': 262}), 48: (1, {'@': 262}), 43: (1, {'@': 262}), 33: (1, {'@': 262}), 74: (1, {'@': 262}), 58: (1, {'@': 262}), 21: (1, {'@': 262}), 59: (1, {'@': 262}), 75: (1, {'@': 262}), 31: (1, {'@': 262}), 36: (1, {'@': 262}), 61: (1, {'@': 262}), 29: (1, {'@': 262}), 62: (1, {'@': 262}), 63: (1, {'@': 262}), 47: (1, {'@': 262}), 34: (1, {'@': 262}), 77: (1, {'@': 262}), 20: (1, {'@': 262}), 80: (1, {'@': 262}), 50: (1, {'@': 262}), 66: (1, {'@': 262}), 65: (1, {'@': 262}), 49: (1, {'@': 262}), 28: (1, {'@': 262}), 82: (1, {'@': 262}), 12: (1, {'@': 262}), 22: (1, {'@': 262}), 70: (1, {'@': 262})}, 419: {32: (1, {'@': 263}), 15: (1, {'@': 263}), 38: (1, {'@': 263}), 71: (1, {'@': 263}), 44: (1, {'@': 263}), 2: (1, {'@': 263}), 57: (1, {'@': 263}), 48: (1, {'@': 263}), 43: (1, {'@': 263}), 33: (1, {'@': 263}), 74: (1, {'@': 263}), 58: (1, {'@': 263}), 21: (1, {'@': 263}), 31: (1, {'@': 263}), 36: (1, {'@': 263}), 61: (1, {'@': 263}), 29: (1, {'@': 263}), 62: (1, {'@': 263}), 63: (1, {'@': 263}), 47: (1, {'@': 263}), 34: (1, {'@': 263}), 77: (1, {'@': 263}), 20: (1, {'@': 263}), 50: (1, {'@': 263}), 66: (1, {'@': 263}), 65: (1, {'@': 263}), 49: (1, {'@': 263}), 28: (1, {'@': 263}), 12: (1, {'@': 263}), 22: (1, {'@': 263})}, 420: {101: (0, 76), 30: (0, 78), 99: (0, 79), 20: (0, 20), 102: (0, 80), 103: (0, 81), 104: (0, 82), 105: (0, 83), 98: (0, 84), 22: (0, 85), 106: (0, 86), 107: (0, 87), 108: (0, 88), 29: (0, 89), 12: (0, 74), 110: (0, 91), 111: (0, 92), 33: (0, 94), 112: (0, 95), 43: (0, 43), 49: (0, 96), 2: (0, 2), 25: (0, 97), 3: (0, 139), 97: (0, 98), 44: (0, 99), 109: (0, 478), 100: (0, 100), 113: (0, 101), 38: (0, 102)}, 421: {0: (1, {'@': 264}), 12: (1, {'@': 264}), 64: (1, {'@': 264}), 76: (0, 184)}, 422: {32: (1, {'@': 236}), 55: (1, {'@': 236}), 56: (1, {'@': 236}), 44: (1, {'@': 236}), 72: (1, {'@': 236}), 48: (1, {'@': 236}), 58: (1, {'@': 236}), 59: (1, {'@': 236}), 75: (1, {'@': 236}), 76: (1, {'@': 236}), 61: (1, {'@': 236}), 29: (1, {'@': 236}), 62: (1, {'@': 236}), 63: (1, {'@': 236}), 64: (1, {'@': 236}), 77: (1, {'@': 236}), 0: (1, {'@': 236}), 78: (1, {'@': 236}), 79: (1, {'@': 236}), 80: (1, {'@': 236}), 81: (1, {'@': 236}), 67: (1, {'@': 236}), 82: (1, {'@': 236}), 83: (1, {'@': 236}), 12: (1, {'@': 236}), 70: (1, {'@': 236})}, 423: {77: (1, {'@': 265}), 63: (1, {'@': 265})}, 424: {54: (0, 479)}, 425: {0: (1, {'@': 266}), 12: (1, {'@': 266}), 64: (1, {'@': 266}), 76: (0, 184)}, 426: {63: (0, 480)}, 427: {77: (0, 481)}, 428: {63: (0, 482)}, 429: {77: (0, 483)}, 430: {77: (0, 484)}, 431: {77: (0, 485)}, 432: {141: (0, 486), 64: (0, 487), 14: (0, 488), 12: (0, 12), 20: (0, 20), 30: (0, 489)}, 433: {77: (0, 490)}, 434: {63: (0, 491)}, 435: {77: (0, 492)}, 436: {77: (0, 493)}, 437: {0: (1, {'@': 267}), 12: (1, {'@': 267}), 64: (1, {'@': 267})}, 438: {62: (1, {'@': 268}), 63: (1, {'@': 268}), 32: (1, {'@': 268}), 64: (1, {'@': 268}), 55: (1, {'@': 268}), 29: (1, {'@': 268}), 77: (1, {'@': 268}), 56: (1, {'@': 268}), 0: (1, {'@': 268}), 44: (1, {'@': 268}), 78: (1, {'@': 268}), 72: (1, {'@': 268}), 79: (1, {'@': 268}), 48: (1, {'@': 268}), 80: (1, {'@': 268}), 67: (1, {'@': 268}), 82: (1, {'@': 268}), 58: (1, {'@': 268}), 59: (1, {'@': 268}), 75: (1, {'@': 268}), 76: (1, {'@': 268}), 12: (1, {'@': 268}), 61: (1, {'@': 268}), 70: (1, {'@': 268})}, 439: {112: (0, 95), 101: (0, 76), 43: (0, 43), 25: (0, 97), 2: (0, 2), 61: (0, 494), 44: (0, 99), 3: (0, 197), 105: (0, 83), 108: (0, 495), 111: (0, 92), 103: (0, 81), 104: (0, 82), 22: (0, 142)}, 440: {101: (0, 76), 30: (0, 78), 99: (0, 79), 20: (0, 20), 102: (0, 80), 103: (0, 81), 109: (0, 496), 104: (0, 82), 105: (0, 83), 98: (0, 84), 22: (0, 85), 106: (0, 86), 107: (0, 87), 108: (0, 88), 29: (0, 89), 12: (0, 12), 110: (0, 91), 111: (0, 92), 33: (0, 94), 112: (0, 95), 43: (0, 43), 49: (0, 96), 2: (0, 2), 25: (0, 97), 3: (0, 139), 97: (0, 98), 44: (0, 99), 100: (0, 100), 113: (0, 101), 38: (0, 102), 14: (0, 497)}, 441: {32: (1, {'@': 269}), 55: (1, {'@': 269}), 56: (1, {'@': 269}), 44: (1, {'@': 269}), 72: (1, {'@': 269}), 48: (1, {'@': 269}), 58: (1, {'@': 269}), 59: (1, {'@': 269}), 75: (1, {'@': 269}), 76: (1, {'@': 269}), 61: (1, {'@': 269}), 29: (1, {'@': 269}), 62: (1, {'@': 269}), 63: (1, {'@': 269}), 64: (1, {'@': 269}), 77: (1, {'@': 269}), 0: (1, {'@': 269}), 78: (1, {'@': 269}), 79: (1, {'@': 269}), 80: (1, {'@': 269}), 81: (1, {'@': 269}), 67: (1, {'@': 269}), 82: (1, {'@': 269}), 12: (1, {'@': 269}), 70: (1, {'@': 269}), 83: (0, 175)}, 442: {77: (0, 498)}, 443: {62: (1, {'@': 270}), 63: (1, {'@': 270}), 32: (1, {'@': 270}), 64: (1, {'@': 270}), 55: (1, {'@': 270}), 77: (1, {'@': 270}), 56: (1, {'@': 270}), 0: (1, {'@': 270}), 44: (1, {'@': 270}), 70: (1, {'@': 270}), 72: (1, {'@': 270}), 79: (1, {'@': 270}), 48: (1, {'@': 270}), 80: (1, {'@': 270}), 67: (1, {'@': 270}), 82: (1, {'@': 270}), 58: (1, {'@': 270}), 59: (1, {'@': 270}), 75: (1, {'@': 270}), 76: (1, {'@': 270}), 12: (1, {'@': 270}), 61: (1, {'@': 270}), 29: (1, {'@': 270})}, 444: {62: (1, {'@': 271}), 77: (1, {'@': 271}), 56: (1, {'@': 271}), 0: (1, {'@': 271}), 76: (0, 184), 12: (1, {'@': 271}), 64: (1, {'@': 271})}, 445: {3: (0, 68), 95: (0, 499), 2: (0, 2)}, 446: {77: (1, {'@': 272}), 63: (1, {'@': 272}), 61: (1, {'@': 272})}, 447: {62: (1, {'@': 273}), 77: (1, {'@': 273}), 56: (1, {'@': 273}), 0: (1, {'@': 273}), 76: (0, 184), 12: (1, {'@': 273}), 64: (1, {'@': 273})}, 448: {62: (1, {'@': 274}), 77: (1, {'@': 274}), 56: (0, 500), 0: (1, {'@': 274}), 76: (0, 184), 12: (1, {'@': 274}), 64: (1, {'@': 274})}, 449: {101: (0, 76), 30: (0, 78), 99: (0, 79), 20: (0, 20), 102: (0, 80), 103: (0, 81), 104: (0, 82), 105: (0, 83), 98: (0, 84), 22: (0, 85), 106: (0, 86), 107: (0, 87), 108: (0, 88), 29: (0, 89), 12: (0, 12), 110: (0, 91), 111: (0, 92), 33: (0, 94), 112: (0, 95), 43: (0, 43), 49: (0, 96), 2: (0, 2), 25: (0, 97), 3: (0, 139), 97: (0, 98), 109: (0, 501), 44: (0, 99), 100: (0, 100), 14: (0, 502), 113: (0, 101), 38: (0, 102)}, 450: {32: (1, {'@': 275}), 55: (1, {'@': 275}), 56: (1, {'@': 275}), 44: (1, {'@': 275}), 48: (1, {'@': 275}), 58: (1, {'@': 275}), 59: (1, {'@': 275}), 75: (1, {'@': 275}), 76: (1, {'@': 275}), 61: (1, {'@': 275}), 29: (1, {'@': 275}), 62: (1, {'@': 275}), 63: (1, {'@': 275}), 64: (1, {'@': 275}), 77: (1, {'@': 275}), 0: (1, {'@': 275}), 79: (1, {'@': 275}), 80: (1, {'@': 275}), 67: (1, {'@': 275}), 82: (1, {'@': 275}), 12: (1, {'@': 275}), 70: (1, {'@': 275})}, 451: {57: (0, 503), 12: (0, 74)}, 452: {15: (0, 15), 16: (0, 16), 17: (0, 17), 18: (0, 18), 19: (0, 19), 20: (0, 20), 21: (0, 21), 22: (0, 22), 23: (0, 23), 24: (0, 24), 25: (0, 25), 26: (0, 26), 27: (0, 27), 28: (0, 28), 29: (0, 29), 30: (0, 30), 31: (0, 31), 32: (0, 32), 12: (0, 12), 33: (0, 33), 34: (0, 34), 35: (0, 35), 36: (0, 36), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40), 41: (0, 41), 42: (0, 42), 43: (0, 43), 2: (0, 2), 44: (0, 44), 46: (0, 46), 47: (0, 47), 3: (0, 48), 14: (0, 504), 48: (0, 49), 49: (0, 50), 50: (0, 51), 51: (0, 52), 52: (0, 53), 45: (0, 505)}, 453: {15: (0, 15), 16: (0, 16), 17: (0, 17), 18: (0, 18), 19: (0, 19), 20: (0, 20), 21: (0, 21), 22: (0, 22), 23: (0, 23), 24: (0, 24), 25: (0, 25), 26: (0, 26), 27: (0, 27), 28: (0, 28), 29: (0, 29), 30: (0, 30), 31: (0, 31), 32: (0, 32), 12: (0, 12), 33: (0, 33), 34: (0, 34), 35: (0, 35), 36: (0, 36), 45: (0, 506), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40), 41: (0, 41), 42: (0, 42), 43: (0, 43), 2: (0, 2), 44: (0, 44), 46: (0, 46), 47: (0, 47), 3: (0, 48), 48: (0, 49), 14: (0, 507), 49: (0, 50), 50: (0, 51), 51: (0, 52), 52: (0, 53)}, 454: {32: (1, {'@': 276}), 15: (1, {'@': 276}), 38: (1, {'@': 276}), 71: (1, {'@': 276}), 44: (1, {'@': 276}), 2: (1, {'@': 276}), 57: (1, {'@': 276}), 48: (1, {'@': 276}), 43: (1, {'@': 276}), 33: (1, {'@': 276}), 74: (1, {'@': 276}), 58: (1, {'@': 276}), 21: (1, {'@': 276}), 31: (1, {'@': 276}), 36: (1, {'@': 276}), 61: (1, {'@': 276}), 29: (1, {'@': 276}), 62: (1, {'@': 276}), 63: (1, {'@': 276}), 47: (1, {'@': 276}), 34: (1, {'@': 276}), 77: (1, {'@': 276}), 20: (1, {'@': 276}), 50: (1, {'@': 276}), 66: (1, {'@': 276}), 65: (1, {'@': 276}), 49: (1, {'@': 276}), 28: (1, {'@': 276}), 12: (1, {'@': 276}), 22: (1, {'@': 276})}, 455: {15: (0, 15), 16: (0, 16), 17: (0, 17), 18: (0, 18), 19: (0, 19), 20: (0, 20), 21: (0, 21), 22: (0, 22), 23: (0, 23), 24: (0, 24), 25: (0, 25), 26: (0, 26), 27: (0, 27), 28: (0, 28), 29: (0, 29), 30: (0, 30), 31: (0, 31), 32: (0, 32), 12: (0, 74), 33: (0, 33), 45: (0, 508), 34: (0, 34), 35: (0, 35), 36: (0, 36), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40), 41: (0, 41), 42: (0, 42), 43: (0, 43), 2: (0, 2), 44: (0, 44), 46: (0, 46), 47: (0, 47), 3: (0, 48), 48: (0, 49), 49: (0, 50), 50: (0, 51), 51: (0, 52), 52: (0, 53)}, 456: {15: (0, 15), 16: (0, 16), 17: (0, 17), 18: (0, 18), 19: (0, 19), 20: (0, 20), 21: (0, 21), 22: (0, 22), 23: (0, 23), 24: (0, 24), 25: (0, 25), 26: (0, 26), 27: (0, 27), 14: (0, 509), 28: (0, 28), 29: (0, 29), 30: (0, 30), 31: (0, 31), 32: (0, 32), 12: (0, 12), 33: (0, 33), 34: (0, 34), 35: (0, 35), 36: (0, 36), 37: (0, 37), 45: (0, 510), 38: (0, 38), 39: (0, 39), 40: (0, 40), 41: (0, 41), 42: (0, 42), 43: (0, 43), 2: (0, 2), 44: (0, 44), 46: (0, 46), 47: (0, 47), 3: (0, 48), 48: (0, 49), 49: (0, 50), 50: (0, 51), 51: (0, 52), 52: (0, 53)}, 457: {15: (0, 15), 16: (0, 16), 17: (0, 17), 18: (0, 18), 19: (0, 19), 20: (0, 20), 21: (0, 21), 22: (0, 22), 23: (0, 23), 24: (0, 24), 25: (0, 25), 26: (0, 26), 27: (0, 27), 28: (0, 28), 29: (0, 29), 30: (0, 30), 31: (0, 31), 32: (0, 32), 12: (0, 74), 33: (0, 33), 34: (0, 34), 35: (0, 35), 36: (0, 36), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40), 41: (0, 41), 42: (0, 42), 43: (0, 43), 2: (0, 2), 44: (0, 44), 46: (0, 46), 47: (0, 47), 45: (0, 511), 3: (0, 48), 48: (0, 49), 49: (0, 50), 50: (0, 51), 51: (0, 52), 52: (0, 53)}, 458: {32: (1, {'@': 277}), 15: (1, {'@': 277}), 38: (1, {'@': 277}), 71: (1, {'@': 277}), 44: (1, {'@': 277}), 2: (1, {'@': 277}), 57: (1, {'@': 277}), 48: (1, {'@': 277}), 43: (1, {'@': 277}), 33: (1, {'@': 277}), 74: (1, {'@': 277}), 58: (1, {'@': 277}), 21: (1, {'@': 277}), 31: (1, {'@': 277}), 36: (1, {'@': 277}), 61: (1, {'@': 277}), 29: (1, {'@': 277}), 62: (1, {'@': 277}), 63: (1, {'@': 277}), 47: (1, {'@': 277}), 34: (1, {'@': 277}), 77: (1, {'@': 277}), 20: (1, {'@': 277}), 50: (1, {'@': 277}), 66: (1, {'@': 277}), 65: (1, {'@': 277}), 49: (1, {'@': 277}), 28: (1, {'@': 277}), 12: (1, {'@': 277}), 22: (1, {'@': 277})}, 459: {57: (0, 512), 12: (0, 74)}, 460: {15: (0, 15), 16: (0, 16), 17: (0, 17), 18: (0, 18), 19: (0, 19), 20: (0, 20), 21: (0, 21), 22: (0, 22), 23: (0, 23), 24: (0, 24), 25: (0, 25), 26: (0, 26), 27: (0, 27), 45: (0, 513), 28: (0, 28), 29: (0, 29), 30: (0, 30), 31: (0, 31), 32: (0, 32), 12: (0, 12), 33: (0, 33), 34: (0, 34), 35: (0, 35), 36: (0, 36), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40), 41: (0, 41), 42: (0, 42), 43: (0, 43), 2: (0, 2), 44: (0, 44), 46: (0, 46), 47: (0, 47), 3: (0, 48), 48: (0, 49), 14: (0, 514), 49: (0, 50), 50: (0, 51), 51: (0, 52), 52: (0, 53)}, 461: {15: (0, 15), 16: (0, 16), 17: (0, 17), 18: (0, 18), 19: (0, 19), 20: (0, 20), 21: (0, 21), 22: (0, 22), 23: (0, 23), 24: (0, 24), 25: (0, 25), 26: (0, 26), 27: (0, 27), 28: (0, 28), 29: (0, 29), 30: (0, 30), 31: (0, 31), 32: (0, 32), 12: (0, 12), 33: (0, 33), 34: (0, 34), 35: (0, 35), 36: (0, 36), 37: (0, 37), 45: (0, 515), 38: (0, 38), 39: (0, 39), 40: (0, 40), 41: (0, 41), 42: (0, 42), 43: (0, 43), 2: (0, 2), 44: (0, 44), 46: (0, 46), 47: (0, 47), 3: (0, 48), 14: (0, 516), 48: (0, 49), 49: (0, 50), 50: (0, 51), 51: (0, 52), 52: (0, 53)}, 462: {74: (0, 517), 12: (0, 74)}, 463: {15: (0, 15), 16: (0, 16), 17: (0, 17), 18: (0, 18), 19: (0, 19), 20: (0, 20), 21: (0, 21), 22: (0, 22), 23: (0, 23), 24: (0, 24), 25: (0, 25), 26: (0, 26), 27: (0, 27), 28: (0, 28), 29: (0, 29), 30: (0, 30), 31: (0, 31), 32: (0, 32), 12: (0, 12), 33: (0, 33), 34: (0, 34), 35: (0, 35), 36: (0, 36), 37: (0, 37), 45: (0, 518), 38: (0, 38), 14: (0, 519), 39: (0, 39), 40: (0, 40), 41: (0, 41), 42: (0, 42), 43: (0, 43), 2: (0, 2), 44: (0, 44), 46: (0, 46), 47: (0, 47), 3: (0, 48), 48: (0, 49), 49: (0, 50), 50: (0, 51), 51: (0, 52), 52: (0, 53)}, 464: {15: (0, 15), 16: (0, 16), 17: (0, 17), 18: (0, 18), 19: (0, 19), 20: (0, 20), 21: (0, 21), 22: (0, 22), 23: (0, 23), 24: (0, 24), 25: (0, 25), 26: (0, 26), 27: (0, 27), 28: (0, 28), 29: (0, 29), 30: (0, 30), 31: (0, 31), 32: (0, 32), 12: (0, 74), 33: (0, 33), 34: (0, 34), 35: (0, 35), 36: (0, 36), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40), 41: (0, 41), 42: (0, 42), 43: (0, 43), 2: (0, 2), 44: (0, 44), 45: (0, 520), 46: (0, 46), 47: (0, 47), 3: (0, 48), 48: (0, 49), 49: (0, 50), 50: (0, 51), 51: (0, 52), 52: (0, 53)}, 465: {32: (1, {'@': 278}), 15: (1, {'@': 278}), 38: (1, {'@': 278}), 71: (1, {'@': 278}), 44: (1, {'@': 278}), 2: (1, {'@': 278}), 57: (1, {'@': 278}), 48: (1, {'@': 278}), 43: (1, {'@': 278}), 33: (1, {'@': 278}), 74: (1, {'@': 278}), 58: (1, {'@': 278}), 21: (1, {'@': 278}), 31: (1, {'@': 278}), 36: (1, {'@': 278}), 61: (1, {'@': 278}), 29: (1, {'@': 278}), 62: (1, {'@': 278}), 63: (1, {'@': 278}), 47: (1, {'@': 278}), 34: (1, {'@': 278}), 77: (1, {'@': 278}), 20: (1, {'@': 278}), 50: (1, {'@': 278}), 66: (1, {'@': 278}), 65: (1, {'@': 278}), 49: (1, {'@': 278}), 28: (1, {'@': 278}), 12: (1, {'@': 278}), 22: (1, {'@': 278})}, 466: {32: (1, {'@': 279}), 15: (1, {'@': 279}), 38: (1, {'@': 279}), 71: (1, {'@': 279}), 44: (1, {'@': 279}), 2: (1, {'@': 279}), 57: (1, {'@': 279}), 48: (1, {'@': 279}), 43: (1, {'@': 279}), 33: (1, {'@': 279}), 74: (1, {'@': 279}), 58: (1, {'@': 279}), 21: (1, {'@': 279}), 31: (1, {'@': 279}), 36: (1, {'@': 279}), 61: (1, {'@': 279}), 29: (1, {'@': 279}), 62: (1, {'@': 279}), 63: (1, {'@': 279}), 47: (1, {'@': 279}), 34: (1, {'@': 279}), 77: (1, {'@': 279}), 20: (1, {'@': 279}), 50: (1, {'@': 279}), 66: (1, {'@': 279}), 65: (1, {'@': 279}), 49: (1, {'@': 279}), 28: (1, {'@': 279}), 12: (0, 74), 22: (1, {'@': 279})}, 467: {32: (1, {'@': 280}), 15: (1, {'@': 280}), 38: (1, {'@': 280}), 71: (1, {'@': 280}), 44: (1, {'@': 280}), 2: (1, {'@': 280}), 57: (1, {'@': 280}), 48: (1, {'@': 280}), 43: (1, {'@': 280}), 33: (1, {'@': 280}), 74: (1, {'@': 280}), 58: (1, {'@': 280}), 21: (1, {'@': 280}), 31: (1, {'@': 280}), 36: (1, {'@': 280}), 61: (1, {'@': 280}), 29: (1, {'@': 280}), 62: (1, {'@': 280}), 63: (1, {'@': 280}), 47: (1, {'@': 280}), 34: (1, {'@': 280}), 77: (1, {'@': 280}), 20: (1, {'@': 280}), 50: (1, {'@': 280}), 66: (1, {'@': 280}), 65: (1, {'@': 280}), 49: (1, {'@': 280}), 28: (1, {'@': 280}), 12: (0, 12), 22: (1, {'@': 280}), 14: (0, 521)}, 468: {15: (0, 15), 16: (0, 16), 14: (0, 522), 17: (0, 17), 18: (0, 18), 20: (0, 20), 21: (0, 21), 22: (0, 22), 23: (0, 23), 24: (0, 24), 25: (0, 25), 26: (0, 26), 27: (0, 27), 28: (0, 28), 29: (0, 29), 19: (0, 19), 30: (0, 30), 31: (0, 31), 32: (0, 32), 12: (0, 12), 33: (0, 33), 34: (0, 34), 35: (0, 35), 36: (0, 36), 37: (0, 37), 38: (0, 38), 45: (0, 523), 39: (0, 39), 40: (0, 40), 41: (0, 41), 42: (0, 42), 43: (0, 43), 2: (0, 2), 52: (0, 53), 44: (0, 44), 46: (0, 46), 47: (0, 47), 3: (0, 48), 48: (0, 49), 49: (0, 50), 50: (0, 51), 51: (0, 52)}, 469: {36: (0, 409), 30: (0, 406), 43: (0, 43), 3: (0, 410), 2: (0, 2), 138: (0, 524), 20: (0, 20), 25: (0, 411), 22: (0, 408)}, 470: {77: (0, 525), 30: (0, 406), 43: (0, 43), 138: (0, 526), 2: (0, 2), 36: (0, 409), 3: (0, 410), 20: (0, 20), 25: (0, 411), 22: (0, 408)}, 471: {63: (0, 527), 60: (0, 469)}, 472: {142: (0, 528), 60: (0, 469), 63: (0, 529), 58: (0, 530)}, 473: {77: (1, {'@': 281}), 63: (1, {'@': 281}), 58: (1, {'@': 281}), 60: (1, {'@': 281}), 69: (1, {'@': 281})}, 474: {65: (0, 531), 12: (0, 74)}, 475: {32: (1, {'@': 282}), 15: (1, {'@': 282}), 38: (1, {'@': 282}), 71: (1, {'@': 282}), 44: (1, {'@': 282}), 2: (1, {'@': 282}), 57: (1, {'@': 282}), 48: (1, {'@': 282}), 43: (1, {'@': 282}), 33: (1, {'@': 282}), 74: (1, {'@': 282}), 58: (1, {'@': 282}), 21: (1, {'@': 282}), 31: (1, {'@': 282}), 36: (1, {'@': 282}), 61: (1, {'@': 282}), 29: (1, {'@': 282}), 62: (1, {'@': 282}), 63: (1, {'@': 282}), 47: (1, {'@': 282}), 34: (1, {'@': 282}), 77: (1, {'@': 282}), 20: (1, {'@': 282}), 50: (1, {'@': 282}), 66: (1, {'@': 282}), 65: (1, {'@': 282}), 49: (1, {'@': 282}), 28: (1, {'@': 282}), 12: (0, 12), 22: (1, {'@': 282}), 14: (0, 532)}, 476: {53: (1, {'@': 283}), 54: (1, {'@': 283}), 15: (1, {'@': 283}), 55: (1, {'@': 283}), 38: (1, {'@': 283}), 57: (1, {'@': 283}), 58: (1, {'@': 283}), 21: (1, {'@': 283}), 59: (1, {'@': 283}), 60: (1, {'@': 283}), 61: (1, {'@': 283}), 29: (1, {'@': 283}), 62: (1, {'@': 283}), 63: (1, {'@': 283}), 47: (1, {'@': 283}), 34: (1, {'@': 283}), 20: (1, {'@': 283}), 65: (1, {'@': 283}), 66: (1, {'@': 283}), 69: (1, {'@': 283}), 22: (1, {'@': 283}), 70: (1, {'@': 283}), 32: (1, {'@': 283}), 71: (1, {'@': 283}), 44: (1, {'@': 283}), 2: (1, {'@': 283}), 72: (1, {'@': 283}), 48: (1, {'@': 283}), 43: (1, {'@': 283}), 33: (1, {'@': 283}), 74: (1, {'@': 283}), 75: (1, {'@': 283}), 31: (1, {'@': 283}), 36: (1, {'@': 283}), 77: (1, {'@': 283}), 78: (1, {'@': 283}), 80: (1, {'@': 283}), 50: (1, {'@': 283}), 81: (1, {'@': 283}), 49: (1, {'@': 283}), 28: (1, {'@': 283}), 82: (1, {'@': 283}), 12: (1, {'@': 283})}, 477: {58: (0, 533)}, 478: {0: (1, {'@': 284}), 12: (1, {'@': 284}), 64: (1, {'@': 284}), 76: (0, 184)}, 479: {101: (0, 76), 109: (0, 534), 30: (0, 78), 99: (0, 79), 20: (0, 20), 102: (0, 80), 103: (0, 81), 104: (0, 82), 105: (0, 83), 98: (0, 84), 22: (0, 85), 106: (0, 86), 107: (0, 87), 108: (0, 88), 29: (0, 89), 12: (0, 12), 110: (0, 91), 111: (0, 92), 33: (0, 94), 112: (0, 95), 43: (0, 43), 49: (0, 96), 2: (0, 2), 25: (0, 97), 3: (0, 139), 97: (0, 98), 44: (0, 99), 100: (0, 100), 113: (0, 101), 38: (0, 102), 14: (0, 535)}, 480: {2: (0, 2), 3: (0, 181), 128: (0, 536)}, 481: {12: (1, {'@': 285}), 64: (1, {'@': 285}), 0: (1, {'@': 285})}, 482: {2: (0, 2), 3: (0, 181), 128: (0, 537)}, 483: {12: (1, {'@': 286}), 64: (1, {'@': 286}), 0: (1, {'@': 286})}, 484: {12: (1, {'@': 287}), 64: (1, {'@': 287}), 0: (1, {'@': 287})}, 485: {12: (1, {'@': 288}), 64: (1, {'@': 288}), 0: (1, {'@': 288})}, 486: {63: (0, 538), 64: (0, 539), 143: (0, 540), 14: (0, 541), 12: (0, 12)}, 487: {77: (1, {'@': 289})}, 488: {141: (0, 542), 20: (0, 20), 30: (0, 489), 12: (0, 74)}, 489: {115: (0, 543)}, 490: {12: (1, {'@': 290}), 64: (1, {'@': 290}), 0: (1, {'@': 290})}, 491: {2: (0, 2), 3: (0, 181), 128: (0, 544)}, 492: {61: (1, {'@': 291})}, 493: {61: (1, {'@': 292})}, 494: {112: (0, 95), 101: (0, 76), 43: (0, 43), 25: (0, 97), 2: (0, 2), 44: (0, 99), 3: (0, 197), 105: (0, 83), 111: (0, 92), 103: (0, 81), 104: (0, 82), 108: (0, 545), 22: (0, 142)}, 495: {58: (0, 546)}, 496: {62: (1, {'@': 293}), 77: (1, {'@': 293}), 56: (1, {'@': 293}), 0: (1, {'@': 293}), 76: (0, 184), 12: (1, {'@': 293}), 64: (1, {'@': 293})}, 497: {101: (0, 76), 30: (0, 78), 99: (0, 79), 20: (0, 20), 102: (0, 80), 103: (0, 81), 104: (0, 82), 105: (0, 83), 98: (0, 84), 22: (0, 85), 106: (0, 86), 107: (0, 87), 108: (0, 88), 29: (0, 89), 12: (0, 74), 110: (0, 91), 111: (0, 92), 33: (0, 94), 109: (0, 547), 112: (0, 95), 43: (0, 43), 49: (0, 96), 2: (0, 2), 25: (0, 97), 3: (0, 139), 97: (0, 98), 44: (0, 99), 100: (0, 100), 113: (0, 101), 38: (0, 102)}, 498: {32: (1, {'@': 294}), 55: (1, {'@': 294}), 56: (1, {'@': 294}), 44: (1, {'@': 294}), 72: (1, {'@': 294}), 48: (1, {'@': 294}), 58: (1, {'@': 294}), 59: (1, {'@': 294}), 75: (1, {'@': 294}), 76: (1, {'@': 294}), 61: (1, {'@': 294}), 29: (1, {'@': 294}), 62: (1, {'@': 294}), 63: (1, {'@': 294}), 64: (1, {'@': 294}), 77: (1, {'@': 294}), 0: (1, {'@': 294}), 78: (1, {'@': 294}), 79: (1, {'@': 294}), 80: (1, {'@': 294}), 81: (1, {'@': 294}), 67: (1, {'@': 294}), 82: (1, {'@': 294}), 83: (1, {'@': 294}), 12: (1, {'@': 294}), 70: (1, {'@': 294})}, 499: {77: (0, 548)}, 500: {101: (0, 76), 30: (0, 78), 99: (0, 79), 20: (0, 20), 102: (0, 80), 103: (0, 81), 104: (0, 82), 105: (0, 83), 98: (0, 84), 22: (0, 85), 106: (0, 86), 109: (0, 549), 107: (0, 87), 108: (0, 88), 29: (0, 89), 12: (0, 12), 110: (0, 91), 111: (0, 92), 33: (0, 94), 112: (0, 95), 43: (0, 43), 49: (0, 96), 2: (0, 2), 25: (0, 97), 3: (0, 139), 97: (0, 98), 44: (0, 99), 100: (0, 100), 113: (0, 101), 38: (0, 102), 14: (0, 550)}, 501: {62: (1, {'@': 295}), 77: (1, {'@': 295}), 56: (1, {'@': 295}), 0: (1, {'@': 295}), 76: (0, 184), 12: (1, {'@': 295}), 64: (1, {'@': 295})}, 502: {101: (0, 76), 30: (0, 78), 99: (0, 79), 20: (0, 20), 102: (0, 80), 103: (0, 81), 104: (0, 82), 105: (0, 83), 98: (0, 84), 22: (0, 85), 106: (0, 86), 107: (0, 87), 108: (0, 88), 29: (0, 89), 12: (0, 74), 110: (0, 91), 111: (0, 92), 33: (0, 94), 109: (0, 551), 112: (0, 95), 43: (0, 43), 49: (0, 96), 2: (0, 2), 25: (0, 97), 3: (0, 139), 97: (0, 98), 44: (0, 99), 100: (0, 100), 113: (0, 101), 38: (0, 102)}, 503: {15: (0, 15), 16: (0, 16), 17: (0, 17), 18: (0, 18), 19: (0, 19), 20: (0, 20), 21: (0, 21), 22: (0, 22), 23: (0, 23), 24: (0, 24), 25: (0, 25), 26: (0, 26), 27: (0, 27), 28: (0, 28), 29: (0, 29), 30: (0, 30), 31: (0, 31), 32: (0, 32), 12: (0, 12), 33: (0, 33), 34: (0, 34), 35: (0, 35), 36: (0, 36), 45: (0, 552), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40), 41: (0, 41), 42: (0, 42), 43: (0, 43), 2: (0, 2), 14: (0, 553), 44: (0, 44), 46: (0, 46), 47: (0, 47), 3: (0, 48), 48: (0, 49), 49: (0, 50), 50: (0, 51), 51: (0, 52), 52: (0, 53)}, 504: {15: (0, 15), 16: (0, 16), 17: (0, 17), 18: (0, 18), 19: (0, 19), 20: (0, 20), 21: (0, 21), 22: (0, 22), 23: (0, 23), 24: (0, 24), 25: (0, 25), 26: (0, 26), 27: (0, 27), 28: (0, 28), 29: (0, 29), 45: (0, 554), 30: (0, 30), 31: (0, 31), 32: (0, 32), 12: (0, 74), 33: (0, 33), 34: (0, 34), 35: (0, 35), 36: (0, 36), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40), 41: (0, 41), 42: (0, 42), 43: (0, 43), 2: (0, 2), 44: (0, 44), 46: (0, 46), 47: (0, 47), 3: (0, 48), 48: (0, 49), 49: (0, 50), 50: (0, 51), 51: (0, 52), 52: (0, 53)}, 505: {32: (1, {'@': 296}), 15: (1, {'@': 296}), 38: (1, {'@': 296}), 71: (1, {'@': 296}), 44: (1, {'@': 296}), 2: (1, {'@': 296}), 57: (1, {'@': 296}), 48: (1, {'@': 296}), 43: (1, {'@': 296}), 33: (1, {'@': 296}), 74: (1, {'@': 296}), 58: (1, {'@': 296}), 21: (1, {'@': 296}), 31: (1, {'@': 296}), 36: (1, {'@': 296}), 61: (1, {'@': 296}), 29: (1, {'@': 296}), 62: (1, {'@': 296}), 63: (1, {'@': 296}), 47: (1, {'@': 296}), 34: (1, {'@': 296}), 77: (1, {'@': 296}), 20: (1, {'@': 296}), 50: (1, {'@': 296}), 66: (1, {'@': 296}), 65: (1, {'@': 296}), 49: (1, {'@': 296}), 28: (1, {'@': 296}), 12: (1, {'@': 296}), 22: (1, {'@': 296})}, 506: {32: (1, {'@': 297}), 15: (1, {'@': 297}), 38: (1, {'@': 297}), 71: (1, {'@': 297}), 44: (1, {'@': 297}), 2: (1, {'@': 297}), 57: (1, {'@': 297}), 48: (1, {'@': 297}), 43: (1, {'@': 297}), 33: (1, {'@': 297}), 74: (1, {'@': 297}), 58: (1, {'@': 297}), 21: (1, {'@': 297}), 31: (1, {'@': 297}), 36: (1, {'@': 297}), 61: (1, {'@': 297}), 29: (1, {'@': 297}), 62: (1, {'@': 297}), 63: (1, {'@': 297}), 47: (1, {'@': 297}), 34: (1, {'@': 297}), 77: (1, {'@': 297}), 20: (1, {'@': 297}), 50: (1, {'@': 297}), 66: (1, {'@': 297}), 65: (1, {'@': 297}), 49: (1, {'@': 297}), 28: (1, {'@': 297}), 12: (1, {'@': 297}), 22: (1, {'@': 297})}, 507: {15: (0, 15), 16: (0, 16), 17: (0, 17), 18: (0, 18), 19: (0, 19), 20: (0, 20), 21: (0, 21), 22: (0, 22), 23: (0, 23), 24: (0, 24), 25: (0, 25), 26: (0, 26), 27: (0, 27), 28: (0, 28), 29: (0, 29), 30: (0, 30), 31: (0, 31), 45: (0, 555), 32: (0, 32), 12: (0, 74), 33: (0, 33), 34: (0, 34), 35: (0, 35), 36: (0, 36), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40), 41: (0, 41), 42: (0, 42), 43: (0, 43), 2: (0, 2), 44: (0, 44), 46: (0, 46), 47: (0, 47), 3: (0, 48), 48: (0, 49), 49: (0, 50), 50: (0, 51), 51: (0, 52), 52: (0, 53)}, 508: {32: (1, {'@': 298}), 15: (1, {'@': 298}), 38: (1, {'@': 298}), 71: (1, {'@': 298}), 44: (1, {'@': 298}), 2: (1, {'@': 298}), 57: (1, {'@': 298}), 48: (1, {'@': 298}), 43: (1, {'@': 298}), 33: (1, {'@': 298}), 74: (1, {'@': 298}), 58: (1, {'@': 298}), 21: (1, {'@': 298}), 31: (1, {'@': 298}), 36: (1, {'@': 298}), 61: (1, {'@': 298}), 29: (1, {'@': 298}), 62: (1, {'@': 298}), 63: (1, {'@': 298}), 47: (1, {'@': 298}), 34: (1, {'@': 298}), 77: (1, {'@': 298}), 20: (1, {'@': 298}), 50: (1, {'@': 298}), 66: (1, {'@': 298}), 65: (1, {'@': 298}), 49: (1, {'@': 298}), 28: (1, {'@': 298}), 12: (1, {'@': 298}), 22: (1, {'@': 298})}, 509: {15: (0, 15), 16: (0, 16), 17: (0, 17), 18: (0, 18), 19: (0, 19), 20: (0, 20), 21: (0, 21), 22: (0, 22), 23: (0, 23), 24: (0, 24), 25: (0, 25), 26: (0, 26), 27: (0, 27), 28: (0, 28), 29: (0, 29), 30: (0, 30), 31: (0, 31), 32: (0, 32), 12: (0, 74), 33: (0, 33), 34: (0, 34), 35: (0, 35), 36: (0, 36), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40), 41: (0, 41), 42: (0, 42), 43: (0, 43), 2: (0, 2), 45: (0, 556), 44: (0, 44), 46: (0, 46), 47: (0, 47), 3: (0, 48), 48: (0, 49), 49: (0, 50), 50: (0, 51), 51: (0, 52), 52: (0, 53)}, 510: {32: (1, {'@': 299}), 15: (1, {'@': 299}), 38: (1, {'@': 299}), 71: (1, {'@': 299}), 44: (1, {'@': 299}), 2: (1, {'@': 299}), 57: (1, {'@': 299}), 48: (1, {'@': 299}), 43: (1, {'@': 299}), 33: (1, {'@': 299}), 74: (1, {'@': 299}), 58: (1, {'@': 299}), 21: (1, {'@': 299}), 31: (1, {'@': 299}), 36: (1, {'@': 299}), 61: (1, {'@': 299}), 29: (1, {'@': 299}), 62: (1, {'@': 299}), 63: (1, {'@': 299}), 47: (1, {'@': 299}), 34: (1, {'@': 299}), 77: (1, {'@': 299}), 20: (1, {'@': 299}), 50: (1, {'@': 299}), 66: (1, {'@': 299}), 65: (1, {'@': 299}), 49: (1, {'@': 299}), 28: (1, {'@': 299}), 12: (1, {'@': 299}), 22: (1, {'@': 299})}, 511: {32: (1, {'@': 300}), 15: (1, {'@': 300}), 38: (1, {'@': 300}), 71: (1, {'@': 300}), 44: (1, {'@': 300}), 2: (1, {'@': 300}), 57: (1, {'@': 300}), 48: (1, {'@': 300}), 43: (1, {'@': 300}), 33: (1, {'@': 300}), 74: (1, {'@': 300}), 58: (1, {'@': 300}), 21: (1, {'@': 300}), 31: (1, {'@': 300}), 36: (1, {'@': 300}), 61: (1, {'@': 300}), 29: (1, {'@': 300}), 62: (1, {'@': 300}), 63: (1, {'@': 300}), 47: (1, {'@': 300}), 34: (1, {'@': 300}), 77: (1, {'@': 300}), 20: (1, {'@': 300}), 50: (1, {'@': 300}), 66: (1, {'@': 300}), 65: (1, {'@': 300}), 49: (1, {'@': 300}), 28: (1, {'@': 300}), 12: (1, {'@': 300}), 22: (1, {'@': 300})}, 512: {15: (0, 15), 16: (0, 16), 17: (0, 17), 18: (0, 18), 19: (0, 19), 20: (0, 20), 21: (0, 21), 22: (0, 22), 23: (0, 23), 24: (0, 24), 25: (0, 25), 26: (0, 26), 27: (0, 27), 28: (0, 28), 29: (0, 29), 30: (0, 30), 31: (0, 31), 32: (0, 32), 12: (0, 12), 14: (0, 557), 33: (0, 33), 34: (0, 34), 35: (0, 35), 36: (0, 36), 37: (0, 37), 38: (0, 38), 39: (0, 39), 45: (0, 558), 40: (0, 40), 41: (0, 41), 42: (0, 42), 43: (0, 43), 2: (0, 2), 44: (0, 44), 46: (0, 46), 47: (0, 47), 3: (0, 48), 48: (0, 49), 49: (0, 50), 50: (0, 51), 51: (0, 52), 52: (0, 53)}, 513: {32: (1, {'@': 301}), 15: (1, {'@': 301}), 38: (1, {'@': 301}), 71: (1, {'@': 301}), 44: (1, {'@': 301}), 2: (1, {'@': 301}), 57: (1, {'@': 301}), 48: (1, {'@': 301}), 43: (1, {'@': 301}), 33: (1, {'@': 301}), 74: (1, {'@': 301}), 58: (1, {'@': 301}), 21: (1, {'@': 301}), 31: (1, {'@': 301}), 36: (1, {'@': 301}), 61: (1, {'@': 301}), 29: (1, {'@': 301}), 62: (1, {'@': 301}), 63: (1, {'@': 301}), 47: (1, {'@': 301}), 34: (1, {'@': 301}), 77: (1, {'@': 301}), 20: (1, {'@': 301}), 50: (1, {'@': 301}), 66: (1, {'@': 301}), 65: (1, {'@': 301}), 49: (1, {'@': 301}), 28: (1, {'@': 301}), 12: (1, {'@': 301}), 22: (1, {'@': 301})}, 514: {15: (0, 15), 16: (0, 16), 17: (0, 17), 18: (0, 18), 19: (0, 19), 20: (0, 20), 21: (0, 21), 22: (0, 22), 23: (0, 23), 24: (0, 24), 25: (0, 25), 26: (0, 26), 27: (0, 27), 28: (0, 28), 29: (0, 29), 30: (0, 30), 31: (0, 31), 45: (0, 559), 32: (0, 32), 12: (0, 74), 33: (0, 33), 34: (0, 34), 35: (0, 35), 36: (0, 36), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40), 41: (0, 41), 42: (0, 42), 43: (0, 43), 2: (0, 2), 44: (0, 44), 46: (0, 46), 47: (0, 47), 3: (0, 48), 48: (0, 49), 49: (0, 50), 50: (0, 51), 51: (0, 52), 52: (0, 53)}, 515: {32: (1, {'@': 302}), 15: (1, {'@': 302}), 38: (1, {'@': 302}), 71: (1, {'@': 302}), 44: (1, {'@': 302}), 2: (1, {'@': 302}), 57: (1, {'@': 302}), 48: (1, {'@': 302}), 43: (1, {'@': 302}), 33: (1, {'@': 302}), 74: (1, {'@': 302}), 58: (1, {'@': 302}), 21: (1, {'@': 302}), 31: (1, {'@': 302}), 36: (1, {'@': 302}), 61: (1, {'@': 302}), 29: (1, {'@': 302}), 62: (1, {'@': 302}), 63: (1, {'@': 302}), 47: (1, {'@': 302}), 34: (1, {'@': 302}), 77: (1, {'@': 302}), 20: (1, {'@': 302}), 50: (1, {'@': 302}), 66: (1, {'@': 302}), 65: (1, {'@': 302}), 49: (1, {'@': 302}), 28: (1, {'@': 302}), 12: (1, {'@': 302}), 22: (1, {'@': 302})}, 516: {15: (0, 15), 16: (0, 16), 17: (0, 17), 18: (0, 18), 19: (0, 19), 20: (0, 20), 21: (0, 21), 22: (0, 22), 23: (0, 23), 24: (0, 24), 25: (0, 25), 26: (0, 26), 27: (0, 27), 28: (0, 28), 29: (0, 29), 30: (0, 30), 45: (0, 560), 31: (0, 31), 32: (0, 32), 12: (0, 74), 33: (0, 33), 34: (0, 34), 35: (0, 35), 36: (0, 36), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40), 41: (0, 41), 42: (0, 42), 43: (0, 43), 2: (0, 2), 44: (0, 44), 46: (0, 46), 47: (0, 47), 3: (0, 48), 48: (0, 49), 49: (0, 50), 50: (0, 51), 51: (0, 52), 52: (0, 53)}, 517: {15: (0, 15), 16: (0, 16), 17: (0, 17), 18: (0, 18), 19: (0, 19), 20: (0, 20), 21: (0, 21), 22: (0, 22), 23: (0, 23), 24: (0, 24), 25: (0, 25), 26: (0, 26), 27: (0, 27), 28: (0, 28), 29: (0, 29), 30: (0, 30), 31: (0, 31), 32: (0, 32), 12: (0, 12), 33: (0, 33), 14: (0, 561), 34: (0, 34), 35: (0, 35), 36: (0, 36), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40), 41: (0, 41), 42: (0, 42), 43: (0, 43), 2: (0, 2), 44: (0, 44), 46: (0, 46), 47: (0, 47), 3: (0, 48), 48: (0, 49), 49: (0, 50), 50: (0, 51), 51: (0, 52), 45: (0, 562), 52: (0, 53)}, 518: {32: (1, {'@': 303}), 15: (1, {'@': 303}), 38: (1, {'@': 303}), 71: (1, {'@': 303}), 44: (1, {'@': 303}), 2: (1, {'@': 303}), 57: (1, {'@': 303}), 48: (1, {'@': 303}), 43: (1, {'@': 303}), 33: (1, {'@': 303}), 74: (1, {'@': 303}), 58: (1, {'@': 303}), 21: (1, {'@': 303}), 31: (1, {'@': 303}), 36: (1, {'@': 303}), 61: (1, {'@': 303}), 29: (1, {'@': 303}), 62: (1, {'@': 303}), 63: (1, {'@': 303}), 47: (1, {'@': 303}), 34: (1, {'@': 303}), 77: (1, {'@': 303}), 20: (1, {'@': 303}), 50: (1, {'@': 303}), 66: (1, {'@': 303}), 65: (1, {'@': 303}), 49: (1, {'@': 303}), 28: (1, {'@': 303}), 12: (1, {'@': 303}), 22: (1, {'@': 303})}, 519: {15: (0, 15), 16: (0, 16), 17: (0, 17), 18: (0, 18), 19: (0, 19), 20: (0, 20), 21: (0, 21), 22: (0, 22), 23: (0, 23), 24: (0, 24), 25: (0, 25), 26: (0, 26), 27: (0, 27), 28: (0, 28), 29: (0, 29), 30: (0, 30), 31: (0, 31), 32: (0, 32), 12: (0, 74), 33: (0, 33), 34: (0, 34), 35: (0, 35), 36: (0, 36), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40), 41: (0, 41), 42: (0, 42), 43: (0, 43), 2: (0, 2), 44: (0, 44), 46: (0, 46), 47: (0, 47), 3: (0, 48), 48: (0, 49), 45: (0, 563), 49: (0, 50), 50: (0, 51), 51: (0, 52), 52: (0, 53)}, 520: {32: (1, {'@': 304}), 15: (1, {'@': 304}), 38: (1, {'@': 304}), 71: (1, {'@': 304}), 44: (1, {'@': 304}), 2: (1, {'@': 304}), 57: (1, {'@': 304}), 48: (1, {'@': 304}), 43: (1, {'@': 304}), 33: (1, {'@': 304}), 74: (1, {'@': 304}), 58: (1, {'@': 304}), 21: (1, {'@': 304}), 31: (1, {'@': 304}), 36: (1, {'@': 304}), 61: (1, {'@': 304}), 29: (1, {'@': 304}), 62: (1, {'@': 304}), 63: (1, {'@': 304}), 47: (1, {'@': 304}), 34: (1, {'@': 304}), 77: (1, {'@': 304}), 20: (1, {'@': 304}), 50: (1, {'@': 304}), 66: (1, {'@': 304}), 65: (1, {'@': 304}), 49: (1, {'@': 304}), 28: (1, {'@': 304}), 12: (1, {'@': 304}), 22: (1, {'@': 304})}, 521: {32: (1, {'@': 305}), 15: (1, {'@': 305}), 38: (1, {'@': 305}), 71: (1, {'@': 305}), 44: (1, {'@': 305}), 2: (1, {'@': 305}), 57: (1, {'@': 305}), 48: (1, {'@': 305}), 43: (1, {'@': 305}), 33: (1, {'@': 305}), 74: (1, {'@': 305}), 58: (1, {'@': 305}), 21: (1, {'@': 305}), 31: (1, {'@': 305}), 36: (1, {'@': 305}), 61: (1, {'@': 305}), 29: (1, {'@': 305}), 62: (1, {'@': 305}), 63: (1, {'@': 305}), 47: (1, {'@': 305}), 34: (1, {'@': 305}), 77: (1, {'@': 305}), 20: (1, {'@': 305}), 50: (1, {'@': 305}), 66: (1, {'@': 305}), 65: (1, {'@': 305}), 49: (1, {'@': 305}), 28: (1, {'@': 305}), 12: (0, 74), 22: (1, {'@': 305})}, 522: {15: (0, 15), 16: (0, 16), 17: (0, 17), 18: (0, 18), 20: (0, 20), 21: (0, 21), 22: (0, 22), 23: (0, 23), 24: (0, 24), 25: (0, 25), 26: (0, 26), 27: (0, 27), 28: (0, 28), 29: (0, 29), 19: (0, 19), 30: (0, 30), 31: (0, 31), 32: (0, 32), 12: (0, 74), 33: (0, 33), 45: (0, 564), 34: (0, 34), 35: (0, 35), 36: (0, 36), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40), 41: (0, 41), 42: (0, 42), 43: (0, 43), 2: (0, 2), 52: (0, 53), 44: (0, 44), 46: (0, 46), 47: (0, 47), 3: (0, 48), 48: (0, 49), 49: (0, 50), 50: (0, 51), 51: (0, 52)}, 523: {71: (1, {'@': 306}), 12: (0, 12), 65: (1, {'@': 306}), 14: (0, 565)}, 524: {77: (1, {'@': 307}), 63: (1, {'@': 307}), 58: (1, {'@': 307}), 60: (0, 469), 69: (1, {'@': 307})}, 525: {77: (1, {'@': 308}), 63: (1, {'@': 308}), 58: (1, {'@': 308}), 60: (1, {'@': 308}), 69: (1, {'@': 308})}, 526: {63: (0, 566), 60: (0, 469), 77: (0, 567)}, 527: {2: (1, {'@': 309}), 36: (1, {'@': 309}), 77: (1, {'@': 309}), 20: (1, {'@': 309}), 43: (1, {'@': 309}), 22: (1, {'@': 309})}, 528: {58: (0, 568), 63: (0, 569)}, 529: {138: (0, 570), 36: (0, 409), 30: (0, 406), 43: (0, 43), 3: (0, 410), 2: (0, 2), 20: (0, 20), 25: (0, 411), 22: (0, 408)}, 530: {77: (1, {'@': 310}), 63: (1, {'@': 310}), 58: (1, {'@': 310}), 60: (1, {'@': 310}), 69: (1, {'@': 310})}, 531: {32: (1, {'@': 311}), 15: (1, {'@': 311}), 38: (1, {'@': 311}), 71: (1, {'@': 311}), 44: (1, {'@': 311}), 2: (1, {'@': 311}), 57: (1, {'@': 311}), 48: (1, {'@': 311}), 43: (1, {'@': 311}), 33: (1, {'@': 311}), 74: (1, {'@': 311}), 58: (1, {'@': 311}), 21: (1, {'@': 311}), 31: (1, {'@': 311}), 36: (1, {'@': 311}), 61: (1, {'@': 311}), 29: (1, {'@': 311}), 62: (1, {'@': 311}), 63: (1, {'@': 311}), 47: (1, {'@': 311}), 34: (1, {'@': 311}), 77: (1, {'@': 311}), 20: (1, {'@': 311}), 50: (1, {'@': 311}), 66: (1, {'@': 311}), 65: (1, {'@': 311}), 49: (1, {'@': 311}), 28: (1, {'@': 311}), 12: (0, 12), 22: (1, {'@': 311}), 14: (0, 571)}, 532: {32: (1, {'@': 312}), 15: (1, {'@': 312}), 38: (1, {'@': 312}), 71: (1, {'@': 312}), 44: (1, {'@': 312}), 2: (1, {'@': 312}), 57: (1, {'@': 312}), 48: (1, {'@': 312}), 43: (1, {'@': 312}), 33: (1, {'@': 312}), 74: (1, {'@': 312}), 58: (1, {'@': 312}), 21: (1, {'@': 312}), 31: (1, {'@': 312}), 36: (1, {'@': 312}), 61: (1, {'@': 312}), 29: (1, {'@': 312}), 62: (1, {'@': 312}), 63: (1, {'@': 312}), 47: (1, {'@': 312}), 34: (1, {'@': 312}), 77: (1, {'@': 312}), 20: (1, {'@': 312}), 50: (1, {'@': 312}), 66: (1, {'@': 312}), 65: (1, {'@': 312}), 49: (1, {'@': 312}), 28: (1, {'@': 312}), 12: (0, 74), 22: (1, {'@': 312})}, 533: {53: (1, {'@': 313}), 54: (1, {'@': 313}), 15: (1, {'@': 313}), 55: (1, {'@': 313}), 38: (1, {'@': 313}), 57: (1, {'@': 313}), 58: (1, {'@': 313}), 21: (1, {'@': 313}), 59: (1, {'@': 313}), 60: (1, {'@': 313}), 61: (1, {'@': 313}), 29: (1, {'@': 313}), 62: (1, {'@': 313}), 63: (1, {'@': 313}), 47: (1, {'@': 313}), 34: (1, {'@': 313}), 20: (1, {'@': 313}), 65: (1, {'@': 313}), 66: (1, {'@': 313}), 69: (1, {'@': 313}), 22: (1, {'@': 313}), 70: (1, {'@': 313}), 32: (1, {'@': 313}), 71: (1, {'@': 313}), 44: (1, {'@': 313}), 2: (1, {'@': 313}), 72: (1, {'@': 313}), 48: (1, {'@': 313}), 43: (1, {'@': 313}), 33: (1, {'@': 313}), 74: (1, {'@': 313}), 75: (1, {'@': 313}), 31: (1, {'@': 313}), 36: (1, {'@': 313}), 77: (1, {'@': 313}), 78: (1, {'@': 313}), 80: (1, {'@': 313}), 50: (1, {'@': 313}), 81: (1, {'@': 313}), 49: (1, {'@': 313}), 28: (1, {'@': 313}), 82: (1, {'@': 313}), 12: (1, {'@': 313})}, 534: {0: (1, {'@': 314}), 12: (1, {'@': 314}), 64: (1, {'@': 314}), 76: (0, 184)}, 535: {101: (0, 76), 30: (0, 78), 99: (0, 79), 20: (0, 20), 102: (0, 80), 103: (0, 81), 104: (0, 82), 105: (0, 83), 109: (0, 572), 98: (0, 84), 22: (0, 85), 106: (0, 86), 107: (0, 87), 108: (0, 88), 29: (0, 89), 12: (0, 74), 110: (0, 91), 111: (0, 92), 33: (0, 94), 112: (0, 95), 43: (0, 43), 49: (0, 96), 2: (0, 2), 25: (0, 97), 3: (0, 139), 97: (0, 98), 44: (0, 99), 100: (0, 100), 113: (0, 101), 38: (0, 102)}, 536: {77: (0, 573)}, 537: {77: (0, 574)}, 538: {12: (0, 12), 14: (0, 575), 20: (0, 20), 141: (0, 576), 30: (0, 489)}, 539: {77: (1, {'@': 315})}, 540: {63: (0, 577), 64: (0, 578)}, 541: {63: (0, 538), 143: (0, 579), 64: (0, 580), 12: (0, 74)}, 542: {143: (0, 581), 63: (0, 538), 64: (0, 582), 12: (0, 12), 14: (0, 583)}, 543: {3: (0, 584), 2: (0, 2)}, 544: {77: (0, 585)}, 545: {58: (0, 586)}, 546: {62: (1, {'@': 316}), 63: (1, {'@': 316}), 32: (1, {'@': 316}), 64: (1, {'@': 316}), 55: (1, {'@': 316}), 77: (1, {'@': 316}), 56: (1, {'@': 316}), 0: (1, {'@': 316}), 70: (1, {'@': 316}), 79: (1, {'@': 316}), 48: (1, {'@': 316}), 80: (1, {'@': 316}), 67: (1, {'@': 316}), 82: (1, {'@': 316}), 59: (1, {'@': 316}), 75: (1, {'@': 316}), 76: (1, {'@': 316}), 12: (1, {'@': 316}), 29: (1, {'@': 316})}, 547: {62: (1, {'@': 317}), 77: (1, {'@': 317}), 56: (1, {'@': 317}), 0: (1, {'@': 317}), 76: (0, 184), 12: (1, {'@': 317}), 64: (1, {'@': 317})}, 548: {77: (1, {'@': 318}), 63: (1, {'@': 318}), 61: (1, {'@': 318})}, 549: {62: (1, {'@': 319}), 77: (1, {'@': 319}), 56: (1, {'@': 319}), 0: (1, {'@': 319}), 76: (0, 184), 12: (1, {'@': 319}), 64: (1, {'@': 319})}, 550: {101: (0, 76), 30: (0, 78), 99: (0, 79), 20: (0, 20), 102: (0, 80), 103: (0, 81), 104: (0, 82), 105: (0, 83), 98: (0, 84), 22: (0, 85), 106: (0, 86), 107: (0, 87), 108: (0, 88), 29: (0, 89), 12: (0, 74), 110: (0, 91), 109: (0, 587), 111: (0, 92), 33: (0, 94), 112: (0, 95), 43: (0, 43), 49: (0, 96), 2: (0, 2), 25: (0, 97), 3: (0, 139), 97: (0, 98), 44: (0, 99), 100: (0, 100), 113: (0, 101), 38: (0, 102)}, 551: {62: (1, {'@': 320}), 77: (1, {'@': 320}), 56: (1, {'@': 320}), 0: (1, {'@': 320}), 76: (0, 184), 12: (1, {'@': 320}), 64: (1, {'@': 320})}, 552: {32: (1, {'@': 321}), 15: (1, {'@': 321}), 38: (1, {'@': 321}), 71: (1, {'@': 321}), 44: (1, {'@': 321}), 2: (1, {'@': 321}), 57: (1, {'@': 321}), 48: (1, {'@': 321}), 43: (1, {'@': 321}), 33: (1, {'@': 321}), 74: (1, {'@': 321}), 58: (1, {'@': 321}), 21: (1, {'@': 321}), 31: (1, {'@': 321}), 36: (1, {'@': 321}), 61: (1, {'@': 321}), 29: (1, {'@': 321}), 62: (1, {'@': 321}), 63: (1, {'@': 321}), 47: (1, {'@': 321}), 34: (1, {'@': 321}), 77: (1, {'@': 321}), 20: (1, {'@': 321}), 50: (1, {'@': 321}), 66: (1, {'@': 321}), 65: (1, {'@': 321}), 49: (1, {'@': 321}), 28: (1, {'@': 321}), 12: (1, {'@': 321}), 22: (1, {'@': 321})}, 553: {15: (0, 15), 16: (0, 16), 17: (0, 17), 18: (0, 18), 19: (0, 19), 20: (0, 20), 21: (0, 21), 22: (0, 22), 23: (0, 23), 24: (0, 24), 25: (0, 25), 26: (0, 26), 27: (0, 27), 28: (0, 28), 29: (0, 29), 30: (0, 30), 31: (0, 31), 32: (0, 32), 12: (0, 74), 33: (0, 33), 34: (0, 34), 35: (0, 35), 36: (0, 36), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40), 41: (0, 41), 42: (0, 42), 43: (0, 43), 2: (0, 2), 44: (0, 44), 45: (0, 588), 46: (0, 46), 47: (0, 47), 3: (0, 48), 48: (0, 49), 49: (0, 50), 50: (0, 51), 51: (0, 52), 52: (0, 53)}, 554: {32: (1, {'@': 322}), 15: (1, {'@': 322}), 38: (1, {'@': 322}), 71: (1, {'@': 322}), 44: (1, {'@': 322}), 2: (1, {'@': 322}), 57: (1, {'@': 322}), 48: (1, {'@': 322}), 43: (1, {'@': 322}), 33: (1, {'@': 322}), 74: (1, {'@': 322}), 58: (1, {'@': 322}), 21: (1, {'@': 322}), 31: (1, {'@': 322}), 36: (1, {'@': 322}), 61: (1, {'@': 322}), 29: (1, {'@': 322}), 62: (1, {'@': 322}), 63: (1, {'@': 322}), 47: (1, {'@': 322}), 34: (1, {'@': 322}), 77: (1, {'@': 322}), 20: (1, {'@': 322}), 50: (1, {'@': 322}), 66: (1, {'@': 322}), 65: (1, {'@': 322}), 49: (1, {'@': 322}), 28: (1, {'@': 322}), 12: (1, {'@': 322}), 22: (1, {'@': 322})}, 555: {32: (1, {'@': 323}), 15: (1, {'@': 323}), 38: (1, {'@': 323}), 71: (1, {'@': 323}), 44: (1, {'@': 323}), 2: (1, {'@': 323}), 57: (1, {'@': 323}), 48: (1, {'@': 323}), 43: (1, {'@': 323}), 33: (1, {'@': 323}), 74: (1, {'@': 323}), 58: (1, {'@': 323}), 21: (1, {'@': 323}), 31: (1, {'@': 323}), 36: (1, {'@': 323}), 61: (1, {'@': 323}), 29: (1, {'@': 323}), 62: (1, {'@': 323}), 63: (1, {'@': 323}), 47: (1, {'@': 323}), 34: (1, {'@': 323}), 77: (1, {'@': 323}), 20: (1, {'@': 323}), 50: (1, {'@': 323}), 66: (1, {'@': 323}), 65: (1, {'@': 323}), 49: (1, {'@': 323}), 28: (1, {'@': 323}), 12: (1, {'@': 323}), 22: (1, {'@': 323})}, 556: {32: (1, {'@': 324}), 15: (1, {'@': 324}), 38: (1, {'@': 324}), 71: (1, {'@': 324}), 44: (1, {'@': 324}), 2: (1, {'@': 324}), 57: (1, {'@': 324}), 48: (1, {'@': 324}), 43: (1, {'@': 324}), 33: (1, {'@': 324}), 74: (1, {'@': 324}), 58: (1, {'@': 324}), 21: (1, {'@': 324}), 31: (1, {'@': 324}), 36: (1, {'@': 324}), 61: (1, {'@': 324}), 29: (1, {'@': 324}), 62: (1, {'@': 324}), 63: (1, {'@': 324}), 47: (1, {'@': 324}), 34: (1, {'@': 324}), 77: (1, {'@': 324}), 20: (1, {'@': 324}), 50: (1, {'@': 324}), 66: (1, {'@': 324}), 65: (1, {'@': 324}), 49: (1, {'@': 324}), 28: (1, {'@': 324}), 12: (1, {'@': 324}), 22: (1, {'@': 324})}, 557: {15: (0, 15), 16: (0, 16), 17: (0, 17), 18: (0, 18), 19: (0, 19), 20: (0, 20), 21: (0, 21), 22: (0, 22), 23: (0, 23), 24: (0, 24), 25: (0, 25), 26: (0, 26), 27: (0, 27), 28: (0, 28), 29: (0, 29), 30: (0, 30), 31: (0, 31), 32: (0, 32), 12: (0, 74), 33: (0, 33), 34: (0, 34), 35: (0, 35), 36: (0, 36), 45: (0, 589), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40), 41: (0, 41), 42: (0, 42), 43: (0, 43), 2: (0, 2), 44: (0, 44), 46: (0, 46), 47: (0, 47), 3: (0, 48), 48: (0, 49), 49: (0, 50), 50: (0, 51), 51: (0, 52), 52: (0, 53)}, 558: {32: (1, {'@': 325}), 15: (1, {'@': 325}), 38: (1, {'@': 325}), 71: (1, {'@': 325}), 44: (1, {'@': 325}), 2: (1, {'@': 325}), 57: (1, {'@': 325}), 48: (1, {'@': 325}), 43: (1, {'@': 325}), 33: (1, {'@': 325}), 74: (1, {'@': 325}), 58: (1, {'@': 325}), 21: (1, {'@': 325}), 31: (1, {'@': 325}), 36: (1, {'@': 325}), 61: (1, {'@': 325}), 29: (1, {'@': 325}), 62: (1, {'@': 325}), 63: (1, {'@': 325}), 47: (1, {'@': 325}), 34: (1, {'@': 325}), 77: (1, {'@': 325}), 20: (1, {'@': 325}), 50: (1, {'@': 325}), 66: (1, {'@': 325}), 65: (1, {'@': 325}), 49: (1, {'@': 325}), 28: (1, {'@': 325}), 12: (1, {'@': 325}), 22: (1, {'@': 325})}, 559: {32: (1, {'@': 326}), 15: (1, {'@': 326}), 38: (1, {'@': 326}), 71: (1, {'@': 326}), 44: (1, {'@': 326}), 2: (1, {'@': 326}), 57: (1, {'@': 326}), 48: (1, {'@': 326}), 43: (1, {'@': 326}), 33: (1, {'@': 326}), 74: (1, {'@': 326}), 58: (1, {'@': 326}), 21: (1, {'@': 326}), 31: (1, {'@': 326}), 36: (1, {'@': 326}), 61: (1, {'@': 326}), 29: (1, {'@': 326}), 62: (1, {'@': 326}), 63: (1, {'@': 326}), 47: (1, {'@': 326}), 34: (1, {'@': 326}), 77: (1, {'@': 326}), 20: (1, {'@': 326}), 50: (1, {'@': 326}), 66: (1, {'@': 326}), 65: (1, {'@': 326}), 49: (1, {'@': 326}), 28: (1, {'@': 326}), 12: (1, {'@': 326}), 22: (1, {'@': 326})}, 560: {32: (1, {'@': 327}), 15: (1, {'@': 327}), 38: (1, {'@': 327}), 71: (1, {'@': 327}), 44: (1, {'@': 327}), 2: (1, {'@': 327}), 57: (1, {'@': 327}), 48: (1, {'@': 327}), 43: (1, {'@': 327}), 33: (1, {'@': 327}), 74: (1, {'@': 327}), 58: (1, {'@': 327}), 21: (1, {'@': 327}), 31: (1, {'@': 327}), 36: (1, {'@': 327}), 61: (1, {'@': 327}), 29: (1, {'@': 327}), 62: (1, {'@': 327}), 63: (1, {'@': 327}), 47: (1, {'@': 327}), 34: (1, {'@': 327}), 77: (1, {'@': 327}), 20: (1, {'@': 327}), 50: (1, {'@': 327}), 66: (1, {'@': 327}), 65: (1, {'@': 327}), 49: (1, {'@': 327}), 28: (1, {'@': 327}), 12: (1, {'@': 327}), 22: (1, {'@': 327})}, 561: {15: (0, 15), 16: (0, 16), 17: (0, 17), 18: (0, 18), 19: (0, 19), 20: (0, 20), 21: (0, 21), 22: (0, 22), 23: (0, 23), 24: (0, 24), 25: (0, 25), 26: (0, 26), 27: (0, 27), 28: (0, 28), 29: (0, 29), 30: (0, 30), 31: (0, 31), 32: (0, 32), 12: (0, 74), 33: (0, 33), 34: (0, 34), 35: (0, 35), 36: (0, 36), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40), 41: (0, 41), 42: (0, 42), 43: (0, 43), 2: (0, 2), 44: (0, 44), 45: (0, 590), 46: (0, 46), 47: (0, 47), 3: (0, 48), 48: (0, 49), 49: (0, 50), 50: (0, 51), 51: (0, 52), 52: (0, 53)}, 562: {32: (1, {'@': 328}), 15: (1, {'@': 328}), 38: (1, {'@': 328}), 71: (1, {'@': 328}), 44: (1, {'@': 328}), 2: (1, {'@': 328}), 57: (1, {'@': 328}), 48: (1, {'@': 328}), 43: (1, {'@': 328}), 33: (1, {'@': 328}), 74: (1, {'@': 328}), 58: (1, {'@': 328}), 21: (1, {'@': 328}), 31: (1, {'@': 328}), 36: (1, {'@': 328}), 61: (1, {'@': 328}), 29: (1, {'@': 328}), 62: (1, {'@': 328}), 63: (1, {'@': 328}), 47: (1, {'@': 328}), 34: (1, {'@': 328}), 77: (1, {'@': 328}), 20: (1, {'@': 328}), 50: (1, {'@': 328}), 66: (1, {'@': 328}), 65: (1, {'@': 328}), 49: (1, {'@': 328}), 28: (1, {'@': 328}), 12: (1, {'@': 328}), 22: (1, {'@': 328})}, 563: {32: (1, {'@': 329}), 15: (1, {'@': 329}), 38: (1, {'@': 329}), 71: (1, {'@': 329}), 44: (1, {'@': 329}), 2: (1, {'@': 329}), 57: (1, {'@': 329}), 48: (1, {'@': 329}), 43: (1, {'@': 329}), 33: (1, {'@': 329}), 74: (1, {'@': 329}), 58: (1, {'@': 329}), 21: (1, {'@': 329}), 31: (1, {'@': 329}), 36: (1, {'@': 329}), 61: (1, {'@': 329}), 29: (1, {'@': 329}), 62: (1, {'@': 329}), 63: (1, {'@': 329}), 47: (1, {'@': 329}), 34: (1, {'@': 329}), 77: (1, {'@': 329}), 20: (1, {'@': 329}), 50: (1, {'@': 329}), 66: (1, {'@': 329}), 65: (1, {'@': 329}), 49: (1, {'@': 329}), 28: (1, {'@': 329}), 12: (1, {'@': 329}), 22: (1, {'@': 329})}, 564: {71: (1, {'@': 330}), 12: (0, 12), 65: (1, {'@': 330}), 14: (0, 591)}, 565: {71: (1, {'@': 331}), 12: (0, 74), 65: (1, {'@': 331})}, 566: {2: (1, {'@': 332}), 36: (1, {'@': 332}), 77: (1, {'@': 332}), 20: (1, {'@': 332}), 43: (1, {'@': 332}), 22: (1, {'@': 332})}, 567: {77: (1, {'@': 333}), 63: (1, {'@': 333}), 58: (1, {'@': 333}), 60: (1, {'@': 333}), 69: (1, {'@': 333})}, 568: {77: (1, {'@': 334}), 63: (1, {'@': 334}), 58: (1, {'@': 334}), 60: (1, {'@': 334}), 69: (1, {'@': 334})}, 569: {36: (0, 409), 30: (0, 406), 43: (0, 43), 3: (0, 410), 2: (0, 2), 138: (0, 592), 20: (0, 20), 25: (0, 411), 22: (0, 408)}, 570: {63: (1, {'@': 335}), 58: (1, {'@': 335}), 60: (0, 469)}, 571: {32: (1, {'@': 336}), 15: (1, {'@': 336}), 38: (1, {'@': 336}), 71: (1, {'@': 336}), 44: (1, {'@': 336}), 2: (1, {'@': 336}), 57: (1, {'@': 336}), 48: (1, {'@': 336}), 43: (1, {'@': 336}), 33: (1, {'@': 336}), 74: (1, {'@': 336}), 58: (1, {'@': 336}), 21: (1, {'@': 336}), 31: (1, {'@': 336}), 36: (1, {'@': 336}), 61: (1, {'@': 336}), 29: (1, {'@': 336}), 62: (1, {'@': 336}), 63: (1, {'@': 336}), 47: (1, {'@': 336}), 34: (1, {'@': 336}), 77: (1, {'@': 336}), 20: (1, {'@': 336}), 50: (1, {'@': 336}), 66: (1, {'@': 336}), 65: (1, {'@': 336}), 49: (1, {'@': 336}), 28: (1, {'@': 336}), 12: (0, 74), 22: (1, {'@': 336})}, 572: {0: (1, {'@': 337}), 12: (1, {'@': 337}), 64: (1, {'@': 337}), 76: (0, 184)}, 573: {12: (1, {'@': 338}), 64: (1, {'@': 338}), 0: (1, {'@': 338})}, 574: {12: (1, {'@': 339}), 64: (1, {'@': 339}), 0: (1, {'@': 339})}, 575: {30: (0, 489), 141: (0, 593), 20: (0, 20), 12: (0, 74)}, 576: {64: (1, {'@': 340}), 63: (1, {'@': 340}), 12: (0, 12), 14: (0, 594)}, 577: {12: (0, 12), 14: (0, 595), 141: (0, 596), 20: (0, 20), 30: (0, 489)}, 578: {77: (1, {'@': 341})}, 579: {63: (0, 577), 64: (0, 597)}, 580: {77: (1, {'@': 342})}, 581: {64: (0, 598), 63: (0, 577)}, 582: {77: (1, {'@': 343})}, 583: {64: (0, 599), 63: (0, 538), 143: (0, 600), 12: (0, 74)}, 584: {22: (0, 601)}, 585: {12: (1, {'@': 344}), 64: (1, {'@': 344}), 0: (1, {'@': 344})}, 586: {62: (1, {'@': 345}), 63: (1, {'@': 345}), 32: (1, {'@': 345}), 64: (1, {'@': 345}), 55: (1, {'@': 345}), 77: (1, {'@': 345}), 56: (1, {'@': 345}), 0: (1, {'@': 345}), 70: (1, {'@': 345}), 79: (1, {'@': 345}), 48: (1, {'@': 345}), 80: (1, {'@': 345}), 67: (1, {'@': 345}), 82: (1, {'@': 345}), 59: (1, {'@': 345}), 75: (1, {'@': 345}), 76: (1, {'@': 345}), 12: (1, {'@': 345}), 29: (1, {'@': 345})}, 587: {62: (1, {'@': 346}), 77: (1, {'@': 346}), 56: (1, {'@': 346}), 0: (1, {'@': 346}), 76: (0, 184), 12: (1, {'@': 346}), 64: (1, {'@': 346})}, 588: {32: (1, {'@': 347}), 15: (1, {'@': 347}), 38: (1, {'@': 347}), 71: (1, {'@': 347}), 44: (1, {'@': 347}), 2: (1, {'@': 347}), 57: (1, {'@': 347}), 48: (1, {'@': 347}), 43: (1, {'@': 347}), 33: (1, {'@': 347}), 74: (1, {'@': 347}), 58: (1, {'@': 347}), 21: (1, {'@': 347}), 31: (1, {'@': 347}), 36: (1, {'@': 347}), 61: (1, {'@': 347}), 29: (1, {'@': 347}), 62: (1, {'@': 347}), 63: (1, {'@': 347}), 47: (1, {'@': 347}), 34: (1, {'@': 347}), 77: (1, {'@': 347}), 20: (1, {'@': 347}), 50: (1, {'@': 347}), 66: (1, {'@': 347}), 65: (1, {'@': 347}), 49: (1, {'@': 347}), 28: (1, {'@': 347}), 12: (1, {'@': 347}), 22: (1, {'@': 347})}, 589: {32: (1, {'@': 348}), 15: (1, {'@': 348}), 38: (1, {'@': 348}), 71: (1, {'@': 348}), 44: (1, {'@': 348}), 2: (1, {'@': 348}), 57: (1, {'@': 348}), 48: (1, {'@': 348}), 43: (1, {'@': 348}), 33: (1, {'@': 348}), 74: (1, {'@': 348}), 58: (1, {'@': 348}), 21: (1, {'@': 348}), 31: (1, {'@': 348}), 36: (1, {'@': 348}), 61: (1, {'@': 348}), 29: (1, {'@': 348}), 62: (1, {'@': 348}), 63: (1, {'@': 348}), 47: (1, {'@': 348}), 34: (1, {'@': 348}), 77: (1, {'@': 348}), 20: (1, {'@': 348}), 50: (1, {'@': 348}), 66: (1, {'@': 348}), 65: (1, {'@': 348}), 49: (1, {'@': 348}), 28: (1, {'@': 348}), 12: (1, {'@': 348}), 22: (1, {'@': 348})}, 590: {32: (1, {'@': 349}), 15: (1, {'@': 349}), 38: (1, {'@': 349}), 71: (1, {'@': 349}), 44: (1, {'@': 349}), 2: (1, {'@': 349}), 57: (1, {'@': 349}), 48: (1, {'@': 349}), 43: (1, {'@': 349}), 33: (1, {'@': 349}), 74: (1, {'@': 349}), 58: (1, {'@': 349}), 21: (1, {'@': 349}), 31: (1, {'@': 349}), 36: (1, {'@': 349}), 61: (1, {'@': 349}), 29: (1, {'@': 349}), 62: (1, {'@': 349}), 63: (1, {'@': 349}), 47: (1, {'@': 349}), 34: (1, {'@': 349}), 77: (1, {'@': 349}), 20: (1, {'@': 349}), 50: (1, {'@': 349}), 66: (1, {'@': 349}), 65: (1, {'@': 349}), 49: (1, {'@': 349}), 28: (1, {'@': 349}), 12: (1, {'@': 349}), 22: (1, {'@': 349})}, 591: {71: (1, {'@': 350}), 12: (0, 74), 65: (1, {'@': 350})}, 592: {63: (1, {'@': 351}), 58: (1, {'@': 351}), 60: (0, 469)}, 593: {64: (1, {'@': 352}), 63: (1, {'@': 352}), 14: (0, 602), 12: (0, 12)}, 594: {64: (1, {'@': 353}), 63: (1, {'@': 353}), 12: (0, 74)}, 595: {20: (0, 20), 141: (0, 603), 30: (0, 489), 12: (0, 74)}, 596: {64: (1, {'@': 354}), 63: (1, {'@': 354}), 14: (0, 604), 12: (0, 12)}, 597: {77: (1, {'@': 355})}, 598: {77: (1, {'@': 356})}, 599: {77: (1, {'@': 357})}, 600: {63: (0, 577), 64: (0, 605)}, 601: {77: (1, {'@': 112}), 112: (0, 95), 101: (0, 76), 43: (0, 43), 108: (0, 88), 2: (0, 2), 25: (0, 97), 3: (0, 139), 122: (0, 606), 44: (0, 99), 105: (0, 83), 110: (0, 140), 103: (0, 81), 111: (0, 92), 123: (0, 141), 104: (0, 82), 22: (0, 142)}, 602: {64: (1, {'@': 358}), 63: (1, {'@': 358}), 12: (0, 74)}, 603: {64: (1, {'@': 359}), 63: (1, {'@': 359}), 14: (0, 607), 12: (0, 12)}, 604: {64: (1, {'@': 360}), 63: (1, {'@': 360}), 12: (0, 74)}, 605: {77: (1, {'@': 361})}, 606: {77: (0, 608)}, 607: {64: (1, {'@': 362}), 63: (1, {'@': 362}), 12: (0, 74)}, 608: {12: (1, {'@': 363}), 63: (1, {'@': 363}), 64: (1, {'@': 363})}}, 'start_states': {'start': 0}, 'end_states': {'start': 73}}, 'lexer_conf': {'tokens': [{'@': 0}, {'@': 1}, {'@': 2}, {'@': 3}, {'@': 4}, {'@': 5}, {'@': 6}, {'@': 7}, {'@': 8}, {'@': 9}, {'@': 10}, {'@': 11}, {'@': 12}, {'@': 13}, {'@': 14}, {'@': 15}, {'@': 16}, {'@': 17}, {'@': 18}, {'@': 19}, {'@': 20}, {'@': 21}, {'@': 22}, {'@': 23}, {'@': 24}, {'@': 25}, {'@': 26}, {'@': 27}, {'@': 28}, {'@': 29}, {'@': 30}, {'@': 31}, {'@': 32}, {'@': 33}, {'@': 34}, {'@': 35}, {'@': 36}, {'@': 37}, {'@': 38}, {'@': 39}, {'@': 40}, {'@': 41}, {'@': 42}, {'@': 43}, {'@': 44}, {'@': 45}, {'@': 46}, {'@': 47}, {'@': 48}, {'@': 49}, {'@': 50}, {'@': 51}, {'@': 52}, {'@': 53}, {'@': 54}, {'@': 55}, {'@': 56}, {'@': 57}, {'@': 58}, {'@': 59}, {'@': 60}, {'@': 61}, {'@': 62}, {'@': 63}, {'@': 64}, {'@': 65}, {'@': 66}, {'@': 67}, {'@': 68}, {'@': 69}, {'@': 70}, {'@': 71}, {'@': 72}, {'@': 73}, {'@': 74}, {'@': 75}, {'@': 76}], 'ignore': ['COMMENT', 'WS_INLINE'], '__type__': 'LexerConf'}, 'start': ['start'], '__type__': 'LALR_ContextualLexer'}, 'rules': [{'@': 115}, {'@': 83}, {'@': 77}, {'@': 80}, {'@': 151}, {'@': 81}, {'@': 287}, {'@': 286}, {'@': 285}, {'@': 228}, {'@': 339}, {'@': 288}, {'@': 230}, {'@': 229}, {'@': 290}, {'@': 344}, {'@': 338}, {'@': 153}, {'@': 79}, {'@': 185}, {'@': 267}, {'@': 232}, {'@': 154}, {'@': 147}, {'@': 349}, {'@': 328}, {'@': 327}, {'@': 302}, {'@': 329}, {'@': 303}, {'@': 304}, {'@': 278}, {'@': 263}, {'@': 225}, {'@': 348}, {'@': 325}, {'@': 326}, {'@': 301}, {'@': 324}, {'@': 299}, {'@': 300}, {'@': 277}, {'@': 347}, {'@': 321}, {'@': 322}, {'@': 296}, {'@': 323}, {'@': 297}, {'@': 298}, {'@': 276}, {'@': 336}, {'@': 311}, {'@': 312}, {'@': 282}, {'@': 305}, {'@': 280}, {'@': 279}, {'@': 254}, {'@': 176}, {'@': 139}, {'@': 98}, {'@': 140}, {'@': 145}, {'@': 350}, {'@': 330}, {'@': 331}, {'@': 306}, {'@': 258}, {'@': 256}, {'@': 257}, {'@': 334}, {'@': 310}, {'@': 281}, {'@': 307}, {'@': 333}, {'@': 308}, {'@': 179}, {'@': 90}, {'@': 110}, {'@': 106}, {'@': 96}, {'@': 108}, {'@': 109}, {'@': 94}, {'@': 175}, {'@': 170}, {'@': 173}, {'@': 171}, {'@': 174}, {'@': 172}, {'@': 93}, {'@': 146}, {'@': 84}, {'@': 144}, {'@': 103}, {'@': 143}, {'@': 101}, {'@': 142}, {'@': 99}, {'@': 135}, {'@': 87}, {'@': 136}, {'@': 89}, {'@': 169}, {'@': 92}, {'@': 137}, {'@': 111}, {'@': 107}, {'@': 91}, {'@': 95}, {'@': 100}, {'@': 97}, {'@': 252}, {'@': 209}, {'@': 212}, {'@': 167}, {'@': 85}, {'@': 105}, {'@': 86}, {'@': 159}, {'@': 161}, {'@': 217}, {'@': 180}, {'@': 141}, {'@': 313}, {'@': 283}, {'@': 211}, {'@': 165}, {'@': 361}, {'@': 357}, {'@': 356}, {'@': 343}, {'@': 355}, {'@': 342}, {'@': 341}, {'@': 315}, {'@': 289}, {'@': 363}, {'@': 187}, {'@': 188}, {'@': 291}, {'@': 292}, {'@': 284}, {'@': 264}, {'@': 266}, {'@': 227}, {'@': 337}, {'@': 314}, {'@': 158}, {'@': 272}, {'@': 245}, {'@': 318}, {'@': 152}, {'@': 113}, {'@': 120}, {'@': 248}, {'@': 199}, {'@': 274}, {'@': 247}, {'@': 346}, {'@': 319}, {'@': 320}, {'@': 295}, {'@': 238}, {'@': 191}, {'@': 317}, {'@': 293}, {'@': 193}, {'@': 237}, {'@': 190}, {'@': 239}, {'@': 192}, {'@': 273}, {'@': 246}, {'@': 271}, {'@': 244}, {'@': 162}, {'@': 126}, {'@': 134}, {'@': 128}, {'@': 118}, {'@': 198}, {'@': 133}, {'@': 203}, {'@': 201}, {'@': 200}, {'@': 202}, {'@': 205}, {'@': 204}, {'@': 125}, {'@': 235}, {'@': 345}, {'@': 316}, {'@': 129}, {'@': 160}, {'@': 127}, {'@': 157}, {'@': 123}, {'@': 155}, {'@': 116}, {'@': 156}, {'@': 121}, {'@': 117}, {'@': 130}, {'@': 163}, {'@': 197}, {'@': 122}, {'@': 184}, {'@': 150}, {'@': 112}, {'@': 149}, {'@': 236}, {'@': 195}, {'@': 294}, {'@': 104}, {'@': 78}, {'@': 88}, {'@': 124}, {'@': 132}, {'@': 119}, {'@': 131}, {'@': 82}, {'@': 114}, {'@': 216}, {'@': 255}, {'@': 177}, {'@': 138}, {'@': 215}, {'@': 178}, {'@': 335}, {'@': 351}, {'@': 309}, {'@': 332}, {'@': 102}, {'@': 148}, {'@': 224}, {'@': 183}, {'@': 262}, {'@': 223}, {'@': 222}, {'@': 182}, {'@': 261}, {'@': 221}, {'@': 220}, {'@': 181}, {'@': 260}, {'@': 219}, {'@': 208}, {'@': 164}, {'@': 251}, {'@': 207}, {'@': 213}, {'@': 168}, {'@': 253}, {'@': 214}, {'@': 218}, {'@': 259}, {'@': 166}, {'@': 210}, {'@': 358}, {'@': 352}, {'@': 353}, {'@': 340}, {'@': 362}, {'@': 359}, {'@': 360}, {'@': 354}, {'@': 186}, {'@': 231}, {'@': 250}, {'@': 206}, {'@': 275}, {'@': 249}, {'@': 243}, {'@': 196}, {'@': 270}, {'@': 242}, {'@': 233}, {'@': 189}, {'@': 268}, {'@': 234}, {'@': 241}, {'@': 194}, {'@': 269}, {'@': 240}, {'@': 226}, {'@': 265}], 'options': {'debug': False, 'keep_all_tokens': False, 'tree_class': None, 'cache_grammar': False, 'postlex': None, 'parser': 'lalr', 'lexer': 'contextual', 'transformer': None, 'start': ['start'], 'profile': False, 'priority': None, 'ambiguity': 'auto', 'propagate_positions': False, 'lexer_callbacks': {}, 'maybe_placeholders': False, 'edit_terminals': None}, '__type__': 'Lark'}
)
MEMO = (
{0: {'name': '_IS', 'pattern': {'value': '(?:is|\\∈)', 'flags': [], '_width': [1, 2], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 1: {'name': 'PROP_VAL', 'pattern': {'value': '(?:(?i:(?:(?i:sometimes)|(?i:true)))|(?i:false))', 'flags': ['i'], '_width': [4, 9], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 2: {'name': '_NE', 'pattern': {'value': '(?:(?:(?:(?:(?:\\!|\\~)|\\¬)|not)\\=|\\/\\=)|\\≠)', 'flags': [], '_width': [1, 4], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 3: {'name': 'COMP', 'pattern': {'value': '(?:(?:(?:\\!|\\~)|\\¬)|not)', 'flags': [], '_width': [1, 3], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 4: {'name': '_GE', 'pattern': {'value': '(?:\\>\\=|\\≥)', 'flags': [], '_width': [1, 2], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 5: {'name': '_LE', 'pattern': {'value': '(?:\\<\\=|\\≤)', 'flags': [], '_width': [1, 2], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 6: {'name': '_IMPLIES', 'pattern': {'value': '(?:(?:(?:\\=\\>|\\⇒)|\\⟹\\ )|\\-\\>)', 'flags': [], '_width': [1, 2], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 7: {'name': '_IFF', 'pattern': {'value': '(?:(?:\\<\\=\\>|\\⟺)|\\⇔)', 'flags': [], '_width': [1, 3], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 8: {'name': '_ELSE', 'pattern': {'value': '(?:else|otherwise)', 'flags': [], '_width': [4, 9], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 9: {'name': '_EQ', 'pattern': {'value': '(?:\\=|\\=\\=)', 'flags': [], '_width': [1, 2], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 10: {'name': 'CONJ', 'pattern': {'value': '(?:(?:(?:\\&|\\/\\\\)|\\∧)|and)', 'flags': [], '_width': [1, 3], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 11: {'name': 'DISJ', 'pattern': {'value': '(?:(?:(?:\\||\\\\\\/)|\\∨)|or)', 'flags': [], '_width': [1, 2], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 12: {'name': '_NEWLINE', 'pattern': {'value': '\n', 'flags': [], '_width': [1, 1], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 13: {'name': 'VAR', 'pattern': {'value': '(?!(if|then|else|otherwise|only|iff|is|are|forall|exists|not|or|and|sometimes|true|false)\\b)[a-zA-Z_][a-zA-Z_0-9]*', 'flags': ['i'], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 14: {'name': 'COMMENT', 'pattern': {'value': '\\/\\/(.)+\n', 'flags': [], '_width': [4, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 15: {'name': 'INT', 'pattern': {'value': '(?:[0-9])+', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 16: {'name': 'WS_INLINE', 'pattern': {'value': '(?:(?:\\ |\t))+', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 17: {'name': 'ESCAPED_STRING', 'pattern': {'value': '\\".*?(?<!\\\\)(\\\\\\\\)*?\\"', 'flags': [], '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 18: {'name': 'HASH', 'pattern': {'value': '#', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 19: {'name': '__ANON_0', 'pattern': {'value': 'save_aut', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 20: {'name': 'LPAR', 'pattern': {'value': '(', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 21: {'name': 'COMMA', 'pattern': {'value': ',', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 22: {'name': 'RPAR', 'pattern': {'value': ')', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 23: {'name': '__ANON_1', 'pattern': {'value': 'save_aut_img', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 24: {'name': 'CONTEXT', 'pattern': {'value': 'context', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 25: {'name': '__ANON_2', 'pattern': {'value': 'end_context', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 26: {'name': 'LOAD', 'pattern': {'value': 'load', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 27: {'name': '__ANON_3', 'pattern': {'value': 'assert_prop', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 28: {'name': 'IMPORT', 'pattern': {'value': 'import', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 29: {'name': 'FORGET', 'pattern': {'value': 'forget', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 30: {'name': 'TYPE', 'pattern': {'value': 'type', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 31: {'name': 'SHUFFLE', 'pattern': {'value': 'shuffle', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 32: {'name': '__ANON_4', 'pattern': {'value': 'shuffle_or', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 33: {'name': 'RESTRICT', 'pattern': {'value': 'Restrict', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 34: {'name': 'DOT', 'pattern': {'value': '.', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 35: {'name': 'DEFINE', 'pattern': {'value': 'Define', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 36: {'name': '__ANON_5', 'pattern': {'value': ':=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 37: {'name': 'EXECUTE', 'pattern': {'value': 'Execute', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 38: {'name': 'DISPLAY', 'pattern': {'value': 'Display', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 39: {'name': 'IF', 'pattern': {'value': 'if', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 40: {'name': 'THEN', 'pattern': {'value': 'then', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 41: {'name': 'ELSE', 'pattern': {'value': 'else', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 42: {'name': 'BACKSLASH', 'pattern': {'value': '\\', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 43: {'name': '__ANON_6', 'pattern': {'value': '->', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 44: {'name': 'LET', 'pattern': {'value': 'let', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 45: {'name': 'BE', 'pattern': {'value': 'be', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 46: {'name': 'IN', 'pattern': {'value': 'in', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 47: {'name': 'MATCH', 'pattern': {'value': 'match', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 48: {'name': 'WITH', 'pattern': {'value': 'with', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 49: {'name': 'END', 'pattern': {'value': 'end', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 50: {'name': 'DO', 'pattern': {'value': 'do', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 51: {'name': 'CASE', 'pattern': {'value': 'case', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 52: {'name': 'LSQB', 'pattern': {'value': '[', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 53: {'name': 'RSQB', 'pattern': {'value': ']', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 54: {'name': '__ANON_7', 'pattern': {'value': '::', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 55: {'name': '__ANON_8', 'pattern': {'value': '[+\\-*\\/=\\\\|:<>!&]', 'flags': [], '_width': [1, 1], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 56: {'name': '__ANON_9', 'pattern': {'value': '[^\x00-ÿ]', 'flags': [], '_width': [1, 1], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 57: {'name': 'LESSTHAN', 'pattern': {'value': '<', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 58: {'name': 'MORETHAN', 'pattern': {'value': '>', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 59: {'name': 'MINUS', 'pattern': {'value': '-', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 60: {'name': 'PLUS', 'pattern': {'value': '+', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 61: {'name': 'STAR', 'pattern': {'value': '*', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 62: {'name': 'SLASH', 'pattern': {'value': '/', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 63: {'name': 'CIRCUMFLEX', 'pattern': {'value': '^', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 64: {'name': 'TRUE', 'pattern': {'value': 'true', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 65: {'name': 'FALSE', 'pattern': {'value': 'false', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 66: {'name': 'LBRACE', 'pattern': {'value': '{', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 67: {'name': 'RBRACE', 'pattern': {'value': '}', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 68: {'name': 'COLON', 'pattern': {'value': ':', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 69: {'name': 'ARE', 'pattern': {'value': 'are', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 70: {'name': 'AND', 'pattern': {'value': 'and', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 71: {'name': 'ONLY', 'pattern': {'value': 'only', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 72: {'name': 'IFF', 'pattern': {'value': 'iff', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 73: {'name': 'FORALL', 'pattern': {'value': 'forall', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 74: {'name': '__ANON_10', 'pattern': {'value': '∀', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 75: {'name': 'EXISTS', 'pattern': {'value': 'exists', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 76: {'name': '__ANON_11', 'pattern': {'value': '∃', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 77: {'origin': {'name': 'defs', '__type__': 'NonTerminal'}, 'expansion': [], 'order': 0, 'alias': 'nil_def', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 78: {'origin': {'name': 'var', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'var_tok', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 79: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline', '__type__': 'NonTerminal'}], 'order': 13, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 80: {'origin': {'name': 'defs', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'def', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'single_def', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 81: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'pred_definition', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 82: {'origin': {'name': '__anon_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_NEWLINE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': None, '__type__': 'Rule'}, 83: {'origin': {'name': 'start', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'defs', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'prog', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 84: {'origin': {'name': 'praline_arith', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_sub', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 85: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_list', '__type__': 'NonTerminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 86: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'pecan_term', '__type__': 'NonTerminal'}], 'order': 11, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 87: {'origin': {'name': 'praline_div', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_exponent', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_div', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 88: {'origin': {'name': 'string', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ESCAPED_STRING', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'escaped_str', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 89: {'origin': {'name': 'praline_exponent', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_prepend', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_exponent', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 90: {'origin': {'name': 'praline_operator', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_compare', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 91: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'int', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_int', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 92: {'origin': {'name': 'praline_prepend', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'app', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 93: {'origin': {'name': 'praline_compare', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_arith', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 94: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_9', 'filter_out': False, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 95: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'string', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'praline_string', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 96: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DISJ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 97: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FALSE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'praline_false', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 98: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_operator', '__type__': 'NonTerminal'}], 'order': 36, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 99: {'origin': {'name': 'praline_mul', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_div', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_mul', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 100: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRUE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'praline_true', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 101: {'origin': {'name': 'praline_add', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_mul', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_add', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 102: {'origin': {'name': '__anon_plus_5', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'operator_sym_char', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': None, '__type__': 'Rule'}, 103: {'origin': {'name': 'praline_sub', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_add', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_sub', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 104: {'origin': {'name': 'int', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'int_tok', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 105: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_tuple', '__type__': 'NonTerminal'}], 'order': 10, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 106: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_8', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 107: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_var', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 108: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CONJ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 109: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMP', 'filter_out': False, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 110: {'origin': {'name': 'operator_sym', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_plus_5', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'operator_sym', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 111: {'origin': {'name': 'app', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_atom', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 112: {'origin': {'name': 'args', '__type__': 'NonTerminal'}, 'expansion': [], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': [True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 113: {'origin': {'name': 'varlist', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 114: {'origin': {'name': '__anon_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': '_NEWLINE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': None, '__type__': 'Rule'}, 115: {'origin': {'name': 'start', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'defs', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'prog', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 116: {'origin': {'name': 'mul_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'div_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'mul', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 117: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'var_ref', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 118: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'string', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'spot_formula', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 119: {'origin': {'name': 'exists_sym', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'EXISTS', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 120: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'bool', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 121: {'origin': {'name': 'div_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'div', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 122: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'call', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 123: {'origin': {'name': 'add_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'mul_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'add', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 124: {'origin': {'name': 'forall_sym', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FORALL', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 125: {'origin': {'name': 'expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arith', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 126: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 127: {'origin': {'name': 'sub_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'add_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'sub', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 128: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FALSE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'formal_false', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 129: {'origin': {'name': 'arith', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'sub_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 130: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'int', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'int_const', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 131: {'origin': {'name': 'exists_sym', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_11', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 132: {'origin': {'name': 'forall_sym', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_10', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 133: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'comparison', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 134: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRUE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'formula_true', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 135: {'origin': {'name': 'praline_div', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_exponent', '__type__': 'NonTerminal'}, {'name': '__anon_star_9', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_div', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 136: {'origin': {'name': 'praline_exponent', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_prepend', '__type__': 'NonTerminal'}, {'name': '__anon_star_10', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_exponent', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 137: {'origin': {'name': 'app', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'app', '__type__': 'NonTerminal'}, {'name': 'praline_atom', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_app', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 138: {'origin': {'name': '__anon_plus_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'term', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': None, '__type__': 'Rule'}, 139: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DO', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_plus_2', '__type__': 'NonTerminal'}], 'order': 35, 'alias': 'praline_do', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 140: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_operator', '__type__': 'NonTerminal'}, {'name': 'operator_sym', '__type__': 'NonTerminal'}], 'order': 37, 'alias': 'partial_op_fst', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 141: {'origin': {'name': 'praline_list', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'praline_list_literal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': [False, True, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 142: {'origin': {'name': 'praline_mul', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_div', '__type__': 'NonTerminal'}, {'name': '__anon_star_8', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_mul', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 143: {'origin': {'name': 'praline_add', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_mul', '__type__': 'NonTerminal'}, {'name': '__anon_star_7', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_add', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 144: {'origin': {'name': 'praline_sub', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_add', '__type__': 'NonTerminal'}, {'name': '__anon_star_6', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_sub', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 145: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'operator_sym', '__type__': 'NonTerminal'}, {'name': 'praline_operator', '__type__': 'NonTerminal'}], 'order': 38, 'alias': 'partial_op_snd', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 146: {'origin': {'name': 'praline_arith', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_sub', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_neg', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 147: {'origin': {'name': 'praline', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DISPLAY', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'praline_display', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 148: {'origin': {'name': '__anon_plus_5', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_plus_5', '__type__': 'NonTerminal'}, {'name': 'operator_sym_char', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': None, '__type__': 'Rule'}, 149: {'origin': {'name': 'arg', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 150: {'origin': {'name': 'args', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arg', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 151: {'origin': {'name': 'defs', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'def', '__type__': 'NonTerminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'defs', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'multi_def', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 152: {'origin': {'name': 'varlist', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': '__anon_star_14', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 153: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'RESTRICT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'restriction', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 154: {'origin': {'name': 'praline', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'EXECUTE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'praline_execute', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 155: {'origin': {'name': 'mul_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'div_expr', '__type__': 'NonTerminal'}, {'name': '__anon_star_17', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'mul', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 156: {'origin': {'name': 'div_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}, {'name': '__anon_star_18', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'div', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 157: {'origin': {'name': 'add_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'mul_expr', '__type__': 'NonTerminal'}, {'name': '__anon_star_16', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'add', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 158: {'origin': {'name': 'formal', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'formal_var', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 159: {'origin': {'name': 'pecan_term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'praline_pecan_term', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 160: {'origin': {'name': 'sub_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'add_expr', '__type__': 'NonTerminal'}, {'name': '__anon_star_15', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'sub', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 161: {'origin': {'name': 'pecan_term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'def', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'praline_pecan_term', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 162: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMP', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 22, 'alias': 'comp', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 163: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'atom', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'neg', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 164: {'origin': {'name': '__anon_star_9', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_exponent', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': None, '__type__': 'Rule'}, 165: {'origin': {'name': 'praline_tuple', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_plus_12', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': [False, False, True, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 166: {'origin': {'name': '__anon_plus_12', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'term', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': None, '__type__': 'Rule'}, 167: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 168: {'origin': {'name': '__anon_star_10', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CIRCUMFLEX', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_prepend', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': None, '__type__': 'Rule'}, 169: {'origin': {'name': 'praline_prepend', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'app', '__type__': 'NonTerminal'}, {'name': '__ANON_7', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'app', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_prepend', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 170: {'origin': {'name': 'praline_compare', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_arith', '__type__': 'NonTerminal'}, {'name': '_NE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_arith', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_ne', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 171: {'origin': {'name': 'praline_compare', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_arith', '__type__': 'NonTerminal'}, {'name': '_GE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_arith', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'praline_ge', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 172: {'origin': {'name': 'praline_compare', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_arith', '__type__': 'NonTerminal'}, {'name': 'MORETHAN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_arith', '__type__': 'NonTerminal'}], 'order': 5, 'alias': 'praline_gt', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 173: {'origin': {'name': 'praline_compare', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_arith', '__type__': 'NonTerminal'}, {'name': '_LE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_arith', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'praline_le', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 174: {'origin': {'name': 'praline_compare', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_arith', '__type__': 'NonTerminal'}, {'name': 'LESSTHAN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_arith', '__type__': 'NonTerminal'}], 'order': 4, 'alias': 'praline_lt', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 175: {'origin': {'name': 'praline_compare', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_arith', '__type__': 'NonTerminal'}, {'name': '_EQ', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_arith', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_eq', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 176: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DO', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': '__anon_plus_2', '__type__': 'NonTerminal'}], 'order': 34, 'alias': 'praline_do', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 177: {'origin': {'name': '__anon_plus_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'term', '__type__': 'NonTerminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': None, '__type__': 'Rule'}, 178: {'origin': {'name': '__anon_plus_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_plus_2', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': None, '__type__': 'Rule'}, 179: {'origin': {'name': 'praline_operator', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_operator', '__type__': 'NonTerminal'}, {'name': 'operator_sym', '__type__': 'NonTerminal'}, {'name': 'praline_compare', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_operator', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 180: {'origin': {'name': 'praline_list', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'praline_list_literal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 181: {'origin': {'name': '__anon_star_8', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_div', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': None, '__type__': 'Rule'}, 182: {'origin': {'name': '__anon_star_7', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_mul', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': None, '__type__': 'Rule'}, 183: {'origin': {'name': '__anon_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_add', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': None, '__type__': 'Rule'}, 184: {'origin': {'name': 'args', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arg', '__type__': 'NonTerminal'}, {'name': '__anon_star_19', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 185: {'origin': {'name': 'prop_val', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PROP_VAL', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'prop_val_tok', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 186: {'origin': {'name': '__anon_star_14', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': None, '__type__': 'Rule'}, 187: {'origin': {'name': 'restriction', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'varlist', '__type__': 'NonTerminal'}, {'name': 'ARE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'restrict_is', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 188: {'origin': {'name': 'restriction', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'varlist', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'restrict_is', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 189: {'origin': {'name': '__anon_star_17', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'div_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': None, '__type__': 'Rule'}, 190: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'bool', '__type__': 'NonTerminal'}, {'name': 'DISJ', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 15, 'alias': 'disj', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 191: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'bool', '__type__': 'NonTerminal'}, {'name': '_IFF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 10, 'alias': 'iff', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 192: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'bool', '__type__': 'NonTerminal'}, {'name': 'CONJ', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 17, 'alias': 'conj', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 193: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'bool', '__type__': 'NonTerminal'}, {'name': 'IFF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 13, 'alias': 'iff', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 194: {'origin': {'name': '__anon_star_18', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'atom', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': None, '__type__': 'Rule'}, 195: {'origin': {'name': 'call', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'call_is', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 196: {'origin': {'name': '__anon_star_16', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'mul_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': None, '__type__': 'Rule'}, 197: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arith', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 198: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 199: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'pred', '__type__': 'NonTerminal'}, {'name': '_IMPLIES', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'implies', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 200: {'origin': {'name': 'comparison', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'LESSTHAN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'less', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 201: {'origin': {'name': 'comparison', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': '_NE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'not_equal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 202: {'origin': {'name': 'comparison', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'MORETHAN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'greater', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 203: {'origin': {'name': 'comparison', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': '_EQ', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'equal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 204: {'origin': {'name': 'comparison', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': '_GE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 5, 'alias': 'greater_equal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 205: {'origin': {'name': 'comparison', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': '_LE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 4, 'alias': 'less_equal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 206: {'origin': {'name': '__anon_star_15', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'add_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': None, '__type__': 'Rule'}, 207: {'origin': {'name': '__anon_star_9', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_9', '__type__': 'NonTerminal'}, {'name': 'SLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_exponent', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': None, '__type__': 'Rule'}, 208: {'origin': {'name': '__anon_star_9', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'praline_exponent', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': None, '__type__': 'Rule'}, 209: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 210: {'origin': {'name': '__anon_plus_12', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_plus_12', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': None, '__type__': 'Rule'}, 211: {'origin': {'name': 'praline_tuple', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_plus_12', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 212: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 213: {'origin': {'name': '__anon_star_10', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CIRCUMFLEX', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'praline_prepend', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': None, '__type__': 'Rule'}, 214: {'origin': {'name': '__anon_star_10', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_10', '__type__': 'NonTerminal'}, {'name': 'CIRCUMFLEX', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_prepend', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': None, '__type__': 'Rule'}, 215: {'origin': {'name': '__anon_plus_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_plus_2', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': None, '__type__': 'Rule'}, 216: {'origin': {'name': '__anon_plus_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'match_arm', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': None, '__type__': 'Rule'}, 217: {'origin': {'name': 'praline_list', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__anon_star_11', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'praline_list_literal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 218: {'origin': {'name': '__anon_star_11', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': None, '__type__': 'Rule'}, 219: {'origin': {'name': '__anon_star_8', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_8', '__type__': 'NonTerminal'}, {'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_div', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': None, '__type__': 'Rule'}, 220: {'origin': {'name': '__anon_star_8', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'praline_div', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': None, '__type__': 'Rule'}, 221: {'origin': {'name': '__anon_star_7', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_7', '__type__': 'NonTerminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_mul', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': None, '__type__': 'Rule'}, 222: {'origin': {'name': '__anon_star_7', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'praline_mul', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': None, '__type__': 'Rule'}, 223: {'origin': {'name': '__anon_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_6', '__type__': 'NonTerminal'}, {'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_add', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': None, '__type__': 'Rule'}, 224: {'origin': {'name': '__anon_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'praline_add', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': None, '__type__': 'Rule'}, 225: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'BACKSLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'app', '__type__': 'NonTerminal'}, {'name': '__ANON_6', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 9, 'alias': 'praline_lambda', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 226: {'origin': {'name': '__anon_star_19', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arg', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': None, '__type__': 'Rule'}, 227: {'origin': {'name': 'pred_definition', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': '__ANON_5', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'def_pred_is', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 228: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_2', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'directive_end_context', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 229: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'FORGET', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 8, 'alias': 'directive_forget', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 230: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'IMPORT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': 'directive_import', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 231: {'origin': {'name': '__anon_star_14', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_14', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': None, '__type__': 'Rule'}, 232: {'origin': {'name': 'praline', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DEFINE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_operator', '__type__': 'NonTerminal'}, {'name': '__ANON_5', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'praline_def', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 233: {'origin': {'name': '__anon_star_17', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'div_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': None, '__type__': 'Rule'}, 234: {'origin': {'name': '__anon_star_17', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_17', '__type__': 'NonTerminal'}, {'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'div_expr', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': None, '__type__': 'Rule'}, 235: {'origin': {'name': 'expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arith', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'index', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 236: {'origin': {'name': 'call', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'call_args', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 237: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'bool', '__type__': 'NonTerminal'}, {'name': 'DISJ', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 14, 'alias': 'disj', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 238: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'bool', '__type__': 'NonTerminal'}, {'name': '_IFF', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 9, 'alias': 'iff', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 239: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'bool', '__type__': 'NonTerminal'}, {'name': 'CONJ', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 16, 'alias': 'conj', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 240: {'origin': {'name': '__anon_star_18', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_18', '__type__': 'NonTerminal'}, {'name': 'SLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'atom', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': None, '__type__': 'Rule'}, 241: {'origin': {'name': '__anon_star_18', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'atom', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': None, '__type__': 'Rule'}, 242: {'origin': {'name': '__anon_star_16', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_16', '__type__': 'NonTerminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'mul_expr', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': None, '__type__': 'Rule'}, 243: {'origin': {'name': '__anon_star_16', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'mul_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': None, '__type__': 'Rule'}, 244: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'exists_sym', '__type__': 'NonTerminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 21, 'alias': 'exists', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 245: {'origin': {'name': 'formal', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'formal_is', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 246: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'forall_sym', '__type__': 'NonTerminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 19, 'alias': 'forall', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 247: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'THEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 4, 'alias': 'implies', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 248: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'pred', '__type__': 'NonTerminal'}, {'name': '_IMPLIES', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'implies', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 249: {'origin': {'name': '__anon_star_15', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_15', '__type__': 'NonTerminal'}, {'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'add_expr', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': None, '__type__': 'Rule'}, 250: {'origin': {'name': '__anon_star_15', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'add_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': None, '__type__': 'Rule'}, 251: {'origin': {'name': '__anon_star_9', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_9', '__type__': 'NonTerminal'}, {'name': 'SLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'praline_exponent', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': None, '__type__': 'Rule'}, 252: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 253: {'origin': {'name': '__anon_star_10', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_10', '__type__': 'NonTerminal'}, {'name': 'CIRCUMFLEX', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'praline_prepend', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': None, '__type__': 'Rule'}, 254: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'WITH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_plus_1', '__type__': 'NonTerminal'}, {'name': 'END', 'filter_out': True, '__type__': 'Terminal'}], 'order': 33, 'alias': 'praline_match', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 255: {'origin': {'name': '__anon_plus_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_plus_1', '__type__': 'NonTerminal'}, {'name': 'match_arm', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': None, '__type__': 'Rule'}, 256: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'string', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_match_string', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 257: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'praline_match_var', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 258: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'int', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_match_int', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 259: {'origin': {'name': '__anon_star_11', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_11', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': None, '__type__': 'Rule'}, 260: {'origin': {'name': '__anon_star_8', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_8', '__type__': 'NonTerminal'}, {'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'praline_div', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': None, '__type__': 'Rule'}, 261: {'origin': {'name': '__anon_star_7', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_7', '__type__': 'NonTerminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'praline_mul', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': None, '__type__': 'Rule'}, 262: {'origin': {'name': '__anon_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_6', '__type__': 'NonTerminal'}, {'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'praline_add', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': None, '__type__': 'Rule'}, 263: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'BACKSLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'app', '__type__': 'NonTerminal'}, {'name': '__ANON_6', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 8, 'alias': 'praline_lambda', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 264: {'origin': {'name': 'pred_definition', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_5', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'def_pred_standard', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 265: {'origin': {'name': '__anon_star_19', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_19', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arg', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': None, '__type__': 'Rule'}, 266: {'origin': {'name': 'pred_definition', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': '__ANON_5', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'def_pred_is', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 267: {'origin': {'name': 'praline', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DEFINE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_operator', '__type__': 'NonTerminal'}, {'name': '__ANON_5', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'praline_def', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 268: {'origin': {'name': '__anon_star_17', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_17', '__type__': 'NonTerminal'}, {'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'div_expr', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': None, '__type__': 'Rule'}, 269: {'origin': {'name': '__anon_star_18', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_18', '__type__': 'NonTerminal'}, {'name': 'SLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'atom', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': None, '__type__': 'Rule'}, 270: {'origin': {'name': '__anon_star_16', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_16', '__type__': 'NonTerminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'mul_expr', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': None, '__type__': 'Rule'}, 271: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'exists_sym', '__type__': 'NonTerminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 20, 'alias': 'exists', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 272: {'origin': {'name': 'formal', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'varlist', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'formal_call', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 273: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'forall_sym', '__type__': 'NonTerminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 18, 'alias': 'forall', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 274: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'THEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'implies', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 275: {'origin': {'name': '__anon_star_15', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_15', '__type__': 'NonTerminal'}, {'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'add_expr', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': None, '__type__': 'Rule'}, 276: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LET', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': '__ANON_5', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 25, 'alias': 'praline_let', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 277: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LET', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'BE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pecan_term', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 17, 'alias': 'praline_let_pecan', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 278: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'THEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 7, 'alias': 'praline_if', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 279: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'WITH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_plus_1', '__type__': 'NonTerminal'}, {'name': 'END', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}], 'order': 32, 'alias': 'praline_match', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 280: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'WITH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_plus_1', '__type__': 'NonTerminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'END', 'filter_out': True, '__type__': 'Terminal'}], 'order': 31, 'alias': 'praline_match', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 281: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': 'praline_match_list', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': [False, True, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 282: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'WITH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': '__anon_plus_1', '__type__': 'NonTerminal'}, {'name': 'END', 'filter_out': True, '__type__': 'Terminal'}], 'order': 29, 'alias': 'praline_match', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 283: {'origin': {'name': 'praline_list', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'praline_list_gen', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 284: {'origin': {'name': 'pred_definition', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_5', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'def_pred_standard', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 285: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'CONTEXT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'directive_context', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 286: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_1', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'directive_save_aut_img', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 287: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'directive_save_aut', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 288: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'prop_val', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': 'directive_assert_prop', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 289: {'origin': {'name': 'val_dict', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': [False, True, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 290: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'TYPE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'val_dict', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 9, 'alias': 'directive_type', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 291: {'origin': {'name': 'restriction', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'varlist', '__type__': 'NonTerminal'}, {'name': 'ARE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'varlist', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'restrict_call', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 292: {'origin': {'name': 'restriction', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'varlist', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'varlist', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'restrict_call', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 293: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'bool', '__type__': 'NonTerminal'}, {'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'AND', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'ONLY', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 12, 'alias': 'iff', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 294: {'origin': {'name': 'call', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'call_is_args', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 295: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'THEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': '_ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 8, 'alias': 'if_then_else', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 296: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LET', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': '__ANON_5', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 21, 'alias': 'praline_let', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 297: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LET', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': '__ANON_5', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 23, 'alias': 'praline_let', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 298: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LET', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': '__ANON_5', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 24, 'alias': 'praline_let', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 299: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LET', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'BE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pecan_term', '__type__': 'NonTerminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 15, 'alias': 'praline_let_pecan', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 300: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LET', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'BE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pecan_term', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 16, 'alias': 'praline_let_pecan', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 301: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LET', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'BE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'pecan_term', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 13, 'alias': 'praline_let_pecan', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 302: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'THEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'praline_if', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 303: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'THEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 5, 'alias': 'praline_if', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 304: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'THEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 6, 'alias': 'praline_if', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 305: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'WITH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_plus_1', '__type__': 'NonTerminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'END', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}], 'order': 30, 'alias': 'praline_match', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 306: {'origin': {'name': 'match_arm', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CASE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': '__ANON_6', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'praline_match_arm', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 307: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': '__ANON_7', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}], 'order': 6, 'alias': 'praline_match_prepend', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 308: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_plus_4', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 8, 'alias': 'praline_match_tuple', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': [False, False, True, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 309: {'origin': {'name': '__anon_plus_4', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': None, '__type__': 'Rule'}, 310: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'praline_match_list', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 311: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'WITH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': '__anon_plus_1', '__type__': 'NonTerminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'END', 'filter_out': True, '__type__': 'Terminal'}], 'order': 27, 'alias': 'praline_match', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 312: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'WITH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': '__anon_plus_1', '__type__': 'NonTerminal'}, {'name': 'END', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}], 'order': 28, 'alias': 'praline_match', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 313: {'origin': {'name': 'praline_list', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'praline_list_gen', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 314: {'origin': {'name': 'pred_definition', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_5', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 5, 'alias': 'def_pred_is_call', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 315: {'origin': {'name': 'val_dict', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kv_pair', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 316: {'origin': {'name': 'expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arith', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arith', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'index_range', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 317: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'bool', '__type__': 'NonTerminal'}, {'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'AND', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'ONLY', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 11, 'alias': 'iff', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 318: {'origin': {'name': 'formal', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'varlist', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'formal_is_call', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 319: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'THEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': '_ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 6, 'alias': 'if_then_else', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 320: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'THEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': '_ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 7, 'alias': 'if_then_else', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 321: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LET', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': '__ANON_5', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 19, 'alias': 'praline_let', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 322: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LET', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': '__ANON_5', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 20, 'alias': 'praline_let', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 323: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LET', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': '__ANON_5', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 22, 'alias': 'praline_let', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 324: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LET', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'BE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pecan_term', '__type__': 'NonTerminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 14, 'alias': 'praline_let_pecan', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 325: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LET', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'BE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'pecan_term', '__type__': 'NonTerminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 11, 'alias': 'praline_let_pecan', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 326: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LET', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'BE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'pecan_term', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 12, 'alias': 'praline_let_pecan', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 327: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'THEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'praline_if', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 328: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'THEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_if', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 329: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'THEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 4, 'alias': 'praline_if', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 330: {'origin': {'name': 'match_arm', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CASE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': '__ANON_6', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_match_arm', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 331: {'origin': {'name': 'match_arm', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CASE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': '__ANON_6', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'praline_match_arm', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 332: {'origin': {'name': '__anon_plus_4', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_plus_4', '__type__': 'NonTerminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': None, '__type__': 'Rule'}, 333: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_plus_4', '__type__': 'NonTerminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': 'praline_match_tuple', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 334: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': '__anon_star_3', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'praline_match_list', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 335: {'origin': {'name': '__anon_star_3', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': None, '__type__': 'Rule'}, 336: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'WITH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': '__anon_plus_1', '__type__': 'NonTerminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'END', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}], 'order': 26, 'alias': 'praline_match', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 337: {'origin': {'name': 'pred_definition', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_5', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 4, 'alias': 'def_pred_is_call', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 338: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_4', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 11, 'alias': 'directive_shuffle_or', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 339: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LOAD', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': 'directive_load_aut', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 340: {'origin': {'name': '__anon_star_13', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kv_pair', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': None, '__type__': 'Rule'}, 341: {'origin': {'name': 'val_dict', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kv_pair', '__type__': 'NonTerminal'}, {'name': '__anon_star_13', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 342: {'origin': {'name': 'val_dict', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kv_pair', '__type__': 'NonTerminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 343: {'origin': {'name': 'val_dict', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'kv_pair', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 344: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'SHUFFLE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 10, 'alias': 'directive_shuffle', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 345: {'origin': {'name': 'expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arith', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arith', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'index_range', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 346: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'THEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': '_ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 5, 'alias': 'if_then_else', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 347: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LET', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': '__ANON_5', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 18, 'alias': 'praline_let', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 348: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LET', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'BE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'pecan_term', '__type__': 'NonTerminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 10, 'alias': 'praline_let_pecan', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 349: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'THEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_if', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 350: {'origin': {'name': 'match_arm', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CASE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': '__ANON_6', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_match_arm', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 351: {'origin': {'name': '__anon_star_3', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_3', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': None, '__type__': 'Rule'}, 352: {'origin': {'name': '__anon_star_13', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'kv_pair', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': None, '__type__': 'Rule'}, 353: {'origin': {'name': '__anon_star_13', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kv_pair', '__type__': 'NonTerminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': None, '__type__': 'Rule'}, 354: {'origin': {'name': '__anon_star_13', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_13', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kv_pair', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': None, '__type__': 'Rule'}, 355: {'origin': {'name': 'val_dict', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kv_pair', '__type__': 'NonTerminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': '__anon_star_13', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 356: {'origin': {'name': 'val_dict', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'kv_pair', '__type__': 'NonTerminal'}, {'name': '__anon_star_13', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 357: {'origin': {'name': 'val_dict', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'kv_pair', '__type__': 'NonTerminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 358: {'origin': {'name': '__anon_star_13', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'kv_pair', '__type__': 'NonTerminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': None, '__type__': 'Rule'}, 359: {'origin': {'name': '__anon_star_13', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_13', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'kv_pair', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': None, '__type__': 'Rule'}, 360: {'origin': {'name': '__anon_star_13', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_13', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kv_pair', '__type__': 'NonTerminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': None, '__type__': 'Rule'}, 361: {'origin': {'name': 'val_dict', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'kv_pair', '__type__': 'NonTerminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': '__anon_star_13', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 362: {'origin': {'name': '__anon_star_13', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_13', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'kv_pair', '__type__': 'NonTerminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': None, '__type__': 'Rule'}, 363: {'origin': {'name': 'kv_pair', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'string', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'kv_pair', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}}
)
Shift = 0
Reduce = 1
def Lark_StandAlone(transformer=None, postlex=None):
  namespace = {'Rule': Rule, 'TerminalDef': TerminalDef}
  return Lark.deserialize(DATA, namespace, MEMO, transformer=transformer, postlex=postlex)
